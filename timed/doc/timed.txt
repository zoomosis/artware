











       ÚÄÄÄÄÄÄÄ·ÚÄÄÄÄÄÄ·ÚÄÄÄÄÄÄÄ·ÚÄ·   ÚÄ·ÚÄÄÄÄÄÄÄ·ÚÄÄÄÄÄÄ·ÚÄÄÄÄÄ·
       ³ ÉÍÍÍ¸ º³ ÉÍÍ¸ ºÔÍÍ¸ ÉÍÍ¼³ ºÚÄ·³ º³ ÉÍÍÍ¸ º³ ÉÍÍ¸ º³ ÉÍÍÍ¼
       ³ º   ³ º³ ÓÄÄÙ º   ³ º   ³ º³ º³ º³ º   ³ º³ ÓÄÄÙ º³ ÓÄÄ·
       ³ ÓÄÄ·³ º³ ÉÍ¸ É¼   ³ º   ³ º³ º³ º³ ÓÄÄ·³ º³ ÉÍ¸ É¼³ ÉÍÍ¼
       ³ ÉÍÍ¼³ º³ º À¿Ó·   ³ º   ³ ÓÙ ÓÙ º³ ÉÍÍ¼³ º³ º À¿Ó·³ ÓÄÄÄÄ·
       ÔÍ¼   ÔÍ¼ÔÍ¼  ÔÍ¼   ÔÍ¼   ÔÍÍÍÍÍÍÍ¼ÔÍ¼   ÔÍ¼ÔÍ¼  ÔÍ¼ÔÍÍÍÍÍÍ¼


                          presents to you:


                                  ÚÄÄÄÄÄ·       ÚÄ·
                                  ³ ÉÍÍÍ¼       ³ º
                 ÚÄ·   ÚÄ·ÚÄ·  ÚÄ·³ º           ³ º
              ÚÄÄÙ ÓÄÄ·³ º³ Ó·ÚÙ º³ ÓÄÄ·  ÚÄÄÄÄÄÙ º
              ÀÄÄ¿ ÉÍÍ¼³ º³  ÓÙ  º³ ÉÍÍ¼  ³ ÉÍÍÍ¸ º
                 ³ º   ³ º³ É¸É¸ º³ º     ³ º   ³ º
                 ³ ÓÄÄ·³ º³ ºÔ¼³ º³ ÓÄÄÄÄ·³ ÓÄÄÄÙ º
                 ÔÍÍÍÍ¼ÔÍ¼ÔÍ¼  ÔÍ¼ÔÍÍÍÍÍÍ¼ÔÍÍÍÍÍÍÍ¼  v1.30

             (c) 1992-2018  Gerard van Essen and others


          A fast message editor for Squish, JAM, *.MSG & Hudson.














    timEd version         : 1.12
    Document last updated : February 21 2018

    Note:  Features  marked  with {+}  are  only  available  in  registered
    versions of timEd.




    Programming code credits:


    !     timEd uses the Squish MSGAPI by Scott Dudley.

    !     Squish is a trademark of Scott J. Dudley

    !     timEd  uses Thomas  Wagner's EXEC  library to  swap timEd  out of
          memory.

    !     timEd's screen writing  routines are  partly based  on code  from
          jim nutt and Erik Vanriper (DOS version).

    !     JAM(mbp) -  Copyright 1993 Joaquim  Homrighausen, Andrew  Milner,
          Mats Birch, Mats Wallin. ALL RIGHTS RESERVED.


    Documentation credits:


    Documentation written by Gerard van Essen.

    Mac Chou (later he  used the name 'fengyun zhou') designed  the artwork
    for the  title page (and  stole nearly US$  600 from me  a bit later  -
    quite an expensive piece of art).

    Jelle Boot originally wrote the 'Quick installation' part.




























                                           timEd v1.30 manual - page 2



    Contents.

          1.  Introduction.   . . . . . . . . . . . . . . . . . . . .     5
          1.1  What is timEd?   . . . . . . . . . . . . . . . . . . .     5
          1.2  A highlight of timEd's features.   . . . . . . . . . .     6
          1.3  History  . . . . . . . . . . . . . . . . . . . . . . .     7
          1.4  System requirements  . . . . . . . . . . . . . . . . .     9

          2  Legal stuff  . . . . . . . . . . . . . . . . . . . . . .    10
          2.1  Copyright, license and disclaimer.   . . . . . . . . .    10

          3.  Quick installation  . . . . . . . . . . . . . . . . . .    12

          4.  Versions, command line parameters & errorlevels.  . . .    13
          4.1  What version of timEd?   . . . . . . . . . . . . . . .    13
          4.2  Command line parameters.   . . . . . . . . . . . . . .    13
          4.3  TimEd exit errorlevels   . . . . . . . . . . . . . . .    14

          5.  A guided tour of some of timEd's features   . . . . . .    15
          5.1  The Area Selection Screen  . . . . . . . . . . . . . .    15
          5.2  The message reading screen   . . . . . . . . . . . . .    16
          5.3  Entering a message   . . . . . . . . . . . . . . . . .    19
          5.4  Netmail messages   . . . . . . . . . . . . . . . . . .    21
          5.5  The List mode  . . . . . . . . . . . . . . . . . . . .    22
          5.6  The Find Screen  . . . . . . . . . . . . . . . . . . .    22

          6.  TimEd command reference   . . . . . . . . . . . . . . .    24
          6.1  The Area Selection Screen.   . . . . . . . . . . . . .    25
          6.2  The Message Reading Screen.  . . . . . . . . . . . . .    27
          6.3  The List Mode.   . . . . . . . . . . . . . . . . . . .    38
          6.4  TimEd's Find feature.  . . . . . . . . . . . . . . . .    38

          7.  TimEd keyboard reference  . . . . . . . . . . . . . . .    44

          8.  Effective use of timEd: some features explained   . . .    48
          8.1  Creating netmail messages.   . . . . . . . . . . . . .    48
          8.2  AKA matching.  . . . . . . . . . . . . . . . . . . . .    51
          8.3  TimEd's Carbon Copy (CC:) feature.   . . . . . . . . .    52
          8.4  TimEd's crossposting feature.  . . . . . . . . . . . .    54
          8.5  Message attributes   . . . . . . . . . . . . . . . . .    54
          8.6  Using the internal editor  . . . . . . . . . . . . . .    59
          8.7  Using an external editor   . . . . . . . . . . . . . .    62
          8.8  Reading messages 'gated' from Usenet/Internet    . . .    64
          8.9  Running external programs  . . . . . . . . . . . . . .    66
          8.10  Interfacing timEd with PGP and spellcheckers.   . . .    67
          8.11  Packing the search database   . . . . . . . . . . . .    71
          8.12  Text style nodelist flags with the V7 nodelist  . . .    71

          9.  Character translation   . . . . . . . . . . . . . . . .    75
          9.1  The problem addressed.   . . . . . . . . . . . . . . .    75
          9.2  The solution.  . . . . . . . . . . . . . . . . . . . .    75
          9.3  The implementation in timEd  . . . . . . . . . . . . .    76




                                           timEd v1.30 manual - page 3



          10.  Keyboard redefinition and macro's  . . . . . . . . . .    81
          10.1  The format of timkeys.cfg   . . . . . . . . . . . . .    81
          10.3  Some examples   . . . . . . . . . . . . . . . . . . .    83
          10.4  Defining the user menus in TIMKEYS.CFG  . . . . . . .    84
          10.5  Common problems with macros   . . . . . . . . . . . .    85

          11.  Message base formats explained   . . . . . . . . . . .    87
          11.1  *.MSG   . . . . . . . . . . . . . . . . . . . . . . .    87
          11.2  Hudson  . . . . . . . . . . . . . . . . . . . . . . .    88
          11.3  Squish  . . . . . . . . . . . . . . . . . . . . . . .    89
          11.4  JAM   . . . . . . . . . . . . . . . . . . . . . . . .    91

          12.  timEd configuration reference    . . . . . . . . . . .    92

          13.  Miscellaneous notes.   . . . . . . . . . . . . . . . .   129
          13.1  Multitasking considerations.  . . . . . . . . . . . .   129
          13.2  Some things to remember.  . . . . . . . . . . . . . .   129
          13.3  Technical notes.  . . . . . . . . . . . . . . . . . .   130
          13.4  TimEd source code   . . . . . . . . . . . . . . . . .   130

          14.  A list of all available commands   . . . . . . . . . .   131

          15.  Frequently asked questions   . . . . . . . . . . . . .   135

          16.  Thanks to..  . . . . . . . . . . . . . . . . . . . . .   137

          17.  Contacting the author.   . . . . . . . . . . . . . . .   138





























                                           timEd v1.30 manual - page 4



    1.  Introduction.


    1.1  What is timEd?

    TimEd is an electronic mail editor for FidoNet.

    FidoNet is a network of computer hobbyists, which makes  it possible to
    exchange both private  and public messages between systems connected to
    this network,  using the public  telephone network as  its transmission
    medium.

    In-depth discussion  of  FidoNet is  not  appropriate here,  there  are
    other sources for that information.

    In order to send  and receive messages, there  are three main tasks  to
    be fulfilled:

    1)    Reading and generating messages.
    2)    Packing  and  unpacking messages  into/from  standard mailpackets
          that can be easily exchanged.
    3)    Transmitting and receiving mailpackets.

    Most of the  time, these three  separate tasks are  fulfilled by  three
    different programs.

    Programs that  allow the  user to read  and write  messages are  called
    message editors.  TimEd is  a message  editor, that will  allow you  to
    comfortably read and write messages.

    Programs  that  will  pack  and  unpack  messages  are  usually  called
    echomail  processors  (or   'tossers').  Some   examples  of   echomail
    processors  that  are used  in  FidoNet:  Squishmail, Fastecho,  GEcho,
    Fmail.

    Programs  that  transmit and  receive mailpackets  are  called mailers.
    Some examples  of FidoNet  compatible mailers:  FrontDoor, BinkleyTerm,
    The Box, Portal of Power.

    Although  the  separate  tasks  are  usually   fulfilled  by  different
    programs, these programs  have to work  closely together: the  echomail
    processor must unpack the  messages into a format  that can be read  by
    the message editor, just as newly generated messages must  be generated
    in a format that can be understood by the echomail processor.

    There are several different ways to reach the same goal, and hence,  as
    you might have guessed,  there are several different formats  available
    to store  messages on a  system. Each of  these formats has  strong and
    weak points. 

    The collection of messages stored on the  system is usually referred to
    as  'the message  base' and  the  format in  which they  are stored  is
    called 'the message base format'.



                                           timEd v1.30 manual - page 5



    In order  to be  of use  to as  many  people as  possible, timEd  fully
    supports no less  than 4  different message  base formats. This  covers
    all popular  formats used in  FidoNet, as supported  by the most  often
    used echomail processors.


    1.2  A highlight of timEd's features.


    *     TimEd  was designed to offer  speed and ease  of use: the program
          is  fast and takes little of your  precious diskspace. It is also
          quite easy to install.

    *     Support  for all  major  message base  formats that  are used  in
          FidoNet: Squish, JAM, Hudson and *.MSG

    *     Direct  support  for  nodelist  indexes  used  by  FrontDoor  and
          Version 7 nodelists: no need  for large, extra nodelist  indexes,
          taking up lots of diskspace. 
          TimEd will just use the nodelist that is already present on  your
          system!

    *     Support for most popular  echomail processors: timEd can read the
          echomail  areas  from  area  configuration   files  generated  by
          Squish, Fastecho, GEcho, Fmail, Watergate and xMail.
          In addition, it  will read standard AREAS.BBS  format files, that
          can be generated by most other echomail processors.

    *     An  internal,  'quotesmart' editor,  with  automatic wordwrapping
          (including  intelligent reformatting of  quotes) and useful block
          commands.

    *     Optional  use  of  an  external  editor. If  you  don't  like the
          internal  editor, you  can  still use  the ASCII  editor of  your
          choice.

    *     Useful list mode,  with the  option to  tag several messages  and
          move, copy, delete or file all tagged messages with one command.

    *     Comprehensive  'find'  function. This  will  let  you search  for
          messages containing keywords you  specify in the header,  kludges
          or  the  body  of  the  message.  Search  options  include  'AND'
          searches, 'OR' searches,  'NOT' searches, case sensitive searches
          and searching for 'whole words only'.

          The  function  can be  used to  scan the  current area  only, all
          areas  or tagged  areas,  and to  scan all  messages or  only new
          messages. Searching can  be forward  or backward, and  the search
          direction can even be switched during a search.

          Found  messages can  be read  (the registered  version will  even
          highlight  the  lines  containing  any  of the  strings  you  are
          looking  for!), tagged,  written  to  a  file, copied,  moved  or
          deleted.


                                           timEd v1.30 manual - page 6



    *     Built-in,  fast  personal  mail  scanner. This  will  search  all
          message  areas for  messages addressed  to you.  (This feature is
          only available to registered users).

    *     Automatic  file   request  feature.   TimEd  can  extract   valid
          filenames that  are found in the message text  and let you launch
          a file request,  after you  selected some  files from a  picklist
          with the filenames that were found.

    *     Support for  messages that were  gated from Usenet, allowing  you
          to  send  private  'mail'  without  having  to  worry  about  the
          complicated usenet addresses:  timEd will  put them in  the right
          place for you (FSC-0035).

    *     Powerful keyboard redefinition and macro capabilities.

    *     Full  support for message encryption (using a program like Pretty
          Good Privacy) and spellchecking of messages.

    *     The  ability  to  run   external  programs,  like  message   base
          maintenance programs, encryption programs, spell checkers  and so
          on.

    *     Full support for extended character  sets (character translation)
          for use  with languages that  need more than just  standard ASCII
          characters.

    *     DOS, DOS 32 bit and OS/2 versions available.

    *     Lots more :-)


    1.3  History

    TimEd is one of those programs that 'were never meant to be'.

    When Scott Dudley released Maximus 2.00 and Squish 1.00,  I immediately
    switched (from  Qmail, *.MSG) to the  much more advanced Squish message
    base  format.  However,  initially   there  were  no  message   editors
    available, so I had  to use Maximus itself  to read the mail.  Although
    this went  reasonably well,  it wasn't  really fast  and I  missed some
    features ('netmail reply' being the most important one).

    When  Scott  released the  MSGAPI (and  I had  just  bought my  Turbo C
    compiler  :-) I played  with it a  bit, and  decided to make  a message
    viewer (yes, viewer only!).

    I got carried away.

    Later several  message editors for  Squish were released, but  I always
    found reasons  not to  switch (too  large, too  slow, too buggy,  ugly,
    whatever :-).




                                           timEd v1.30 manual - page 7



    I continued  working on timEd, other  people showed interest, got their
    copies and some of them even liked timEd!
    So.... I decided I  would try to make  a stable version, that  could be
    released 'to  the  public' to  check  out the  reactions (if  any).  Of
    course, a program  is never ready  (or without bugs),  so I delayed  it
    several times.

    Nevertheless, I released a first  'wide beta' version to the public  in
    november '92 as timEd/B5.

    Still unsure  about the  need for  yet another  message  editor, I  was
    pleasantly surprised  by the amount  of reactions I  got. Most  of them
    were quite positive  as well, which  made me motivated  to continue  to
    work on the program.

    Several other beta versions were released, until we reached beta 9.

    And then there was  this deja-vu thing: a  new message base format  was
    introduced, called JAM. And an accompanying API was released as well!

    So there it was,  sitting on my harddisk:  the specifications of a  new
    and exciting message base format, with accompanying sample code  for me
    to experiment.
    Like a beautiful  woman, I couldn't  get my  mind off it.  How could  I
    resist?

    So, being  one of  the first, timEd  also supported  JAM shortly  after
    that. This introduced timEd to a new group  of users, many of whom were
    still  using  the  Hudson  base.  With  requests   for  Hudson  support
    overflowing my  mailbox, I took the  plunge and implemented support for
    the Hudson message base as well..

    At the  same  time, the  internal  editor was  finally  ready as  well,
    adding the  last feature that  was (in my  opinion) still  missing, but
    should be present in a decent message editor.

    All  of this paved  the way to  the first official  non-beta release of
    timEd: v1.00. That version had  all the features I wanted my  editor to
    have, in order to work comfortably. 

    After that,  several other versions  were released, with more  and more
    features.  The  increased  power of  the  average  computer  made  this
    possible, without having to pay for it in terms of speed.

    I am not very fond  of programs that are full of  'bells and whistles',
    and you  won't find many  gee-whiz-bang features in timEd  (although it
    does have  some special things,  like a built-in personal  mail scanner
    and a nice 'Find' feature).

    If  you are looking for soundblaster  support, random origins, taglines
    and configurable beep-lengths, you better go  and find yourself another
    program.




                                           timEd v1.30 manual - page 8



    1.4  System requirements

    *     An IBM compatible computer.
    *     MS-DOS 3.3 or later, or OS/2 2.0 or later.
    *     Dos version: about 350 Kb of available memory.
    *     Dos 32 bit version: a  32 bit processor (386 or better) and about
          2 MB of memory.

















































                                           timEd v1.30 manual - page 9



    2  Legal stuff


    2.1  Copyright, license and disclaimer.

    *     "timEd"  refers  to  the  executables and  documentation  in  the
          original distribution archive.  TimEd is copyrighted material  by
          Gerard van  Essen.  It may  only be  used in  agreement with  the
          conditions set out in this license agreement.

    *     You  are entitled  and encouraged  to copy  and distribute timEd,
          provided you do not  change the contents of the timEd  archive or
          the program itself,  and no  money or  any other compensation  is
          asked or accepted for  timEd (without written permission from the
          author).
          Distribution of modified or incomplete archives is prohibited.

    *     Although care  has been taken  to write and  test a program  that
          does what  this document states,  the program is provided  as is,
          without  warranty or  guarantee of any  kind, either expressed or
          implied, as  to  the  quality  or performance  of  this  program,
          except that it will occupy disk space.    
     
    *     The  author, Gerard van Essen, will not  be held liable to you or
          anyone for (but not limited to) any direct,  indirect, incidental
          or  consequential  damages,  including  any  lost  profits,  lost
          savings which  may result from the  use or inability  to use this
          program. 

          Gerard  van  Essen  is  in  no way  obligated  to  provide future
          versions of, or support for this software. 
     
          Your  use  of the  program  constitutes  your agreement  to  this
          license and  disclaimer and your  release of the author  from any
          form of liability or litigation. 

    *     COMMERCIAL use of the  program: you are a commercial  user if you
          make  a  profit from  running timEd,  or if  you  use timEd  in a
          commercial     environment    (i.e.     business,    governmental
          organization, association, school, foundation, or  any other form
          of juridical person). In case of doubt, contact the author.

    *     For NON-COMMERCIAL  use,  it is  REQUIRED that  you register  the
          program  after an  evaluation  period  of  30 days.  This  period
          should  be sufficient  to  decide whether  you  want to  continue
          using the program or not.

          I would very much appreciate registration, and it will  stimulate
          me to keep on developing the program. 

          If  you really  cannot afford  to register  (mainly a  concern to
          'eastern block' countries, the  former USSR etc.), permission  is
          hereby granted to use an unregistered version.



                                           timEd v1.30 manual - page 10



          Remember, if you register, you are paying for something that  you
          already  have! Registration  does not  mean you  can force  me to
          implement new features that you like. 

    *     For COMMERCIAL  use of  the program, you  should always  register
          the program.  You are, however,  granted an evaluation period  of
          21 days.  After  these  21 days,  you  must either  register  the
          program,  or  stop using  it.  Using an  unregistered  version of
          timEd in  a  commercial  environment for  more  than 21  days  is
          prohibited!

    *     You only  have to register  once. Your registration will  also be
          valid for all future releases of timEd.

    *     Registration is valid for all versions of timEd. At this  moment,
          there  are  DOS, DOS  32  bit and  OS/2  versions of  the program
          available.  Registering  timEd  entitles  you  to   run  the  DOS
          version, the OS/2 version, or both :-)

    *     A  registration is  PERSONAL. It  cannot be  transferred to other
          parties. It could, however, be used in different places (but:  by
          the same PERSON). Think of it as  a book in this regard: you  can
          take the book from your home to the office (and read it there).

    *     Versions of  timEd  prior to  version  beta 10  (timEd/B10)  were
          freeware and could  not be  registered. You  may continue to  use
          THESE OLDER VERSIONS without  registration, even in a  commercial
          environment.

    *     The  author reserves  the  right to  change this  license without
          prior notice, for newer versions of the program.

























                                           timEd v1.30 manual - page 11



    3.  Quick installation


    Assuming you've just downloaded  the timEd archive from  your favourite
    BBS the  first thing to do is decide where to put the required files to
    run the program. You  could give timEd a directory of its own. However,
    due to the small  size of the program most users prefer  to place timEd
    in the same directory where their mail processor lives.

    TimEd needs the following files in order to run:

    - The executable file (timed.exe, tim386.exe or timedp.exe)
    - The configuration file (timed.cfg)
    - The character translation maps (writmaps.dat and readmaps.dat)
    - The keyboard definition file (timkeys.cfg)
    - The helpfile (timed.hlp)

    Next action is to  edit timed.cfg to suit  your needs and your  system.
    The file  that  is included  in the  archive is  heavily commented  and
    generally  just  changing  the  various  paths  to   reflect  your  own
    directories and of  course inserting  your own  address already  brings
    you halfway to a working system.

    The  only  part  that  requires  some  effort  is the  Area  Definition
    section.  TimEd will normally  read all your  EchoArea definitions from
    your mail processor's config file.

    As  soon as  you're in  doubt  about a  certain keyword,  refer to  the
    section called 'timEd configuration reference' in this  manual. This is
    an  alphabetic listing of  all keywords that can  be used in timEd.cfg,
    with an explanation of their use.

    Just follow the examples  provided and when you are finished you're off
    to the races. Fire up timEd and enjoy.






















                                           timEd v1.30 manual - page 12



    4.  Versions, command line parameters & errorlevels.


    4.1  What version of timEd?

    TimEd  comes in  a few  flavours. There  are currently  three different
    versions of the program:

    1 - A standard DOS 16 bit version.
    2 - An extended DOS 32 bit version.
    3 - A 32 bit OS/2 version.

    If you  run OS/2, the choice  is easy: the OS/2  version is superior to
    the other two versions in all aspects.

    If you  run DOS, the choice  is somewhat more  complicated. Contrary to
    what you might think, the 32 bit version is not always better.

    The 32  bit DOS version uses a so called 'DOS extender'. The extender  
    used is the well-known DOS4GW extender made by  Rational Systems. You  
    need at least a 386 processor to run it.

    Quite a  few programs already  use this extender  (GIGO, Squishmail,   
    Fastlist), so you  may already have it on  your system. You need the   
    runtime, DOS4GW.EXE, in order to run timEd's 32 bit DOS version.

    If you  don't have  it  on your  system: look  around  on BBS's  nearby
    because they  most likely have  it. If  you can't find  it, you can  at
    least find  it  on  my  system (2:281/527)  and  Evin  Mulron's  system
    (1:138/211) as DOS4GW.ZIP.

    A DOS  extender uses  the protected  mode  of the  Intel processors  to
    offer  a  large  memory   pool  that  can  be  easily  accessed  by  an
    application. For some  things (like  disk access)  it switches back  to
    the real mode to use plain DOS for  these services. This doesn't really
    sound too simple, and indeed it isn't.

    If the 32  bit version doesn't run on  your system, try the 16  bit DOS
    version. DOS extended applications  are known to not run at all, or not
    too well in  certain environments. In fact, I would  advise everyone to
    only use the 32  bit version when you regularly run out  of memory with
    the 16 bit version.


    4.2  Command line parameters.

    TimEd knows 3 command line parameters:

    -c

    Specify the  directory (yes, the  DIRECTORY, not a config  file!) where
    the config file (and helpfile, character translation maps  and keyboard
    definition file) can be found, like:



                                           timEd v1.30 manual - page 13



    timed.exe -cC:\Bbs\timed\

    Usually, you  do not need  this. TimEd will  look for timEd.cfg  in the
    current directory by default, where it can usually find it..

    Another command line  parameter is -p, to let timEd  pause at the
    intro  screen (so  you  can  check what  config  files were  parsed  by
    timEd). Like:

    timed.exe -p

    Of course, you can combine both switches:

    timed.exe -p -cC:\Bbs\timed

    Finally, the -v parameter tells timEd to simply display the version,
    build time and licensing information, then exit.


    4.3  TimEd exit errorlevels 

    TimEd can exit with several useful errorlevels:

       No mail entered    :   0
       Netmail entered    :   1
       Echomail entered   :   2
       Local mail entered :   4
       Mail in 'mailarea' :   8
       News entered       :  16


       If more than one type is entered the numbers are added:

       Net + Echo         :   3
       Net + Local        :   5
       Echo + Local       :   6
       Net + Echo + Local :   7
       Netmail + news     :  17
       and so on..

       Error: 254


    You  can trap these  errorlevels in a  batchfile, and scan  echomail or
    pack netmail (or both) based on the errorlevel.














                                           timEd v1.30 manual - page 14



    5.  A guided tour of some of timEd's features


    This section  will  show new  users  some of  timEd's features,  as  an
    introduction.  If you are  new to  electronic mail in  general, you may
    find this useful.

    If  you are  an  experienced 'electronic  mail reader',  you  will find
    timEd  easy to  use, because it  works like most  other electronic mail
    editors.  Some keys may  be a bit  different, but usually  not. And, if
    you don't like the  keys that are used  for certain functions, you  can
    redefine them!

    This section is a  'tour', NOT an in-depth  discussion of all the  'ins
    and outs'! There's much more to know than what is presented here!

    Pressing  F1 will  usually  give  a  helpscreen, listing  the  commands
    available  in the section of the program  that you are currently in. If
    F1 doesn't work, you should check for the presence of TIMED.HLP in  the
    timEd directory.

    Let's assume you have  already edited timEd.cfg to suit your needs, and
    that there are  some areas (at  least a netmail  area and one  echomail
    area) installed in there.
    If there  are not, please add some 'fake' areas  to the config, just to
    be able to read and enter some messages..


    5.1  The Area Selection Screen

    After starting  up timEd, and going through  the intro screen, you will
    be presented with a list of all installed  message areas. The list will
    look like this:

      Area description:                        New    Last  
    ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    ³ Netmail Area           NETMAIL             0     47  ³
    ³ Netmail squish         net2                0    589  ³
    ³ Netmail squish2        net3                0      2  ³
    ³ Netmail (rcvd)         rcvd                0      0  ³
    ³ Netmail (sent)         sent                0      0  ³
    ³ Netmail JAM            netjam              0    193  ³
    ³ Netmail JAM2           netjam2             0    149  ³
    ³ Netmail HMB            nethmb              0      2  ³
    ³ contrast               contrast            0      7  ³
    ³ os2.028                os2.028        *   11    110  ³
    ³ artware                artware             0    155  ³
    ³ artware.closed         artware.closed      0      0  ³
    ³ contrast.news          contrast.news       0    780  ³
    ³ tub                    tub            *    4    216  ³
    ³ points.133             points.133          0    146  ³
    ³ fdecho.028             fdecho.028          0     48  ³
    ³ net_dev.028            net_dev.028    *    5    144  ³
    ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ


                                           timEd v1.30 manual - page 15




    One of the  areas (the first one,  when you first start timEd  up) will
    be 'highlighted'.  You  can  move around  through  the areas  with  the
    cursor keys, page-up and down etc.

    On  every line,  the first  part is  the description  of the  area, the
    second part is the official 'areatag' of that area.  
    Then there are two numbers: the first one is the number of  new, unread
    messages that are present  in the area, the  second one is the  highest
    message number in that area. 
    Every area that contains new messages will be  marked with a star ('*')
    in front of the numbers.

    At startup, you  might see '-    -' instead  of the numbers. This means
    the area was not yet scanned for new mail. You can scan  for a new mail
    by pressing ALT-S (Scan).

    You can  now move around  to find the area  you want to read.  When you
    found it, press <enter>.

    Tip: to quickly find  an area, you can also start typing the 'areatag'.
    TimEd will quickly jump to the first area with an areatag that  matches
    the  letters you  typed (even  if the string  you are  typing is hidden
    somewhere  in  the  middle  of  the name,  like  the  string  'os2'  in
    comp.os.os2.programming!).

    To exit  timEd, press ALT-X (don't do  that now, we want  to finish our
    tour!).

    Remember, F1 gives you a help screen if you forgot the commands!


    5.2  The message reading screen

    After  you selected  an area  to read, you  will be  presented with the
    lastread message of  the area  you entered.  If there  are no  messages
    present in that  area, a message indicating that  unfortunate situation
    is shown  (in that  case, proceed with  'entering a  message' and  then
    come back here..).

















                                           timEd v1.30 manual - page 16



    The screen will look like this:

    = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = -

    Date : Apr 08 '94, 18:50                       Loc 
    From : Gerard van Essen                2:281/527.1                   
    To   : All                                                             
    Subj : Testing..                                                       
    ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
    Hello All!                                                             
                                                                          

       This is just a test!


    Groetjes, ........  === Art ===

            
    --- timEd 1.00+                                                        
     * Origin:  CONTRAST | TSARTNOC  (2:281/527.1)                         
                                                                          
            
    Area: contrast     100%  Current: 9, high: 9 ³ 318K

    = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = -

    First we'll take a closer look at the header:

    = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = -

    Date : Apr 08 '94, 18:50                       Loc 
    From : Gerard van Essen                2:281/527.1                   
    To   : All                                                             
    Subj :  Testing..                                                      
    ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

    = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = -

    As  you can see, it lists the  date (when the message was written), who
    wrote the message (From:), who the message is to (TO:) and the  subject
    of the message.

    On  the right hand  side, at the  top you see 'loc'.  That is the place
    where  timEd will  show the  'attributes' (status)  of the  message. In
    this  case it  is  'loc'  (Local: the  message  was generated  on  this
    system).

    Below  the attribute you see '2:281/527.1', which is the address of the
    person  who wrote  the  message. This  is  an  echomail area,  and  the
    address of the person who sent the message  was deduced from the origin
    line  at  the bottom  of  the  message. This  has  to  be done  because
    echomail messages are public, and not sent to one  certain address (but
    are spread by many systems), and contain no origin address either.



                                           timEd v1.30 manual - page 17



    In  netmail areas,  this  is different,  addresses  are always  present
    there,  and  don't have  to  be  deduced from  the  text. In  addition,
    netmail also has a destination address, that is shown below  the origin
    address:

    = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = -

    Date : Apr 08 '94, 18:50                   Pvt Loc 
    From : Gerard van Essen                2:281/527.1                   
    To   : Evin Mulron                     1:138/211.0
    Subj : Testing..                                                       
    ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

    = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = -

    This netmail  message is addressed to  Evin Mulron, and  his address is
    1:138/211. As you can  see, this message also  has the 'pvt'  attribute
    (private).

    Now let's return to our  sample echomail message, and look at  the body
    again:

    = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = -

    ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
    Hello All!                                                             
                                                                          

       This  is just a test!                                               
            
             
    Groetjes, ........  === Art ===                                        
                                                                          
            
    --- timEd 1.00+
     * Origin:  CONTRAST | TSARTNOC  (2:281/527.1)                         

    = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = -
        
    You can see  the text of  the message. Then  there is a line  with '---
    timEd 1.00+', called  the tearline.  This line  should show nothing  at
    all  (so  just '---'),  or  else  the name  of  the  message editor  or
    echomail processor the sender was using.

    Then  there is a line with '  * Origin: ...... (<address>)', that shows
    some text and ends with the address of  the person who sent the message
    (which is the place where timEd got the address that was listed  in the
    header of this echomail message).








                                           timEd v1.30 manual - page 18



    Finally, the bottom line shows:                                        

    = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = -
                                   
    Area: contrast         100%        Current: 9, high: 9 ³ 318K

    = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = -
    First  the current area  is shown. Then a  percentage, showing how much
    of  the current message  was already  shown to you,  the number  of the
    current message, the  number of  the highest  message, and finally  the
    amount of memory that is free (only in the DOS version).

    This is the  screen you will be  looking at most  of the time.  You can
    use the cursor keys  (up and down), home, end,  page up & down to  move
    the message body so you can read all of it.

    You  can use  cursor right  and left  to move to  the next  or previous
    message.  If you entered a message area  with lots of messages, you can
    now move around in the message area to read all of them.

    To quickly move to  the first message in an area, press ctrl-<home>, to
    go to the last one, press ctrl-<end>.

    To go back to  the Area Selection Screen, press <ESC>. Press <enter> on
    any area to enter an area again.

    Provided you  have already linked up  some areas with  your uplink, and
    mail  is already  flowing, this  basic knowledge  is already  enough to
    keep you busy for several hours a day. But there's more...

    There's a  lot  you can  do with  a message.  The F1  help screen  will
    reveal  many  more  functions:  writing  a  message  to a  file  ('W'),
    Printing  it ('P'), deleting it with <del>,  move or copy it to another
    area with 'M' etc. Just try it!

    Some other nice things:

    Press 'I'. You will be presented with more  info about the message, and
    about the message area you are currently in.

    Press 'K' to see hidden control info in the message (if there is any).

    Press  'J' to temporarily jump to DOS or  OS/2 to do something else for
    a while.


    5.3  Entering a message

    Reading is good, writing is better. Now we know  how to read a message,
    we also want to write one!
    In order to do this, go into an echomail area, and press <INS>.

    You will  now provided  with  a fresh  message header,  with your  name
    already filled in, for you to fill out:


                                           timEd v1.30 manual - page 19




    ÕÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¸
    ³Sender    ³ Gerard van Essen                                      ³
    ³ÀÄ Address³ 2:281/527                                             ³
    ³Recipient ³°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°° ³
    ³ÀÄ Address³ 0:0/0                                                 ³
    ³Subject   ³                                                       ³
    ³Attributes³ pvt loc                                               ³
    ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
    ³ Attached files:               ³ Requested files:  ³ Special:     ³
    ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´ Name     Password ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
    ³ - none -                      ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´ [ ] Encrypt  ³
    ³                               ³ - none -          ³ [ ] Sign     ³
    ³                               ³                   ³ [ ] Spellchk ³
    ³                               ³                   ³              ³
    ³                               ³                   ³              ³
    ³                               ³                   ³              ³
    ³                               ³                   ³              ³
    ³                               ³                   ³              ³
    ³                               ³                   ³              ³
    ³                               ³                   ³              ³
    ³                               ³                   ³              ³
    ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
    ³ ALT-A: Attach files            ALT-R: Request     ALT-S: Special ³
    ÔÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¾


    You  see the cursor at the TO:  field. Type a name  if you want to send
    the message  to a particular person,  or just 'All'. Press  <enter> and
    edit the  subject. Press  <enter> again,  and once  again (you  will be
    presented with  an 'attributes' screen, but  we press <enter> and leave
    everything at the default values).

    What  happens next  depends on  your  setup. It  is time  to enter  the
    message  body, so  either  the external  editor that  you  installed is
    started  up, or timEd's internal editor  kicks in. Lets' assume you use
    the internal editor:

    = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = -

    Area: contrast        To: All (Test)           

    Hello All!                                     
                                                   
                                                   



    Groetjes, ..........  === Art ===


    ---
     * Origin:  CONTRAST | TSARTNOC  (2:281/527.1)



                                           timEd v1.30 manual - page 20




    We see timEd did  a lot of work for us (depending on what you specified
    in timEd.cfg).

    The top  line  shows  the  area,  and  the  person(s)  the  message  is
    addressed to ('all') and the subject between brackets ('test').

    TimEd already entered  'Hello All' at  the top for  us, and ended  with
    (Dutch) greetings.
    It generated an Origin line as well, that is already filled in.

    We can now easily finish the message text to our liking.
    Several commands are available (see section on the internal  editor, or
    press F1 for help).

    Once we're ready, we press ALT-S to save the message.
    TimEd will do some work for you, generating  the actual message, and we
    will return at the Message Reading screen.

    Press <ctrl-end> to move to the last message  in the area, which is (of
    course)  the  message  we  just  created!  There,  your  first  message
    generated with timEd!

    You know how to enter a new message now,  but usually you want to enter
    a  reply to another  messages. To do  this, press ALT-R  (or just 'R').
    Once again, you will  have to edit the  header, but timEd will  already
    have filled  in some default  values, that may  save you the  typing if
    they are what you want. You can then simply press <enter>.

    When you're ready to edit  the message body, you will see that the text
    of the message you  are replying to is  already present in the  message
    body, in 'quoted' format: it is preceded by  strings like: 'GvE> ' (the
    initials of the writer  of the message and a '>' token  to indicate you
    are quoting someone else).
    Delete  all the  lines that  are unimportant  (or not  needed to remind
    others  what you are actually replying  to) and insert your reaction to
    the message.

    In  general: quote only what is really  needed. Less quoting is better,
    you're only repeating what was said before!

    A very  fast way to reply  is to press 'T'. This  will not let you edit
    the header at  all, but  automatically inserts  the default values  and
    immediately puts you in the message editor to edit the body.

    Once again, pressing ALT-S  will save the text you typed,  and generate
    a message with it.


    5.4  Netmail messages

    As  was mentioned before, netmail  is somewhat different from echomail,
    because  in  netmail  real   electronic  addresses  are  present   (and
    necessary).  This means,  that when you  edit a  message header  in the


                                           timEd v1.30 manual - page 21



    netmail area,  you must also  know the  address of  the person you  are
    sending a message to.
    TimEd can  help you there,  with nodelist lookups  (you only enter  the
    name,  and timEd searches the nodelist for the actual address). Look at
    the section  'entering netmail messages' later  in this manual for more
    info.


    5.5  The List mode

    Apart  from looking  at messages one  at a  time, you  can also  get an
    overview  of the  messages  in  the area  using  the List  mode.  While
    looking at the message reading screen, press 'L'.
    You will then  be presented  with a  list of  message headers,  looking
    like this:
    ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    ³ 1 Sjaak Paridaens      Gerard van Essen     Printen              ³
    ³ 2 Gerard van Essen     Sjaak Paridaens      Printen              ³
    ³ 3 Andre Boogaards      Gerard van Essen     Netwerk, rebooten en ³
    ³ 4 Andre Boogaards      Gerard van Essen     The Sequel...        ³
    ³ 5 Gerard van Essen     Andre Boogaards      Netwerk, rebooten en ³
    ³ 6 Dick Pluim           Gerard van Essen     nog een bug?         ³
    ³ 7 Gerard van Essen     Dick Pluim           nog een bug?         ³
    ³ 8 Andre Boogaards      Gerard van Essen     Netmgr masking idee  ³
    ³ 9 Gerard van Essen     All                  Testing..            ³
    ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

    This looks a  lot like the Area Selection Screen,  but it shows message
    headers, not message  areas. You can move around with  cursor keys etc.
    here as well, just like  the Area Selection Screen. It gives you a nice
    view of  the area.  As soon  as you  see a  header that  interests you,
    press <enter> on that header, and you will  drop to the Message Reading
    Screen again, to read the entire message.

    Now press S  while you are in the List mode. You  will see that the TO:
    fields are not shown  anymore, but the 'Subject'  lines get a lot  more
    space. This is  mainly for people who read  messages gated from Usenet.
    Those messages usually all have  'all' as the to: field, so  that space
    can be  used for the subject  line! You can also get  into this mode by
    pressing 'B' (Broad List) while you are at the Message Reading Screen.

    You can also  tag messages from  the List screen, by  pressing <space>.
    (Also by pressing '+' to specify a range, and more, see help screen).
    Use this to tag a lot  of messages, and then Move, Copy, Delete,  Write
    to file or Print a whole bunch of messages with the touch of a key!

    Once again: the F1 help screen will give you all the commands!


    5.6  The Find Screen

    The last  stop in this  tour is one of  the nicest functions  in timEd:
    the  Find feature.  It will  let you  search for  messages that  have a
    certain keyword in them,  in either the header (the From field, the TO:


                                           timEd v1.30 manual - page 22



    field or the subject) or the message body.

    TimEd can  search all areas,  or just the  current area. It  can search
    all messages in the area, or just the new, unread messages.

    You can activate  the Find feature  by pressing  'F'. From what  you've
    seen upto now, you  know that the first thing  to do is pressing F1  to
    see some help on  the keys to use.  It will be pretty easy  after that.
    Fill in the 'find  form' (press <ins> to add a new item) and then press
    ctrl-<enter> to start  the search.  More info  about the F)ind  feature
    can be found in a special section about it later in this manual.

    Also check out  the file request feature,  which is described later  in
    the manual as well!

    This ends our introductory tour. The key to success in timEd is  called
    'F1'. Remember that, and you'll be on your  way! Many more useful hints
    and tips can be found in the rest of this manual. If  you don't read it
    in its entirety, you  may miss out on  some pretty useful things.  That
    will be _your_ loss.

    Good luck!


































                                           timEd v1.30 manual - page 23



    6.  TimEd command reference


    This section  explains just about every  command available in timEd. It
    usually  just tells you how  it works, but often  not why it works like
    that, or  how you can use  it best. If you want  to know more about the
    commands,  you  might  find  hints  and  tips  in  the  chapter  called
    'Effective use of timEd: some features explained'.

    Please note, that all commands are presented together with  the default
    keybinding, that is  used in  the default  timkeys.cfg that comes  with
    the timEd package.
    TimEd  allows you to  redefine the keyboard  in many places,  so if you
    made  changes the key  that needs to  be pressed on  your system may be
    another one. However,  if you  made changes  yourself, you should  also
    know  what the new key  is. A list  of all the  functions (that is: the
    official  function  names)  can  be  found  in  another  part  of  this
    document.

    First,  we start off  with a  short description  of the  string editing
    function, that is available from several places in timEd.


    ş String editing in timEd

    In timEd, there  are several functions that let  you edit strings. Some
    examples  include  generating a  message  header  (TO: field,  address,
    subject) and the 'write  message to file' function,  where you have  to
    enter a filename.

    All string editing functions use the same routine, where  the following
    keys are active:

    Right arrow, left arrow : move left and right in string.

    <end>, <home> :   go to the beginning or the end of the string.

    <ctrl-left>, <ctrl-right> :   jump to previous or next word. 
    <ctrl-end>                :   delete  string from  cursor  position  to
                                  end.

    Delete and backspace work as expected.
    Press <INS> to toggle 'insert mode'.

    And, very useful:

    CTRL-Y : Delete entire string.

    You can also influence  timEd's behaviour with the  Jumpy_Edit keyword.
    See the section listing all keywords for more info.

    ALT-J will let you shell to the OS when editing any string.




                                           timEd v1.30 manual - page 24



    Whenever you  edited a  string, you  should press  <enter> to make  the
    actual change. If you changed your mind, you could press <ESC>. 
    However, sometimes you  are editing  a set  of fields  (like editing  a
    message header),  where pressing <ESC> would abort the entire function.
    In  that  case you  can also  press <TAB>  (which  means: jump  to next
    field, don't change current contents of string).


    6.1  The Area Selection Screen.

    After starting timEd up,  you will be presented with the Area Selection
    Screen: a list of all message areas found in your configuration.

    Use the cursor keys (up  and down), <page up>, <page down>,  <home> and
    <end> to move around.

    A quick way to find  an area is 'speedsearch'. If you know the official
    areatag  of the area  you want  to read, start  typing that  tag. TimEd
    will try to find the  first areatag matching the characters you  typed.
    The characters will also appear at the top of the screen. 

    If  there is no  areatag that starts  with the letters  you type, timEd
    will try to find the  string you typed as a SUBstring  somewhere within
    the areaname.
    For example, if you have the following areas:

    comp.os.os2.programmer
    comp.os.os2.networking
    comp.os.os2.advocacy

    and type 'advoc', timEd will find no areatag that starts with  'advoc',
    but  it WILL find one that has  'advoc' as a substring! So it will jump
    to the third area.

    The  'speedsearch  string' will  disappear  (and be  cleared)  when you
    press a 'movement key' (like 'cursor up').

    If  you press  CTRL-L, timEd  will try  to find  a next  match  for the
    speedsearch  string (this may come in handy  if you have an area called
    OS2, but also  one called OS2.028, and they are not close to each other
    in the arealist).

    To start reading messages in an area, press <ENTER> or the right  arrow
    key.  TimEd  will  then  enter that  area  and  display  the  last read
    message.

    On the area selection screen, the following keys are also active:

    ALT-S   :   scan areas for new mail. This will determine the  number of
                messages  present  in every  area,  and the  number  of new
                (unread) messages. This function  will scan all areas  that
                have not been scanned before.




                                           timEd v1.30 manual - page 25



    ALT-T   :   scan areas for new mail. This will determine the  number of
                messages  present  in every  area,  and the  number  of new
                (unread)  messages. This  function will  scan _all_  areas,
                even if  they were scanned  before. Great  if new mail  was
                tossed  in  the background  (on  a  multitasking system  or
                network).

    ALT-P   :   {+}  personal mail scan. This will  scan all areas for mail
                addressed TO: you or your alias (as defined in timed.cfg).

                While  viewing   a  found  message,   nearly  all  'normal'
                functions are available to you (like  R)eply, T)urbo reply,
                P)rint, W)rite to file etc).

                Some  keys  (like  cursor  right  and  left)  continue  the
                search.  You  can  interrupt  the  search  at any  time  by
                pressing <ESC>.

    ALT-X   :   Exit timEd.  If specified  in timed.cfg, an  'echotoss.log'
                file will be written at this point.

    ALT-L   :   Enter the  area,  and go  directly  into the  'List  mode',
                showing a list of message headers.

    ALT-J   :   Jump to DOS.

    <space> :   Tag message area (see section about this below).

    ALT-R   :   Read 'tagset' (for tagged areas, read section below).

    ALT-W   :   Save 'tagset' (for tagged areas, read section below).

    ALT-M   :   Select a 'view'  on the arealist (all,  new, tagged etc).
                See section below.

    F1      :   Show a helpscreen with available functions.


    With <space>, you can  tag (mark) areas. A  collection of marked  areas
    is called  a 'tagset', and can be  saved to disk using  ALT-W. A tagset
    that was  saved to disk,  can later  be read from  disk again by  using
    ALT-R.

    Each set is identified with a number  (the first one is 0, last  one is
    9), so you can save up to 10 sets.  Additionally, all sets have a name.
    You will be prompted  for it when you save the tagset,  and when trying
    to read  one (ALT-R)  you  will see  a list  of the  tagsets and  their
    names.

    Tagset  number 0 is the default, and  will be automatically loaded from
    disk when timEd starts up.

    Together with the ALT-M function (select 'view' on the  arealist), this
    gives you the opportunity to only see and  work on a selection of areas


                                           timEd v1.30 manual - page 26



    instead of the entire message base.

    The following views are available:

    ş     All areas.

    This will show all areas found in the configuration file(s).

    ş     Tagged areas.

    This will restrict your view  to the areas you tagged, others  will not
    be  shown (or scanned etc.). This is  mainly useful for SysOps who have
    many areas  they never intend  to read anyway (but  want to be  able to
    access them once in a while in order to check things). 
    You will only see  the areas you are interested in at  that moment, and
    other areas will not  be scanned either, which  will save you a  lot of
    time. 

    ş     Areas with new mail. 

    This  will show only areas  that contain new,  unread messages. This is
    an easy  way to  read all  new messages: the  number of  areas that  is
    shown  will decrease  (an  area  you read  will  have no  new  messages
    anymore and  therefore disappear from  the arealist) until you  have no
    more unread mail!
     
    These two modes (tagged & new messages) can also be combined:

    ş     Tagged areas with new mail.

    This will show only areas that are tagged *and* have new mail.

    The mode at  startup can be set  with a keyword:  Startup_Mode (values:
    All, New, Tagged or NewTagged).

    Together  these function  give  you the  ability to  usually work  on a
    subset of your areas  and easily find areas  with new mail, but  switch
    to a full view with a keypress.


    6.2  The Message Reading Screen.

    When you enter an area, the lastread message will be shown.

    You can  scroll the  message  body (if  it doesn't  fit  on one  screen
    entirely) using cursor keys  (up and down) and <page up>,  <page down>,
    <home> and <end>.

    <ESC> or ALT-A will take you back to the area selection screen.







                                           timEd v1.30 manual - page 27



    Moving around in a message area.
    --------------------------------

    Press the right  arrow key to  go to the  next message, the  left arrow
    key to go to the previous message.

    <ENTER>  will   also  move  to  the   next  message  (unless  you  have
    'EnterMarks Yes' in your  timEd.cfg - in that  case it will mark  (tag)
    the current message and space can then  be used to move a page  down in
    the message  (if there is  more text to  show) or to  move to  the next
    message (if you are already at the bottom of the text)). 

    <page  up> and  <page  down> will  move  one page  up  or down  in  the
    message.

    Ctrl-<END> will take you to the last message in the area.

    Ctrl-<HOME> will take you to the first message in the area.

    Type a number  to go to a  specific message. A  small box will  pop up,
    where you can edit the number of the message to jump to.

    Ctrl-<up>  will move  to  the next  marked ('tagged')  message  in that
    area.

    Ctrl-<down> will  move to  the  previous marked  ('tagged') message  in
    that area.

    Ctrl <left>  will go to the  'original' message, i.e. the  message that
    the  current message  is a  reply to.  If you are  reading a  reply and
    don't know anymore what the original message was about, use this.

    Ctrl <right>  will go to the  reply to this  message (if there  are any
    replies  already). If  there is  more than  one reply,  a list  will be
    shown  (with the  name of the  sender of the  reply) so  you can choose
    one.
    The availability of  replies and 'the original' is shown  at the top of
    the message screen. An example:

    -=-

    Date : 20-10-'92, 21:38     1744
    From : Jan Terpstra                               2:280/216.0
    To   : Hans Boelens
    Subj : Negeer dit!
    ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

    -=-

    Here you can see, that this message is a reply to message 17, and  that
    there is  a reply to this message, number 44.  If there would have been
    more  replies  (and  you  used  a  reply  linker  that  is  capable  of
    specifying  'multiple uplinks', a  feature that  is only  available for
    Squish style  message bases) there  would have been more  numbers after


                                           timEd v1.30 manual - page 28



    the '44'.

    For JAM style areas:

    In  addition to  the  'normal' links,  you  may  see a  number  between
    brackets, like this: (25). That  means that there is _another_ reply to
    the original message  (it can only show  up if you are reading  a reply
    to  a certain message).  Pressing ALT-right or ALT-+  will let you jump
    to that message.

    An example:

    You are reading message #5, it shows (at the top):

      25 30

    That would mean there  are two replies to  this message, number 25  and
    number 30.
    You  press ctrl-right  (to get  a pop-up  window, displaying  who wrote
    both replies), and choose the first reply (number 25).

    This message (number 25) may show:

       550 (30)

    This means that this is a reply  to message 5, that there is a reply to
    this message  (the reply  is number 50),  and that  there is  _another_
    reply to the original message  (the original message was number 5), and
    that  the number  of that  other reply is  number 30  (which is exactly
    what message #5 showed us).

    Confused? You should be!

    Simple: if there  is more than  one reply to a  message, you can  press
    ctrl-right, go to the first reply, and then  keep on pressing ALT-right
    (or ALT-+) to read all other replies as well.  When you reached the end
    of all replies, you press ctrl-left to go back to the original  message
    again..

    Remember, this only applies to JAM style areas!


    ALT-E, E, <ins> : Enter message

    This will  let you create a new message in the current area. TimEd will
    first let you edit  the header, and will  then spawn the editor,  where
    you can type  in the message text.  Save the text and  exit the editor.
    You will then come  back in timEd, that will read your message and save
    it.
    See also the section 'Creating netmail and file attaches'.






                                           timEd v1.30 manual - page 29



    ALT-R, R, ALT-Q, Q : Reply to message

    This will let you write a reply to the message that is currently  shown
    on  the screen. TimEd  will let you  edit the header  (press <ENTER> to
    accept  the defaults)  and quote  the entire  message. Then  the editor
    will be spawned..


    ALT-N, N : Reply other area

    Create  a reply, but select another area to put the reply in. This will
    first  take you to the Area Selection  Screen, where you can choose the
    area.


    ALT-O, O : Reply 'followup'

    This will  let you quote  the message text  and add your  comments, but
    will not  address the message to the writer of that message, but to the
    person to whom the current message is addressed to.

    So, when someone  writes a message to John,  and you use ALT-O  on that
    message, it will  be quoted and  also addressed to  John. You can  then
    add "I want that too!", or something similar :-)


    ALT-T, T : Reply, accept defaults

    This  is  the equivalent  of ALT-R,  but you  will  go directly  to the
    editor, accepting the defaults for the TO: and Subj: fields.
    This is a fast way to reply, for lazy people with little time :-)


    CTRL-B: Bounce-reply

    This is only available  in netmail. It will  generate a reply, but  not
    quote  the  message. Instead,  it  returns  the original  message  text
    (including a copy of the message header). 

    It will dump you in  the message editor, so you can  add the reason for
    your bounce-action. 


    ALT-C, C : Change message

    This will let you change the message (header + body).


    CTRL-H   : Change header

    This will you change the header of a message only.





                                           timEd v1.30 manual - page 30



    ALt-S, S : Change message attributes

    This will  let you edit  the message's attributes (like  private, crash
    etc.).


    CTRL-U   : Unreceive message.

    This turns *off* the  'received' bit. Be sure *not* to fool around with
    the message anymore, but move to the next message  (or out of the area,
    or  whatever) immediately,  or  the 'received'  bit will  be  set again
    before you know it :)


    ALT-D, D, <del> : Delete message

    Delete the current message. TimEd will first ask a confirmation.


    ALT-W, W : Write to file

    Write the current message to a file.  TimEd will ask for a filename  to
    write to. You can  also put (for example)  LPT1, PRN as the  'filename'
    to send output to the printer.

    If you  defined more  than one 'writename'  in timEd.cfg, you  can also
    press <TAB> here, to get a  list of all defined names. With  the cursor
    keys you can scroll through the list and pick one with <enter>.

    The  'variables'   that  can  be  used   for  external  programs  (like
    [areatag], [msgno] etc) can  also be used when  entering the name of  a
    file to  write a message to. This allows you to write messages to files
    called 'artware.msg', or 'artware.100' and so on.
    See the  section about running  external programs for a  description of
    the variables that can be used.


    ALT-P, P : Print message (hardcopy).

    This will send  the current message to your printer,  as defined by the
    'Printer' keyword in timEd.cfg. If no 'Printer' statement was  found in
    timEd.cfg, it will default to LPT1.

    TimEd attempts  to check printer  status before attempting to  write to
    the  printer.  This  is  not full-proof  (for  DOS  int  17,  for  OS/2
    DosDevIOCtl  cat. 0x05,  func.  0x66), for  example I  already  know it
    doesn't work in an OS/2 DOS box. Still, it may catch some errors.


    ALT-M, M : Move, copy, forward

    This will let you move, copy or forward the current message to  another
    area.
    It will first show  you the Area Selection  Screen, where you can  pick


                                           timEd v1.30 manual - page 31



    the destination area of your choice.

    The  'forward' option  will  let you  edit the  header  (TO: and  Subj:
    fields) before dumping you in  the editor, where you can edit or add to
    the body of the message, before saving it.

    Differences between copy/move and forward:

    Copy/Move.

    These options will change VERY LITTLE of the message.  SEEN-BY's, PATHs
    and VIA lines  will be stripped. In addition 'sent'  and 'scanned' bits
    will be toggled  off. Nothing else is  changed: the date/time is  still
    the  same, the MSGID  is still the  same etc. So  this does indeed what
    the function says: copy (which is not change!).

    This will make a message ready to be  exported (again?) by your tosser,
    but note  that if you  are really sending  it out AGAIN,  dupe checkers
    may catch it as a dupe (as they  should, of course, as it is a dupe).

    If  you   copy/move  a  batch  of   messages  (i.e.:  copy/move  tagged
    messages),  even the  above is  not done and  the message  remains 100%
    unchanged. The reasoning behind this being, that a mass  move/copy will
    be to an archive area and never intended to be exported again.

    Also note,  that  echomail  messages  do NOT  have  a  origination  and
    destination address  in  the  header.  If  you  move/copy  an  echomail
    message  to  netmail  (that  *is*  supposed   to  have  useful  address
    fields!), the address fields will show random values!

    Forward.

    Forward  generates  an  entirely new  message,  with  an  entirely  new
    header, with a correct  name and address, origin,  a new MSGID etc.  In
    all respects this is  a new message, it just  shows the body of an  old
    message.  In nearly all cases (except  copy/move to an archive area and
    some exceptions) this is the function to use!


    ALT-V, V, ALT-K, K : Toggle kludges

    This  will let you  toggle the  display of  kludges (for  this purpose,
    that also  includes SEEN-BY lines). The default (at startup) can be set
    in timEd.cfg, using the 'showkludges' keyword.


    ALT-J, J : Jump to DOS.

    This will let you 'shell' to DOS. Type 'exit' to return to timEd.







                                           timEd v1.30 manual - page 32



    ALT-I, I : Message & Area info

    This will show a  pop-up box with some  info about the current  message
    and the current area.

    This will also show  the 'setting' for a Squish style area: the maximum
    number of  messages to keep  in this  area, the  number of messages  to
    skip when purging and the number of days to keep messages.
    From  within timEd,  you can set  these parameters by  pressing 'C' and
    editing the values to whatever you like.


    '+'   : Go to next area with new mail.

    Pressing '+' will  move you to the  next area that has new  mail. Using
    this you can quickly  go from area to  area, without going through  the
    'Area selection screen'.
    If  timEd cannot find a 'next area  with new mail', it will drop you on
    the 'Area selection screen'.


    '-'   : Go to previous area with new mail.

    This function is similar  to '+', but moves  to the previous area  with
    new mail.

    '*'   : Mark all messages in thread

    This function  will mark all messages  that belong to a  certain thread
    (messages  that  are  linked  with  reply  links,  either  forward   or
    backward).  With one  keystroke,  you can  now mark  all  messages that
    concern a certain topic. 
    After that  you can  perform an  action on  the  marked messages,  like
    writing to file (if you like the subject) or delete (if you don't! :-)


    CTRL-<ENTER> : Place bookmark

    This will  place  a  mark  on the  current  message.  TimEd  saves  the
    position you  are currently at, and  when you later press  <TAB>, timEd
    will go back to the message that you marked.

    With this function,  you can  mark a message,  then move around  within
    the message area  as much as you like,  and go back to  the message you
    started with, by simply pressing <TAB>.

    Whenever you enter an area, a bookmark will automatically be  placed on
    the current (i.e.: the lastread) message.


    <TAB> : Go back to 'bookmarked' message.

    This key  will let you go back  to the message you  earlier marked with
    CTRL-<ENTER>.


                                           timEd v1.30 manual - page 33




    <space>

    By  pressing the  spacebar, you  tag (mark)  the current  message. This
    will be indicated  by the text  '[marked]' at the  right of the  screen
    (in the header).
    You can tag as many messages  as you like in an area (up  to 16000), in
    order to later perform a certain action on these  tagged messages (like
    copying, moving, deleting, writing to file etc). 

    When leaving  an area that  still has  tagged messages, timEd  will ask
    you whether you want  to remove these tags  or preserve them. That  way
    you can  even leave an  area, and come back  later and still  find your
    'tags' there. It does take some memory though  (this might be a concern
    for people in tight memory situations).

    Moving  to the  next/previous marked  message can  be done  by pressing
    ctrl-up and ctrl-down.


    F1 : Help

    This shows a short help-screen.


    F9   : Lookup FROM: NAME of message 

    This will let timEd do a nodelist lookup for the  name that is found in
    the from: field of the  current message. (Note that this also  works in
    echomail areas!).
    If you're  reading a message,  and would  like to  know more about  the
    person that wrote the current  message, you can force timEd to  look in
    the nodelist.
    If timEd finds the name and  pops up a window with the name(s), you can
    press <tab> to get even more details about the node.


    F10  : Lookup origin ADDRESS of message 

    This will  let timEd do a  nodelist lookup for the  origination address
    of  the  current  message.  (Note  that  this  also works  in  echomail
    areas!).
    If you're  reading a message,  and would  like to  know more about  the
    person that wrote the current  message, you can force timEd to  look in
    the nodelist.
    If timEd finds the address and pops up a window with the  node, you can
    press <tab> to get even more details about the node.


    Shift-F10 : Lookup TO: NAME of message 

    This function is  similar to the two functions above,  but will look up
    the name in the to: field.



                                           timEd v1.30 manual - page 34




    ALT-X : Exit timEd

    This  will return you  to the DOS  prompt. If defined  in timEd.cfg, an
    echotoss.log file will be generated at this time.


    CTRL-N : Change current Username.

    Pick one  of the usernames defined (by the NAME keywords) in timEd.cfg.
    The name  you pick will be  used to enter new messages.  It will be the
    default to use until you leave the message area.


    CTRL-A : Change current Address.

    A  function  similar  to  CTRL-N,  but  to  pick  one  of  the  defined
    ADDRESSes.


    F2 : highlight keywords in current message

    This command can highlight lines in the  current message that contain a
    certain keyword. If  you execute this  function, timEd will  ask for  a
    keyword  to  look  for.  All  lines  containing  the  keyword  will  be
    highlighted, and the  part of  the message  containing the first  match
    will be shown, with the first match centered. 


    ALT-H, H : Edit 'Hello' strings

    This will show a pop-up box, where you  can edit the 'hellostring', the
    'rephello' string,  your 'signoff'  and 'origin  line' FOR THE  CURRENT
    AREA ONLY.

    With this you can customize your setup on a per-area basis!

    {+}   The  edited strings can  be saved in  the message  area, so timEd
          can continue  using them at a later time  as well. Whenever timEd
          detects a  'custom setup' file *in  a message area*, it  will use
          the  strings contained  in that  file (*only*  in  *that* message
          area), instead of the defaults defined in timEd.cfg.

          TimEd saves the info in:
          <areaname>.SQT for Squish areas, 
          timed.dat      for *.MSG areas, and
          <areaname>.JTI for JAM areas.
          MSG##.TIM      for Hudson areas (## is the board number).

          The origin is saved in:
          <areaname>.SQO for Squish areas, 
          origin         for *.MSG areas, and
          <areaname>.JTO for JAM areas.
          MSG##.TIM      for Hudson areas (## is the board number).


                                           timEd v1.30 manual - page 35




    ALT-U, U: User menu (Message base maintenance).
    -----------------------------------------------

    This menu  is  totally  user  definable.  It  can  be  defined  in  the
    timkeys.cfg file,  where you can also  redefine the keyboard and create
    macros.
    The timEd package comes with  a sample setup for these menus,  which is
    what is described  here. But please  remember that you can  modify this
    menu to do whatever you like!

    There's one  option that  is present  for all  types of areas:  Execute
    mail processor.

    This command  will execute 'mail.bat'  (or mail.cmd for  OS/2 systems).
    You can use this to spawn your echomail processor, without the need  to
    exit timEd.

    For *.MSG  areas,  the only  other option  is to  renumber. TimEd  will
    renumber the *.MSG area.

    For Squish  areas, there are  five other choices: Pack,  Re-Index, Fix,
    Inspect and UNdelete. This will call SQpack, SQreidx, SQfix  and SQinfo
    respectively  (with the  message area  as parameter),  or undelete  all
    deleted messages in an area. 
    See to it that the programs (SQpack etc) are in your path. 

    For JAM areas,  there is an 'Inspect' option. This  will call a program
    called JAMINFO, with the path + basename of the current area as as  the
    only command line parameter. JAMINFO is a diagnostic utility  that will
    scan JAM areas for errors.

    Some considerations:

    If you have a  Squish area stuffed away in  a directory that has a  dot
    in it (like c:\msgs\sysop.028\sqdfile), SQpack will  get confused (only
    SQpack, not the  other utils) and think you  specified an area.dat file
    on the commandline. This will happen if you would do this:

    SQpack c:\msgs\sysop.028\sqdfile

    .. which is what timEd does. So it won't work for such areas.


    CTRL-F : File request generation.
    ---------------------------------

    When you press CTRL-F,  timEd will try to  find filenames in a  message
    (usually seen in 'file announcement' messages for SDS etc).

    Unlike  other message  editors, timEd  does not  (even try  to) support
    specific 'announcement programs' by recognizing  their 'formats'. There
    are many programs out there,  and modern ones even allow you  to design
    your own format. I  think it's a waste of (programming) effort and code


                                           timEd v1.30 manual - page 36



    (size/speed) to try and support them.
    It  just looks  for strings  that look  like filenames.  This search is
    'extension  driven':  timEd  simply   looks  for  file  extensions   :)
    Currently recognized:

    "arj", "zip", "arc",  "pak", "lzh", "sqz", "com", "exe",  "lha", "zoo",
    "txt", "sdn", "sda", "ans", "jpg", "gif", "tar", "rar", "ico", "bat",
    "uc2", "cmd", "bmp", "wav", "avi"

    When you press  ctrl-f, timEd will try to find  those extensions in the
    message, and a list with  all filenames will pop  up on the right  hand
    side of  your screen.  You can  scroll through  the list, select  files
    with <enter> or  <space>, select all with  '+', unselect all with  '-',
    accept the current  selection with  <ctrl-enter>. Just  as with a  file
    attach.

    Limited  message scrolling  is still  available: press  <ctrl-pgup> and
    <ctrl-pgdn> to move  the message (in case you don't  even recognize the
    filenames, and the descriptions are somewhere else in the message).

    In case timEd missed a  filename, or if you simply want to add  one not
    listed in the message  (like FILES), press <INS>  and type the name  of
    the file. It will be added to the list, already selected.

    If timEd  can't find any files, it'll show a  list with only "FILES" on
    it. You can  also abuse this  to just request  FILES from someone  that
    seems  to have an interesting BBS (but  is not announcing files in that
    message).
    When you press <ctrl-enter> to accept, timEd will  take you to the area
    selection screen, where you can pick an appropriate (netmail) area. 
    It'll then let  you edit the message header (maybe  add crash, or maybe
    do a  lookup on the SysOp  name to pick another high  speed line of the
    same system), and after  you press <enter> it'll write the file request
    message(s) for you (empty, we don't want to write  senseless "automatic
    file request" messages).

    Watch your phone bill! :-)



















                                           timEd v1.30 manual - page 37



    6.3  The List Mode.


    ALT-L, L : List headers, normal format.
    ALT-B, B : List headers, no TO: field, broad subject field.

    This will show you a list of message headers in the current area.

    Use  <cursor up>,  <cursor down>,  <page up>,  <page down>,  <home> and
    <end> to move around through the list.

    Press <ENTER> or <cursor right> to read the highlighted message.

    You can also  press <TAB> to get  a display of the  full header of  the
    currently highlighted message, without leaving the list mode.

    <ESC> will  take you  back to  the current message  before you  pressed
    ALT-L.

    Other keys that are active in 'list mode':

    <Space> : mark highlighted message

    + : mark range of msgs
    - : unmark range of msgs

    This will show  a pop-up box, where you can enter the range of messages
    to be marked.
    ALT+            : mark all messages in this area
    ALT-            : unmark all messages in this area

    ALT-D, D, <del> : kill all marked msgs.
    ALT-M, M        : move all marked msgs to another area.
    ALT-C, C        : copy marked msgs to another area.
    ALT-W, W        : write marked msgs to file.
    ALT-P, P        : print marked messages.
    F1              : Show a short help screen.
    ALT-J, J        : Jump to DOS.
    ALT-S, S        : Switch between 'broad' and normal subject width  (for
                      Usenet messages).


    6.4  TimEd's Find feature.


    ALT-F, F : Find message

    This will show the  Find screen, where you can set the criteria for the
    search. It looks like this:







                                           timEd v1.30 manual - page 38



    ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
    º            timEd - Search configuration manager           º
    ºÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄº
    º timed   (B--SK ---) & netmgr   (B--S- ---)                º
    º wimm    (B--S- ---)                                       º
    º                                                           º
    º                                                           º
    º                                                           º
    º                                                           º
    º                                                           º
    ºÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ[ Search options: ]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄº
    º Areas : All      Messages: New      Direction: Forward    º
    º Action: Read                                              º
    ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼


    There are two main parts in the screen:


    A.    The biggest part  is the part  where the strings that  timEd will
          search  for are  shown.  It consists  of the  strings themselves,
          followed by  the search options  for that  item between  brackets
          [an  example: "timed  (B--SK ---)"].  More than  one item  can be
          combined.

    B.    The smaller part of the screen, at the bottom.  This is where the
          search options that  do not  belong to  one specific search  item
          are shown.  This includes things like  which areas to search, and
          what the direction of the search is.


    Part A, the search strings.
    ---------------------------

    AND and OR searches.

    TimEd is  capable of doing  'AND' searches  (that is:  search for  more
    than one string, and all strings  must be present for the message to be
    consider a 'match' for the search. 
    It can also do 'OR' searches  (search for more than one string,  if any
    of these is present, the message is considered a match).
    AND and OR can  also be combined in a  search (string A _and_ string  B
    must be present, _or_ string C must be present in a message).

    TimEd displays the elements of an 'AND' search on 1 line, like this:

    timed   (B--SK ---) & netmgr   (B--S- ---) 

    This line  holds two elements, separated  by the AND  token ('&'). Both
    elements consist  of  a  string to  search  for ('timed'  and  'netmgr'
    respectively), and the search options for  that item (between brackets,
    let's ignore the search options for now, we'll get to them later).
    The example  above  means:  a message  must  both contain  'timed'  AND
    'netmgr' to be considered a 'match'.


                                           timEd v1.30 manual - page 39




    A  line  can also  contain just  one element,  in  that case  only that
    element has to be present for a match.

    The elements  for an  'OR' search are  shown as  different lines,  like
    this:

    timed   (B--SK ---)
    wimm    (B--S- ---)

    The above  means:  a message  must  contain 'timed',  OR  'wimm' to  be
    considered a match.
     
    Finally, AND  and OR can be combined,  where we get the  screen that we
    saw earlier:

    timed   (B--SK ---) & netmgr   (B--S- ---)                
    wimm    (B--S- ---)                                      

    This  means: a  message must contain  'timed' AND 'netmgr',  OR it must
    contain 'wimm', in order to be considered a match.


    Search options.

    The search options are shown behind the string, for example:

    timed   (B--SK ---)

    Here the search options are B, S and K.
    The following options are possible:

    B - Search for the string in the body of the message.
    F - Search for the string in the from: field of the message.
    T - Search for the string in the to: field of the message.
    S - Search for the string in the subject field of the message.
    K - Search for the string in the kludges of the message.
    W - Search for 'whole words' only (not a part of a word or substring).
    C - Search is case sensitive.
    ! - String must NOT be present.

    Certain letters,  that represent certain  options, will always  show up
    in the same location.  If the 'search body'  option is active, the  'B'
    that  indicates this  will always  be the first  letter. If  you do not
    want  to search  the body,  the first  'letter' of  the search  options
    field will be a minus sign ('-').


    Entering search strings and options. 


    This is  very easy. Just  press <INS> to enter  a new string  to search
    for, or press  <enter> on a certain line that you wish to change. Press
    <del> to delete an existing item.


                                           timEd v1.30 manual - page 40




    For editing, you will be presented with the following pop up menu:


    ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
    º             timEd - Search configuration manager                º
    ºÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄº
    º timed    (B--SK ---) & netmgr   (B--S- ---)                     º
    º wimm     (B--S- ÕÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¸            º
    º                 ³ String:               Options:   ³            º
    º                 ³ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³            º
    º                 ³ timed                  B--SK --- ³            º
    º                 ³ netmgr                 B--S- --- ³            º
    º                 ³                                  ³            º
    º                 ³                                  ³            º
    º                 ÔÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¾            º
    º                                                                 º
    ºÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ[ Search options: ] ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄº
    º Areas : All        Messages: New        Direction: Forward      º
    º Action: Read                                                    º
    ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼

    In this popup window, you can enter the  separate elements of the 'AND'
    search and it's options.  You can enter up to 10  elements for an 'AND'
    search.

    Once again,  you can add  new items with  <INS> and edit  existing ones
    with <enter>. You can  delete an existing item  with <del>. Once  ready
    with editing, press <ESC> to leave this part.

    First,  you can type  in the string  to search for.  The press <enter>,
    and you will get the following pop-up menu to set the search options:


                ÕÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¸
                ³ String:                Options:   ³
                ³ÄÄÄÄÄÕÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¸ÄÄÄ³
                ³ test³   Search body           ³-  ³
                ³     ³   Search from: field    ³   ³
                ³     ³   Search to: field      ³   ³
                ³     ³   Search subject        ³   ³
                ³     ³   Search kludges        ³   ³
                ³     ³ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³   ³
                ³     ³   Whole words only      ³   ³
                ³     ³   Case sensitive search ³   ³
                ³     ³   Should NOT be present ³   ³
                ³     ÔÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¾   ³
                ³                                   ³
                ÔÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¾

    You  can scroll  through  this  menu, and  press  <enter> to  toggle  a
    certain  option 'on' or  'off'. Once ready,  press <esc> to  leave this
    part.



                                           timEd v1.30 manual - page 41




    Part B. Setting the search options.


    From the main screen,  you can press ALT-O  to set the search  options.
    You will be presented with the following menu:


                 ÕÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¸                   
                 ³ Areas     All                       ³
                 ³ Messages  New                       ³
                 ³ Direction Forward                   ³
                 ³ Action    Read                      ³
                 ÔÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¾

    You can scroll through the options, pressing <enter> to  switch between
    the different possibilities.

    To select  an 'Action' you will once again get a pop-up menu, where you
    can choose what you want to do with messages that are found:

    Read              - Read the found message(s).
    Mark              - Mark ('tag') the message(s).
    Delete            - Delete the message(s).
    Write to file     - Write all found messages to a file.
    Copy              - Copy messages to another area.
    Move              - Move the messages to another area.


    {+} Since  it can be  a lot of  work to enter  a bunch of  strings with
    their  options, timEd  offers you  the possibility  to save  the search
    profile of a certain area.
    If you press  ALT-S, timEd  will permanently  save the search  profile.
    Whenever you enter  the Find  function in  that particular area  again,
    timEd  will  read  in  these  options from  disk.  This  way,  you  can
    regularly  do  quite  complex searches  in  certain  areas  without any
    trouble.

    It is also possible to save a default search profile (ALT-D  in search 
    manager).  When  the search  manager  is  first  entered, this  default
    profile will be loaded, unless a profile was saved  for that particular
    area (in which case that particular profile is obviously loaded).
     
    After pressing ALT-R (clear all search strings) in the  search manager,
    timEd will, in  addition to  clearing all  search strings, ask  whether
    the default profile should be reloaded. 

    Once all options are  set, and strings to look for are entered, you can
    start a search by pressing ctrl-<enter>.

    TimEd will then search where you  told him to search, for what you told
    him to search for.  Whenever it finds a match, it will do  with it what
    you told him to do with it :-)
    It will  search headers, kludges or bodies, all areas, the current area


                                           timEd v1.30 manual - page 42



    etc. And mark,  copy, move, delete, write to file or let you read every
    match it finds.

    During the search, you can influence timEd's behaviour:

    <cursor left>:    timEd will search backward, even if  it was currently
                      scanning forward.
    <cursor right>:   timEd will search forward,  even if it was  currently
                      scanning backward.
    '+'               Skip rest  of this area,  and go  on scanning in  the
                      next area (searching forward from now on).
    '-'               Skip rest  of this area,  and go  on scanning in  the
                      previous area (searching backward from now on).
    <esc>             Abort the scanning.

    These keys  can be using during  the actual scanning  process. They can
    also be used when  you are reading a  certain message that timEd  found
    (evidently only  if you set  the 'action' to  'read' and  not something
    else like 'tag').





































                                           timEd v1.30 manual - page 43



    7.  TimEd keyboard reference


    This  section simply lists  all available key  combinations that should
    do something useful in timEd.
    Features marked with {+} are for registered users only.

    In general: F1 will give you some help in several places.


    Area selection screen:
    ----------------------

    ALT-S         : Scan unscanned areas for new mail
    ALT-T         : Scan all areas (even if already scanned) for new mail
    ALT-P {+}     : Personal mailscan in all areas
                    When a message is found:
                    ALT-R : Reply
                    ALT-N : Reply in other area
                    etc.
    <ESC>         : Interrupt scan
    ALT-J         : Jump to OS (Shell)
    ALT-X         : Exit timEd
    <ENTER>       : Enter highlighted area
    <right arrow> : Enter highlighted area

    ALT-L         : Enter area in L)ist mode
    <space>       : Tag area.
    ALT-W         : Write out current 'tagset'.
    ALT-R         : Read in 'tagset' from disk.
    ALT-M         : Change current 'view' on areas (all, new, tagged etc.)
    F1            : Help


    Message reading screen.
    -----------------------

    @  = hold down ALT key.
    ^  = hold down CTRL key.
    Sh = hold down Shift key.


    home          :   Top of message
    end           :   Bottom of msg
    @E, E, ins    :   Enter message
    @R, R         :   Reply to message
    @T, T         :   Reply, fast (don't edit header)
    @N, N         :   Reply in another area
    @O, O         :   Reply  'followup'   (reply  addressed  to   the  same
                      person).
    @C, C         :   Change message
    ^H            :   Change header
    @S, S         :   Change attributes
    @D, D, del    :   Delete message


                                           timEd v1.30 manual - page 44



    @P, P         :   Print msg
    @W, W         :   Write to file
    ^U            :   Unreceive msg (toggle 'received' bit off).
    ^B            :   Bounce reply  (reply, don't quote  but show  original
                      message)
    @M, M         :   Move/Copy/Forward
    space         :   Mark message
    @L, L         :   List headers
    @B, B         :   Broad list
    @H, H         :   Edit 'Hello' info
    @I, I         :   Msg & Area info
    @F, F         :   Find message
    ^A, ^N        :   Change address or change name
    ^F            :   Generate  file  request  from  files  found  in  this
                      message.
    @V, K         :   Toggle display of kludges
    @X            :   Exit timEd
    @U, U         :   User defined menu to launch macros
    @J, J         :   Jump to OS (Shell)
    ^E            :   Run an external program
    '+', '-'      :   Goto Next/previous area with new mail
    ^up/^down     :   Goto Next/previous marked message
    <number>      :   Goto msg # (specific number)
    right, left   :   Next, previous msg
    enter         :   next message
    ^end, ^home   :   Last, first message
    ^right, ^left :   goto reply, original
    @+/@right     :   next reply (JAM)
    esc, @A       :   Quit area
    ^enter        :   Set bookmark
    TAB           :   Return to Bookmark
    F2            ;   Search for a keyword in the current message
    F10           :   Lookup origination address of message in nodelist
    Sh-F10        :   Lookup TO: name in nodelist
    F9            :   Lookup FROM: name in nodelist


    Message list screen.
    --------------------

    <ENTER>, <right> : Goto highlighted msg
    up, down         : Move up, down in list
    page up, down    : Move page up, down in list
    home, end        : First, last msg in area
    <SPACE>          : Toggle mark of highlighted message
    <TAB>            : Show full header of highlighted message
    +                : Mark range of messages
    ALT+             : Mark all messages
    -                : Unmark range of messages
    ALT-             : Unmark all messages
    ALT-D, D, <del>  : Delete marked messages
    ALT-M, M         : Move marked messages
    ALT-C, C         : Copy marked message
    ALT-W, W         : Write marked msgs to file


                                           timEd v1.30 manual - page 45



    ALt-S, S         : Switch between broad/normal list
    ALT-J, J         : Jump to OS (Shell)
    <ESC>            : Return to message reading screen
    F1               : Help


    The 'find feature' screen.
    --------------------------

    ALT-R         : clear all search strings
    ALT-S {+}     : save current search arguments
    ALT-O         : edit generic search options
    ALT-D         : save current profile as default profile
    ctrl <ENTER>  : start search
                    When a match is found:
                    ALT-R : Reply to msg
                    ALT-N : Reply other area
                    etc.
                    Right arrow : search for next match

    While searching or match found:

    <ESC>         :   Interrupt search
    +             :   Skip rest of this area, continue search in next area
    -             :   Skip rest of this  area, continue search in  previous
                      area
    <right>       :   Go on searching forward
    <left>        :   Go on searching backward


    File attach selection.
    ----------------------

    <ENTER>, <SPACE> : Toggle mark on file
    +                : Mark all files
    -                : Unmark all files
    ctrl <ENTER>     : Accept selection
    <ESC>            : Go back to subject editing


    The Internal editor.
    --------------------

    ctrl-<cursor right> : jump word right       ALT-S : Save Message
    ctrl-<cursor left>  : jump word left        ESC   : Abort message
    ctrl-<home>         : Top of message        ALT-J : Jump to OS (Shell)
    ctrl-<end>          : End of message        ALT-I : Import file
    ctrl-<page up>      : Top of screen         ALT-H : Toggle HCR display
    ctrl-<page down>    : Bottom of screen      ALT-Z : delete to end
    ctrl-<del>          : Delete to end of line ALT-L : Mark block border
    ctrl-T              : Delete word right     ALT-U : Unmark block
    ctrl-<backspace>    : Delete word left      ALT-M : Move block
    ctrl-Y              : Erase line            ALT-C : Copy block
    ctrl-U              : Unerase line          ALT-D : Delete block


                                           timEd v1.30 manual - page 46



    F1                  : Help                 F4    : Dupline.
    F2                  : Save msg (timsaf.~!~) ^E    : External program
    ALT-W               : Write text to disk





















































                                           timEd v1.30 manual - page 47



    8.  Effective use of timEd: some features explained


    This chapter explains the use of a number of features that are  present
    in  timEd. These topics  have not  been fully explained  in the earlier
    sections. In order  to make good  use of  these options, reading  these
    sections is required.


    8.1  Creating netmail messages.

    This is  a special section  on the netmail  area. Netmail  is different
    from  echomail in  many ways,  and timEd  behaves differently  when you
    enter netmail.

    While  in the  netmail area,  you  will also  have to  enter a  fidonet
    address, in addition to the name of the recipient.

    Timed  can  help  you  in  several  ways, especially  if  a  Version  7
    nodelist, a  FrontDoor style nodelist or  a fidouser.lst format list is
    present.


    Changing your name and address.
    -------------------------------

    First of all,  when timEd lets you  edit a header,  it will put  you in
    the  To: name  field.  The From:  name  (your name)  and  address (your
    address) will  already be entered,  using the defaults that  are active
    for that area.

    If you  used  CTRL-A  (change address)  or  CTRL-N (change  name)  just
    before entering a message, timEd will use that name/address.

    While editing a  header, however, you  can still edit  that info.  Just
    press  <cursor up> and you will go  to the origination address and name
    fields. There you can  edit them to be whatever you  want, or press TAB
    to pick one of the names/addresses you entered in timEd.cfg.


    Entering a (TO:) name:
    ----------------------

    When you enter  a name (or part of the last name)  in the TO: field and
    press <ENTER>,  timEd will try  to find that  name in the  nodelist and
    when found it will  show a pop-up box  with name(s) and address(es)  it
    found.

    If  you defined  a bunch  of macros  in timEd.cfg,  you can  also press
    <TAB>  at this stage  to get a  pop-up list of all  the macros that are
    defined.  You can then use the cursor  keys to scroll through the list,
    and press <enter> to pick one.

    TimEd will try  to find the exact  string you typed. If it  cannot find


                                           timEd v1.30 manual - page 48



    it,  it will  go to  the nearest match  of what  you typed.  Apart from
    that, timEd will pop up  the nodelist browser, where you can  scroll up
    and down through the nodelist.

    If you want to know  a bit more about a certain  node, just press <tab>
    and  timEd will  show you  a few  extra details  about  that particular
    node.

    If you then press  <ENTER>, timEd will fill in the selected address for
    you.  If you want  none of the  addresses that are  shown, press <ESC>,
    timEd will then let you fill in an address manually.

    This function  works for all  supported formats:  Version 7,  FrontDoor
    nodelist and fidouser.lst.

    TimEd  can only  use one  format at  the same  time. So  you can  use a
    fidouser.lst style list,  or a Frodo  nodelist, or  a V7 nodelist,  but
    not two or all of them at the same time.

    The  above is valid  when entering  *new* netmail.  When replying  to a
    message, or when changing  a message, timEd will see that an address is
    already  present, and  it will  normally only check  if that  node (the
    ADDRESS) exists. If it doesn't, timEd will display "Unknown Address".

    Additionally, a 'fresh' name lookup will be done if you change the  TO:
    name field, or if you press F2 when you're in the TO: name field.

    Entering an address:
    --------------------

    In the TO: field, you can also enter an address  (!). Again, timEd will
    try to locate that address in the nodelist and try to fill  the name in
    for you.

    There are  several shortcuts when  entering an address. When  you don't
    type in a 3D/4D  address, timEd will try  to fill in the missing  parts
    with the default from *your* address.

    An example:

    My address is 2:281/527.
    If I now  enter: 281/1, so with a missing  ZONE number, timEd will fill
    in *my* zone number (that's 2, so the address becomes 2:281/1).

    In this case, I  could even have entered:  1, because then timEd  would
    have filled  in net 281 (my  NET) and zone  2 (my ZONE),  producing the
    wanted address (2:281/1).

    I can also  enter .1, (so missing  zone, net and  node info) and  timEd
    will fill  in my zone  (2), my net  (281) and my node  (527), producing
    2:281/527.1.

    After  'expanding' the  address,  timEd  will try  to  find  it in  the
    nodelist.


                                           timEd v1.30 manual - page 49




    This function only supports the Version 7 and FrontDoor  nodelists. For
    the fidouser.lst lists, this is not possible.
    As  with a name  lookup, timEd will  popup the nodelist  browser so you
    can scroll through the nodelist to search for a certain node.


    Generating a file-request message.
    ----------------------------------


    When you enter a message with the  'file request' attribute, timEd will
    ask if  you want to include any text in the message. If you send a file
    request  message  with  a  body  that  is  empty, it  will  usually  be
    automatically killed on the destination system.
    This  way the  SysOp  of the  destination  system  won't have  to  wade
    through all  these  useless  messages that  consist  of one  line  only
    ('This is an automatic file request').


    Generating a file-attach message.
    ---------------------------------

    When  editing a  header,  you can  press  ALT-A to  attach  files to  a
    message.  TimEd will put  you in the  'Attach file part'  of the screen
    (the  lower left  part of  the screen)  where you  can type  name(s) of
    files to attach. 

    TimEd will then  check whether  the filename(s)  entered exist, and  if
    you entered  a wildcard and  more than one  match is found,  timEd will
    show a list with matching files. You can then 'tag'  the files you want
    to attach.


    A file-attach list may look like this:

    -=-

    Date : 25-ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    From : Ger³ Current filespec: c:\files\c\t*.*                ³
    To   : ROnÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    Subj : c:\files\c\t*.*
    ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
    ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    ³  TABX.C            3 K                                  ³
    ³  TADV2DEM.ARJ     53 K                                  ³
    ³  TC1TUTOR.ARJ    105 K                                  ³
    ³  TC2TUTOR.ARJ     83 K                                  ³
    ³  TDT-2.ZIP       268 K                                  ³
    ³  TDT-3.ZIP       249 K                                  ³
    ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

    -=-



                                           timEd v1.30 manual - page 50



    You  can now  'tag' files  with <ENTER>  or <SPACE>,  move around  with
    <cursor  up> and  <cursor down>  etc, and  accept the  currently tagged
    files with <CTRL-ENTER>.

    You can select all files  in one action by pressing '+',  and un-select
    them all by pressing '-'.

    This process will be repeated for all entered file specifications.


    8.2  AKA matching.

    This option is interesting if you have more than 1 address.  If you set
    the  'AKAmatching' keyword  in timEd.cfg  to 'Yes',  timEd will  try to
    find the most appropriate address to use when writing a message.

    Say,  for  example,   that  you  have  two   addresses:  2:281/527  and
    60:100/112.

    If you write  a messages to  2:500/133, you probably  want to use  your
    2:281/527 address.
    If  you write  a message  to 60:100/1,  you probably  want to  use your
    60:100/112 address.

    In this case, timEd would try to find the address (AKA) that  'matches'
    the destination address best.

    It first  looks for  a matching  zone, and  if more  than one match  is
    found, it'll try to find an address where  both 'zone' and 'net' match.
    If there is  still more than  one match after  that, it will  just take
    the first match.

    This  is  always active  (in  the netmail  area):  when  writing a  new
    message, a reply, or changing a message.

    If timEd  selects  an  address  different from  the  address  that  was
    currently  used  (so  if  anything  changed),  it  will  say  so  ("AKA
    matched") just below the addresses on the screen.

    If you want to force it  at a certain moment, press F2 when  on the TO:
    address field.

    TimEd will  stop  matching the  AKA's,  as  soon as  you  changed  your
    address manually. So if you don't agree with  timEd's AKA matching in a
    certain situation, just manually change  it (while editing the  header,
    you can 'cursor up' to the from: address field) to what you  want it to
    be, and timEd will leave it at that.
    It will not match  AKA's anymore after you  did that. (Of course,  when
    you enter another new message after that, the game will start again :)

    AKA  matching  is only  active  when  you  enter a  new  message.  When
    changing  a message (or  header), AKA matching won't  kick in. You can,
    however, still force AKA matching by pressing F2.



                                           timEd v1.30 manual - page 51



    The  behaviour  of  the  AKA  matching  logic  can  be  influenced  for
    particular  cases  by using  the  AKAFORCE keyword.  See  the timEd.cfg
    keyword reference for more information.


    8.3  TimEd's Carbon Copy (CC:) feature.

    TimEd can also make 'carbon  copies' of netmail messages you write.  It
    can happen that you  want to send an exact copy of a message to someone
    other than the original recipient of the message.
    For  example, when I release a new beta version, I should have to write
    the same netmail message for every beta tester.

    Now say I want to  write the same message to Kasper Kwant, ROn  van der
    Nagel and Frank Troost.
    I would enter the  message, addressing it to  Kasper Kwant, and on  the
    first line of the message I would write:

    cc: ROn van.der.Nagel, Frank Troost

    When the  message is saved, a copy would  be generated for both ROn and
    Frank.

    Rules for the cc: line(s):

    *     It must start on the first line of the message.

    *     If all names  do not fit on  one line, proceed on the  next line,
          and put cc: in front of it again.

    *     You can use a full name  (it will be looked up in the  nodelist),
          a 'macro' (it will be expanded) or an address  (it will be looked
          up in the nodelist).  This is exactly the  same as you can  enter
          at the TO: prompt of a 'normal' netmail message.

          Nodelist lookup  is a bit different,  though: if timEd only finds
          one match for a  certain name, it will  use that to generate  the
          message. If  more than one  match is  found, it  will prompt  you
          with a list.

          In addition, if you  type a full name  which is *not* present  in
          the  nodelist  (or  if  you  don't  want  timEd  to look  in  the
          nodelist, for whatever reason, like speed), you can  also specify
          *both* name and address, separated by a '#', like this:
          Gerard van Essen#2:281/527

          And finally, if  you regularly  send CC:'s to  the same bunch  of
          people,  you can put their names, macro's or addresses in a file,
          one  per line, and  specify that filename  in the  cc: line, like
          this:

          <c:\timed\names.cc

          The '<' is chosen as it looks like 'redirection' in DOS :-)


                                           timEd v1.30 manual - page 52




          The contents of such a file could be:

          -=-
          Kasper Kwant
          ROn van.der.Nagel
          Frank Troost
          pietje#2:281/527.29
          -=-

    Of course, you can  combine all this. A full example  (let's say that I
    have a macro for my HUB, called 'hub'):


    cc: 1, hub, Kasper Kwant, <names.cc
    cc: ROn van.der.Nagel, .23

    ş     '1' will be expanded to myzone:mynet/1 (in this case 2:281/1)
    ş     'Kasper Kwant' will be looked up in the nodelist.
    ş     The file 'names.cc'  will be read and all  persons listed in that
          file will get a copy.
    ş     ROn van.der.Nagel will be looked up in the nodelist.
    ş     2:281/527.23 will get a copy too.


    All  CC:   messages  that  are  generated   by  timEd  will  be  marked
    "kill/sent", so you won't  have lots of copies  of the same message  in
    your netmail area. The attributes  of the original message will be left
    untouched, of course.

    Before writing  out these messages,  timEd will expand the  CC: line(s)
    you entered  into  <name>  (<address>) form,  like:  Gerard  van  Essen
    (2:281/527),  so that  your macro's  and addresses  are converted  into
    something everybody can understand.
    You can prevent  this from happening,  by using the  'CCVERBOSE No'  in
    timEd.cfg. In that  case, timEd  will only  show the  number of  carbon
    copies sent, not the names addresses of the other recipients.

    You  can also hide _one_ of the  recipients from the list of names that
    timEd generates, by placing a '#' in front of it, like this:

          CC: Gerard van Essen, #Secret Lover, My Wife 
     
          In this  case 'Secret  Lover' is  not mentioned  in  the list  of
          other recipients, even though he/she will get a copy. 


    Finally,  you can  also use  HC: instead  of CC:.  In that  case, _all_
    names  will be  hidden from  the  list and  nobody will  see that  this
    concerns a CC: message.






                                           timEd v1.30 manual - page 53



    8.4  TimEd's crossposting feature.


    TimEd  can crosspost  messages. Crossposting  is  a function  that will
    place  a copy  of a  message that  you write  in several  other message
    areas.
    This is  a heavily  abused function  (we didn't  split up FidoNet  into
    different areas for nothing!), but it can be useful in some cases.

    You can make timEd place copies into other areas by writing...

    XC: <areaname>[, <areaname>, <areaname>]

    .. at the top of the message.  A copy of your message will be placed in
    all  areas mentioned behind the XC:, where <areaname> should be a valid
    areatag.

    Example:

    From: Gerard van Essen
    To  : All
    Subj: New timEd release!
    --------------------------------------
    XC: artware, enet.soft, software.028

    Hello All!

    [....]

    This  will cause copies of this message to  be placed in 3 other areas:
    artware, enet.soft, software.028.


    8.5  Message attributes

    After editing a message header, timEd surprises you with  the following
    screen:

    ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    ³ [P]rivate         [O]rphan                   ³
    ³ [C]rash           [Q] ret. receipt re[Q]uest ³
    ³ [A]ttach file     [Y] return receipt         ³
    ³ [R]equest file                               ³
    ³ [K]ill/sent       Extra 'flags':             ³
    ³ [L]ocal                                      ³
    ³ [H]old            [E]rase file when sent     ³
    ³ sca[N]ned         [X] archive file when sent ³
    ³ [F]orward         [I]mmediate                ³
    ³ [S]ent            [T]runcate file when sent  ³
    ³ recei[V]ed        [W] Lock                   ³
    ³ [D]irect          [M] confirm receipt request³
    ³ [U]pdate req.                                ³
    ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ



                                           timEd v1.30 manual - page 54



    This screen  lists  several  message attributes  that  can be  used  to
    influence the handling of your message by  echomail processors, mailers
    etc.

    For echomail areas,  only the following  attributes are usually  useful
    and needed:

    Local    -  This tells other software  that this message was  generated
                locally  (i.e.: on  this  system).  In  order  to  let  the
                echomail processor  send a  message out,  the Local bit  is
                often required.
                It  does *not* mean that the  message shouldn't be sent out
                (so: stay 'local' on that system), on the contrary.
                TimEd automatically sets this bit on messages it creates.
    Sent     -  This indicates the message  is already (actually) sent,  or
                that  the  message was  already processed  by  the echomail
                processor  (that  is:  'scanned  out'  and  placed  into  a
                mailpacket).

    Scanned  -  This  is  practically the  same:  the  message was  already
                scanned  (processed)   by  the  echomail   processor.  Some
                msgbase  format  use  a  'Sent' bit,  others  (Squish)  use
                'scanned' to indicate more or less the same.

    Received -  This indicates that the message was received by  the person
                it  was addressed to. So, if you write a message to 'Pietje
                Puk',  the 'received'  bit  will be  set  after Pietje  Puk
                actually read your message.


    In netmail messages, many other attributes can be used, in addition  to
    the four attributes  mentioned above. These  attributes are not  always
    available,  but  depends  on  support  by  other  software  (like  your
    echomail  processor  and/or  mailer)  and  message  base  format  (some
    formats simply do not support a certain attribute).
    Additionally,   some  programs   implement   the  attributes   somewhat
    differently from other  programs. Especially your  mailer manual  could
    reveal interesting details in this respect.


    Private        -  This  indicates that  it is  a Private  message, that
                      should  only be  read  by the  person  who wrote  the
                      message,  and  the  person  to whom  the  message  is
                      addressed.
                      BBS packages usually honour  this attribute and won't
                      show the message to anyone  else (except the SysOp of
                      the system, who can always see everything :-)

    Crash          -  This indicates that this message  is 'high priority'.
                      It should be  sent out quickly,  often regardless  of
                      schedules  or cost. The  message will  definitely not
                      be routed through another system.




                                           timEd v1.30 manual - page 55



    Attach         -  File attach. This indicates  that a file is  attached
                      to this  message. You can  use this to send  files to
                      the  person the  message  is also  sent to.  When the
                      message is  delivered on the  recipient's system, the
                      file is sent as well. It 'travels with' the message.
                      The name  of the  attached file  should be  placed in
                      the 'Subject' field of the message header.
                      File attach messages can  usually not be routed,  you
                      must deliver it directly.

    Request        -  File request. By  sending a file  request message  to
                      another  system, you  are requesting  (asking for)  a
                      file.  When  your  mailer   (or  echomail  processor)
                      'sees'  that  you  are  sending out  a  file  request
                      message, it will  take certain actions,  and ask  for
                      the file to be delivered.
                      The name  of the file  you want to receive  should be
                      placed in the message header's 'Subject' field.
                      File  requests can  usually not  be routed,  you must
                      directly call the system, that has  the file that you
                      want, to receive it.

    Kill/sent      -  This indicates  that  the message  should be  deleted
                      from the message base, as soon as it is  delivered on
                      the  destination system, or  as soon as  it is packed
                      into an outbound mailbundle.

    Hold           -  Hold for pickup. Hold (don't send  out) this message,
                      until the 'hold' attribute  is removed, or until  the
                      person that the message is addressed to calls  you to
                      pick it up.

    Forward        -  This attribute is  placed on messages  that were  not
                      created  on  your system,  and are  not  destined for
                      your  system  either  (in  other  words:  this  is  a
                      'routed'  message, that  someone else  generated, and
                      that  is  travelling  through  your  system  to  it's
                      destination).

    DIR            -  Direct. This  message must  be delivered  directly at
                      its  destination.  It should  not  be routed  through
                      other systems.

    Update request -  This is similar to a file request, but the  requested
                      file  will only  be sent,  if the  file on  the other
                      system is _newer_ than the copy of the file  that you
                      already have on your system.

    Orphan         -  Indicates that this message is destined  for a system
                      that  does not  appear  in  the  nodelist  (Frontdoor
                      environment usually).





                                           timEd v1.30 manual - page 56



    RRQ            -  Return receipt  request (RRQ). This requests a return
                      message to be  sent by the  mail processing  software
                      of  the  system  the  message  is  destined  for,  to
                      confirm arrival of the message on the system. 

    Return receipt -  A return receipt message that is sent in reply  to an
                      RRQ has this attribute.

    KFS            -  Kill File Sent, Delete  the attached file as soon  as
                      the   message  (and   file)  is   delivered  at   its
                      destination.

    IMM            -  Immediate, high  priority mail.  Do  not route,  send
                      out  immediately,  do  not  care about  schedules  or
                      cost.

    TFS            -  Truncate File when  sent. When the  message (and  the
                      file)  is  sent,  the  file will  be  truncated  (the
                      length of the file will be set to 0 bytes).

    Lock           -  This  message  is  locked.  Do not  pack,  send  out,
                      delete or whatever.

    CFM            -  Confirm Receipt  Request. This asks for  the software
                      of  the destination  system  to send  a  confirmation
                      message, as soon as  the recipient has actually  READ
                      the message.


    Not  all attributes  are  supported by  all programs  and  message base
    formats. Some attributes  can be represented by a setting  a bit in the
    attribute field  in the message  headers, others have to  be 'emulated'
    using a FLAGS kludge. This makes the situation somewhat  unclear. Below
    is a table that tries to help you a bit:






















                                           timEd v1.30 manual - page 57



                       JAM       Squish      Hudson    *.MSG

    Local               x           x        x           x
    Sent                x           x        x           x
    Scanned             -           x        -           -
    Received            x           x        x           x
    Private             x           x        x           x
    Crash               x           x        x           x
    Attach              x           x        x           x
    Request             x           x        F           x
    Kill/sent           x           x        x           x
    Hold                x           x        F           x
    Forward             x           x        -           x
    DIR                 x           F(*)     F           x
    Update request      -           x        -           x
    Orphan              x           x        -           -
    RRQ                 x           x        x           x
    Return receipt      -           x        x           x
    KFS                 x           F        F           F
    IMM                 x           F        F           F
    TFS                 x           F        F           F
    Lock                x           F        F           F
    CFM                 x           x        F           F

    Entries that are marked with 'x' are always available. 

    Entries marked with '-' are not available.

    Entries with 'F'  can only be represented with the  FLAGS kludge, which
    means that  you have to have  'ArcMailAttach Yes' in your configuration
    in order to make them available from within timEd. 
    Otherwise,  it will  allow you  to set  them, but  when the  message is
    written to disk, timEd will not add a  FLAGS kludge, causing them to be
    lost.
    (*) The  DIRECT attribute is  a strange thing. Squishmail  (the tosser,
    that is) can 'simulate' that attribute by setting BOTH the  'crash' and
    'hold' bits. Squishmail will also NOT recognize the FLAGS kludge.

    On the other  hand, some other  programs DO  support the FLAGS  kludge,
    and  will certainly not  know what to  do when both  'crash' and 'hold'
    attributes are set.

    In  environments  where  Squish  takes  care  of  the  netmail  (Squish
    combined  with Binkley),  you  need to  set ArcMailAttach  to  'No' and
    timEd will use the 'simulated' DIRECT bit.
    If  you  set 'ArcMailAttach'  to Yes,  timEd will  write out  the FLAGS
    kludge (all other cases, even Squishmail if combined with FrontDoor).

    Confusing? Yeah. But I didn't invent it! :-)







                                           timEd v1.30 manual - page 58



    8.6  Using the internal editor

    If  you put 'Editor  Internal' in  timEd.cfg, you will  be able  to use
    timEd's internal editor. This  section describes the main  commands you
    can use within the editor.


    First some general information:

    *     The editor  automatically wraps  lines. You  don't have to  press
          <ENTER> at  the end of a  line, in order to go  to the next line.
          Just keep  on typing, timEd  will place you  at the beginning  of
          the  next line  automatically, together  with  the word  you were
          typing (if it doesn't fit on the previous line).

    *     The editor  also actively  rewraps paragraphs if  you insert text
          in  the middle,  or  delete  text  somewhere. TimEd  will  rewrap
          immediately, so you see the result of your actions at once.

    *     The  editor  is 'quotesmart':  it know  the difference  between a
          line that is  a quote, and a  normal line. It does  not only show
          quoted  lines  in  a  different  colour,  but  also  handles them
          differently.

          For example: when  you press  <ENTER> in the  middle of a  quoted
          line, timEd will move  the rest of the  line down, but will  also
          place a quotestring in front of it!

          Similarly, if you delete  text in a quoted line, and  press <del>
          at  the end of that line, timEd will  try to append the next line
          to  the current  line. It  will, however,  not append  the entire
          line, but will first strip the quotestring at the beginning!

          All  this may  sound a  bit difficult,  but it  is meant  to make
          editing quotes just  as easy as editing  quoted lines. It may  be
          difficult  to explain, but when you use  it, you will see that it
          feels 'natural'! Try it!

    First of all: help is always available by pressing the F1 key!

    The editor is mainly a standard editor: you  can just type the text you
    want to enter, use  the cursor keys (and page  up / page down) to  move
    around, and  the  <INSERT>  key  to switch  between  the  'Insert'  and
    'TypeOver' modes.

    There are also some other 'movement' commands:

    ctrl-<cursor left>  :   jump one word left
    ctrl-<cursor right> :   jump one word right

    ctrl-<home>         :   Go to the top of the entire message         
    ctrl-<end>          :   Go to the end of the entire message         
    ctrl-<page up>      :   Go to the top of the screen          
    ctrl-<page down>    :   Go to the bottom of the screen 


                                           timEd v1.30 manual - page 59




    Some commands to delete text:

    ctrl-T              :   Delete the word to the right of the cursor.
    ctrl-<backspace>    :   Delete the word to the left of the cursor.

    ctrl-Y              :   Erase the entire line.
    ctrl-U              :   Unerase a line that was erased with CTRL-Y.
    ctrl-<del>          :   Delete from the cursor to the end of the line.

    Some block commands:

    ALT-L : Mark block border.

    Use  this at the  beginning and the  end of a block.  You can only mark
    entire lines, not a part of a line. The block functions will also  work
    if you only mark one line.

    ALT-U : Unmark block.

    This removes the mark you defined earlier with ALT-L.

    ALT-M : Move block.

    Move a block to another position. The block is inserted below the  line
    the cursor is currently on.

    ALT-C : Copy block 

    Copy a block to  another position. The block is inserted below the line
    the cursor is currently on.

    ALT-D : Delete block 

    This will delete all the  marked lines. They can NOT be  undeleted with
    CTRL-U!

    ALT-Z : Zap quoted lines until end of text.

    This will delete  the quoted and empty lines below  the cursor, until a
    non-quoted, not empty line is found. 
    This is useful when  editing a quoted message. With this, you can 'zap'
    all quotes  until the end of the message, without deleting your signoff
    and origin lines.


    Some general commands:

    F4 : duplicate current line. An exact copy of  the current line will be
    inserted on the line below the current line.

    ALT-H : Toggle HCR display (HCR == Hard Carriage Return).

    The editor has an option to display the 'hard returns' in the text. 


                                           timEd v1.30 manual - page 60




    In fidonet, 'hard returns' should only be at the end of a PARAGRAPH. 

    The internal editor will rewrap entire paragraphs, which means  it will
    wrap until  a line with a  'hard return' is  encountered. Other fidonet
    systems (receivers of your message) will do the same.

    The HCR display gives you  total control over the location of  any hard
    returns. If  you don't want  a certain part  of the message  to ever be
    rewrapped, you  can place 'hard  returns' at several places.  TimEd can
    show you exactly where the HCR's are located!

    ALT-J : Shell to OS 

    This will give you a shell to the operating system (DOS or OS/2).


    CTRL-E: Run external program

    With  this command,  you can run  an external program.  See the special
    section  on   running  external  programs  in   this  manual  for  more
    information!


    ALT-I : Import file 

    This  option will let  you import a  file from disk.  A pop-up box will
    ask you for the name of the file to import. 

    You can enter a  wildcard here (like c:\doc\*.*). If more than one file
    is found, timEd will display a selection list where you can choose  the
    file you want to import (by pressing <ENTER>).

    If  you enter  a directory  name (like  c:\msgs), timEd  will pop  up a
    directory listing of that directory (in this case: c:\msgs\*.*). 

    The directory lister  sorts the files found in  a directory, and allows
    you to move into other directories.


    ALT-E : Edit header.

    This will  let you edit  the header  of the  message you are  currently
    working on. That way you  can still change the attributes, or  attach a
    file or  something like that, even  if you already started  editing the
    body!


    ALT-S : Save Message 

    This will end the  editing session. The text  you entered will be  used
    to generate a message.




                                           timEd v1.30 manual - page 61



    F10   : Save message, go through 'EditSaveMenu' first.

    This  will  end  the  editing  session, but  will  first  show  you the
    EditSaveMenu,  where you  can choose  to do  spellchecking, encrypting,
    and so on.

    ESC   : Abort message 

    This  will end the editing session. The  text you entered will be lost,
    and no message will be generated. It is possible to get a  confirmation
    first, look at the 'Confirm_Edit_Exit' keyword for more info.

    ALT-W - write entire text to a file. 

    This writes the entire text to a file. You will be prompted to enter  a
    filename.

    CTRL-W - write block to file. 

    This writes the currently marked block to a  file. You will be prompted
    to enter a filename.
     
    There's also a sample macro included that uses this command: 
     
    F2 - write entire text to a file called TIMSAF.~!~



    8.7  Using an external editor

    Many  people are very  attached to a  certain editor. They  want to use
    that editor,  and that editor only. TimEd will let a user do just that.

    When the  time has come to edit the  message text, timEd will create an
    ASCII file on disk,  and spawn an external  program to edit that  text.
    The user can now edit the message text. When  ready, the text should be
    saved to disk. 
    After leaving the external editor, timEd will regain control,  read the
    (edited) message text back in, and create a message from it.

    This sounds to  good to be  true, and unfortunately  it is not  without
    problems..

    Using an external editor has one big problem:  most editors put a 'hard
    return' at the  end of *every*  line, not just  on the lines where  the
    user actually pressed <ENTER>.

    In  Fidonet, 'hard  returns' should  only be  present at  the end  of a
    *paragraph*.  The actual  formatting (word  wrapping) of  the paragraph
    should  be done by the message reader,  according to the current screen
    size  (usually, the  screen has  lines of  80 characters,  but that  is
    certainly not  always the case! Think  about older terminals, about 132
    character mode, about proportional fonts [OS/2, Windows]).



                                           timEd v1.30 manual - page 62



    Placing a  'hard return' at  the end  of every  line (at position  80),
    would  only use  the first  80  characters of  a line,  even  on a  132
    character display! Unfortunately,  there are  quite a  lot of  programs
    that leave a hard  return at the end  of every line anyway.  Especially
    QWK readers are  notorious for that.  It's quite a  lot easier for  the
    programmer though. 

    Many people even think that stripping 'hard returns' is  wrong, because
    their  text may not  be formatted  the way  they wanted.  Remember that
    _not_ stripping them  is even  worse! How do  you think your  formatted
    text looks on a terminal with 80 or 132 columns?

    So,  timEd has to  strip 'hard returns'.  It tries it's  very best, but
    sometimes fails miserably. But you can help timEd to keep  your message
    'tidy', read on!

    One  of the 'rules' is, that timEd will  strip the 'hard return', if it
    is  found at  a position  *after* <length  of line>  - 20  (so on  a 80
    character display, it  would be  60). 'Hard  returns' found after  that
    position are  supposed to be the result  of the 'word wrapping' feature
    of an editor and are stripped.

    There is an exception  to this: if the  *next* line is starting with  a
    <space>  or one  of the  following characters:  *-,. the  'hard return'
    will not be  stripped. Usually  there is  some formatted  text (in  the
    case  of '*' and '-' probably  a list, in the case of  a space it could
    also  be a 'listing' of some code  for a programming language), so that
    will be left untouched.

    There is  a way to  prevent timEd from 'intelligently'  stripping 'hard
    returns'.  Usually it does  what you  want, but  formatted text  can be
    awfully messed  up, when the  individual lines exceed 60  characters in
    length (for  example Binkley logfiles :-).  TimEd will then strip 'hard
    returns' making a mess of your nicely formatted logfile or C-listing.

    There are 2 methods to prevent timEd from stripping 'hard returns':

    - Forcing a 'hard return' for one line:

          Put a ~  at the  end of a  line. The  ~ will  be replaced with  a
          'hard return'.

    - Forcing 'hard returns' for a sequence of lines:

          Put  ~~ at  the  beginning of  a  line (rest  of  line should  be
          empty!) to start, and another one at the end.
          All of the text between those two lines will  get a 'hard return'
          at the end  of the line. The lines  with the ~~ at  the beginning
          will be stripped from the text.

    Examples:

    This line will certainly have a 'hard return' added to it.~



                                           timEd v1.30 manual - page 63



    Now look at my nicely formatted logfile:

    -=-
    ~~
    = 23 Sep 03:23:35 MAX  DL-Z C:\Files\Tekst\Contrast.Lzh
    = 23 Sep 03:23:35 MAX  Free DL: reimbursed 227 seconds
    = 23 Sep 03:23:35 MAX  Free DL: reimbursed 51 Kb
    + 23 Sep 03:23:59 MAX  Jack Brons off-line. Calls=16, Len=6
    : 23 Sep 03:24:00 MAX  End, v2.01 (5)

    ~~
    -=-

    Keep this in mind,  and experiment a bit.  Just type some messages  and
    check the results after timEd read it back in.


    8.8  Reading messages 'gated' from Usenet/Internet 

    Some  consideration  was also  given  to people  reading  messages that
    originally came from Usenet/Internet 'newsgroups'.


    FSC-0035
    ========

    TimEd  supports the  'Replyto' and 'ReplyAddr'  kludges as  outlined in
    FSC-0035  (Fidonet  Technical Specification  -  a proposal,  actually).
    This is  used  for  netmail replies.  If  you read  gated  Use/Internet
    messages that have this kludge (Fredgate can generate them),  this will
    automatically  address the  netmail reply to  your UUCP gate  and put a
    TO: line at the top of your message.


    'Broad' message List display.
    =============================

    For  Use/Internet  newsgroups the  standard L)ist  display is  far from
    optimal: there, every message  has 'All' in the TO: field (put there by
    the UUCP <-> Fido gate).

    TimEd  has two L)ist modes, a 'normal'  one, and a 'broad subject line'
    one (you get it with  Alt-B when reading a message). The latter has (as
    one would expect)  a much broader Subject  displayed, the TO:  field is
    entirely zapped in that mode.

    While in the  L)ist mode, one  can switch between  the two styles  with
    ALT-S (from S)witch..)








                                           timEd v1.30 manual - page 64



    Usenetmacros
    ============

    TimEd has a special type of macro's available for message that need  to
    be  gated to  Internet.  See  the  'Usenetmacro'  keyword  for  further
    reference.


    Transparent use of internet address.
    ====================================

    When properly configured,  timEd will  let the  user enter an  internet
    address in the  TO: field  just as easy  as a  username. Simply put  an
    internet address  (like art@cnh.wlink.nl)  in the TO:  field and  timEd
    will automatically take care of the rest!

    In  order  for  this to  work,  two  keywords  need  to be  defined  in
    timEd.cfg:

    UucpAddress <address> : Address of your Internet gate.
    UucpName <name>       : Name  used  for  the  gate (usually  'UUCP'  or
                            'Postmaster').

    TimEd  will  now  detect  internet  addresses  in  the  TO:  field  and
    automatically address the  message to the gate, and put  a TO: field in
    the message  body. You can enter  a string longer than  36 chars in the
    header as well, timEd will handle it. 
     
    Reading is  also improved  with these  keywords: the  TO: field in  the
    message body will also be  detected and the Internet address will  show
    up in the header instead of the body. 
     
    The idea  is to never see a TO: field in the body anymore. The internet
    addresses should always show up in the header and can be edited  there,
    just like a normal name or address.

    Underneath, TimEd will write  the messages to disk  with a TO: line  in
    the body. The user  is not bothered anymore  with the nasty details  of
    addressing messages  to  the  internet gate  and  will never  even  see
    anymore that this happens.
    Entering internet mail is then just as easy as entering FidoNet mail.


    NewsAreas and MailAreas
    =======================

    There are two special types of areas:

    NewsArea:   In such areas,  the TO: line is not shown (it doesn't exist
                in news), the 'Organization'  is shown instead (if  found).
                No Origins are  added/required, and timEd  doesn't use  the
                initials  of  the message  writer when  quoting,  just '>',
                which seems to be more standard on the Internet. 
     


                                           timEd v1.30 manual - page 65



    MailArea:   The  type   'MailArea'  (for  Internet   'mail')  is   also
                recognized, but I'm  not sure how  to implement it  exactly
                yet.  You may try it, but  until some special programs that
                handle this  are made, it  may be  better to  simply use  a
                NetArea  for  this purpose  and  rely on  timEd's  built in
                capabilities to hide TO: lines etc.


    8.9  Running external programs


    TimEd has  the  ability  to  run external  programs  from  the  message
    reading screen. The function  name of the function  to use for this  is
    READrunexternal.  When executed,  timEd will  ask for  two  things: the
    name of the program to run, and the  command line parameters to use for
    that program. 
     
    The message  area will then  be closed, the  external program  run, and
    the  area opened  again. This  offers the  opportunity to  run programs
    that perform  actions on the message  area (like a maintenance program)
    that need exclusive access. 
    After the  external program ended,  timEd will  wait for a  keypress so
    you can see what happened. 
     
    When  entering command line  parameters, you can  use several variables
    that  will be  filled in  by timEd  according to  the current  area and
    message. These variables are always between square brackets: '[]'.  

    The following variables can be used: 
     
    from      - Name in the 'from' field of current message. 
    to        -             'to' 
    subject   -             'subject' 
    orig      - Origination address of current message (like 2:281/527).
    dest      - Destination address of current message (like 2:281/527).
    areatype  - Type  of current  area  (NETMAIL,  ECHOMAIL,  LOCAL,  NEWS,
                MAIL).
    areatag   - Official areatag of current area. 
    format    - Storage format (SQUISH, HMB, JAM, SDM). 
    areadir   - Directory or  base name of  current area,  board number  if
                Hudson. 
    msgno     - Message  number of  current message  ('relative' number for
                Squish and Hudson) 
    realmsgno - Real message number, for  Squish (UMSGID) and Hudson  (real
                number  in Hudson  base,  not the  relative  number in  the
                area).  For JAM and *.MSG, this is always equal to msgno.
    file      - Name of the current file to use. Not  in use when reading a
                message  (it's for EXESIGN, EXECRYPT and EXESPELL described
                below). 
    newfile   - Name  of a  new file  to use  (this is  also  for EXECRYPT,
                EXESIGN and EXESPELL). 
    attach    - Files attached to this message (list of files). 
    request   - Files requested in  this message (list of files            
                [!passwords]). 


                                           timEd v1.30 manual - page 66



     
    So the command line  parameters "scan -s[areatag]" could be  translated
    to  "scan -sARTWARE",  and  "zfax 4  [attach]" could  be  translated to
    'zfax 4 c:\xenia\faxin\xenia001.fax' and so on. 

    If you  want to add  a literal '[', you  should put two of  them in the
    string: '[[in brackets!]'.

    The ability  to run external  programs with these variables  allows you
    to do extremely powerful things with timEd. 
    You can run  message base maintenance  programs, start mail  processing
    software, launch FAX viewers and so on.

    Combined with the  macro capabilities that  timEd offers, these  things
    can  be done  with  only  one  keypress!  And combined  with  the  user
    definable menus (see section concerning keyboard  redefinition) you may
    even add these capabilities to a user friendly menu!

    Combined with  special commands that  are also available,  like writing
    messages (or only  message bodies) to  a file, and commands  to replace
    the  body  of  a   message  with  a  textfile  you   can  even  perform
    encryption/decryption with  a program like PGP (Pretty Good Privacy) or
    run a spellchecker on a  message and replace the body with  the checked
    file.

    These  are popular  examples  to  show  what  can be  done  with  these
    commands. However, for the topics mentioned above timEd has  more added
    capabilities  to  make support  for encryption  and  spellchecking even
    easier.

    It is also possible to run external programs from the internal  editor,
    using  the  command  EDITrunexternal.  It functions  exactly  like  the
    READrunexternal function.



    8.10  Interfacing timEd with PGP and spellcheckers.

    TimEd  has several 'hooks' that allow you  to run spellcheckers and PGP
    (encryption) programs.
    In order to use these hooks,  all you have to do is add a  few items to
    timEd.cfg,  to  specify  the  exact  programs  you  want  to   use  for
    encryption and spellchecking.

    You can use the following keywords:

      ExeSpell     <progname> <parms> : Spellchecking command line
      SpellCheck_Default <Yes|No>     : Whether  spellchecking  is  default
                                        for a new message.
      ExeCrypt     <progname> <parms> : Encryption command line
      ExeSign      <progname> <parms> : Signing command line
      ExeCryptSign <progname> <parms> : Encryption + Signing command line




                                           timEd v1.30 manual - page 67



    The  parameters  can  contain   the  'variables'  enclosed  in   square
    brackets,  that can  also be  used when  executing an  external program
    with READrunexternal. This time, [file] does  contain something useful:
    the  name  of the  file  the  message will  be  written  to before  the
    external  program  is  executed.   With  these  functions,  msgno   and
    realmsgno  are unusable  -  the message  does  not have  a  number yet,
    because it is not yet written when these commands are executed.

    The logic of  the 'encrypt',  'sign' and  'spellcheck' commands are  as
    follows. 

    TimEd  writes out  the  body of  the message  to  a file  (the  name is
    available  for  the EXESPELL,  EXECRYPT  and  EXESIGN  commands as  the
    variable [file]).

    It then  runs  the  external  program as  indicated  by  the  ExeSpell,
    ExeSign, ExeSpellSign or ExeCrypt keywords in timEd.cfg.

    After that  it will check  whether a  new file  in the timEd  directory
    (available as the  variable [newfile])  is present.  If it is  present,
    and  the date/time  is the  same or  newer than  the date/time  for the
    original  file, this new  file will be  used as the body.  If it is not
    available, or older  than the original file, the original  file will be
    used. 
    The  file that  is  found as  a result,  is used  as the  body  for the
    message. If you  ran a spellchecker,  the checked/corrected version  of
    the text  will  be  used.  If  you  ran  and  encryption  program,  the
    encrypted (or signed) version of the text will be used.

    In practise, this means that you can make a  spellchecker or encryption
    program modify  the original file (variable  [file]), _or_ you can have
    it write it's output to another file (variable [newfile]). 


    Examples, that work here, to get you underway:

    execrypt     d:\pgp\pgp -eta [file] -o [newfile]
    exesign      d:\pgp\pgp -sta [file] -o [newfile]
    execryptsign d:\pgp\pgp -eas [file] -o [newfile]


    These actions can be triggered in several ways:

    -     By  'checking' the  correct  box while  editing the  header of  a
          message.  While  editing  a  header,  press ALT-S  to  go  to the
          'special' section of  the screen (the lower rightmost  part). You
          can move  around with the cursor keys  and press <enter> to check
          one or more of the options.

    -     From the  internal  editor:  by  executing  the  'EDITeditheader'
          function  (default  keybinding: ALT-E).  You  can  then edit  the
          header  and set  the option  using the  message described  in the
          first option.



                                           timEd v1.30 manual - page 68



    -     By  exiting the  internal editor  with the  'EDITsavemenu' option
          (default  keybinding: F10),  or when exiting  either the internal
          or external editor with the option EditSaveMenu in timEd.cfg  set
          to 'Yes'.
          In  this case,  a small  menu with  several options  will appear,
          where  you can  move  around and  set  the options  'SpellCheck',
          'Encrypt' and 'Sign'.


    Of course, in order  to use PGP (Pretty  Good Privacy), you will  first
    have to configure it and get used to how it works. Please  read the PGP
    documentation first before using it. The author of PGP  recommends that
    you do that, and all I can do is repeating that advice.

    Of course,  encrypting  is one  thing,  but you  also want  to  DEcrypt
    messages  again! In  order to  do  that, you  will have  to make  a few
    macros, that write  out the body  of the  message, execute an  external
    program, and use the resulting unencrypted file as the body.

    In  order to  do that,  you  need to  use a  few  functions that  timEd
    offers. A few interesting commands:

    Extra commands to write out messages to a file:

    READwritebody     -     write the body (so no header) out to file
    READwriterealbody -     write the  real body (without  tearline/origin)
                            to file.
    READwriteheader   -     write only the header to a file.

    These work  just  like  the standard  'write  to file'  command.  TimEd
    prompts  for  a filename  to  write to  first. These  commands  are, by
    default, not assigned to any key (-combination).

    Commands to replace the body of a message with the contents of a file:

    READfiltermsg      -    zap the entire message body  and replace with a
                            file.
    READfilterrealbody -    zap the real body  of a message (so  this saves
                            the tearline  / origin) and  replace with  text
                            from a file.
    READfiltermemory   -    This        functions        exactly       like
                            'READfilterrealbody' but it will only replace  
                            the message body  in memory. You can  then view
                            this new  body, and reply to it,  forward it or
                            write it to  file. Whenever  you move off  that
                            message, this new body will be lost. So moving 
                            one message  forward and  one message  backward
                            will make the 'old' body re-appear again.
                            Also keep in  mind, that several actions  (like
                            'move' and 'copy' for example) actually re-read
                            the  original message body  from disk for their
                            work. So using 'copy' for a message with a body
                            replaced using 'READfiltermemory' will actually
                            copy the _original_ body!


                                           timEd v1.30 manual - page 69





    Combining  some  of  these  special   functions  with  READrunexternal,
    bundled in  a few macros,  you can  easily add  decryption commands  to
    timEd. 
    For example, you might add  the samples below to your timkeys.cfg file,
    in the section [menu].  They will then show up as two  new options when
    the user menu (function READmaintenance, default keybinding ALT-U).


    MenuAll     "~D~ecrypt PGP mail" READfiledelete  "c:\timed\timed.msg"
                enter READfiledelete "c:\timed\timed.msn" enter
                READwriterealbody "c:\timed\timed.msg" enter
                READrunexternal "d:\pgp\pgp" enter "c:\timed\timed.msg -o
                c:\timed\timed.msn" enter enter READfiltermemory
                "c:\timed\timed.msn" enter

    MenuAll     "~C~hange to unencrypted" READfiledelete
                "c:\timed\timed.msg" enter READfiledelete
                "c:\timed\timed.msn" enter READwriterealbody
                "c:\timed\timed.msg" enter READrunexternal  "d:\pgp\pgp"
                enter "c:\timed\timed.msg -o  c:\timed\timed.msn" enter
                enter READfilterrealbody "c:\timed\timed.msn" enter

    Due to  formatting, the commands  above are spread over  several lines.
    In your timkeys.cfg file,  however, everything following the  'MenuAll'
    should be on only one line!

    The first macro will  decrypt the message to  memory only. You can  see
    the  decrypted result, but  the message will not  be saved in decrypted
    state.  When  you move  off  the message,  the decrypted  text  is lost
    again.

    The  second macro  actually  decrypts the  text, but  also  changes the
    message on disk into it's decrypted counterpart.

    Remember that these are just examples, and could be used as a  starting
    point for your own version of the macros!

    Spellchecking
    -------------

    Running  a spellchecker is very  similar to running  PGP. They are both
    programs that 'filter' the original text.

    However,  some spellcheckers  seem to  have big  problems with  the way
    messages  are  sent through  FidoNet. In  FidoNet, only  PARAGRAPHS are
    separated  by a 'hard return', not all  lines. This leads to lines that
    can be  hundreds of characters  long. Spellcheckers  that are  properly
    written do  not  have  a  problem with  this,  but  there  are  several
    programs out there that either crash or completely mess up your text. 
    Programs that seem to work  properly are DoSpell and AMSpell. Both  are
    available from the author's system (2:281/527).



                                           timEd v1.30 manual - page 70



    8.11  Packing the search database

     
    Included in  the  timEd  package  is FDBPACK(P).EXE.  This  is  a  tiny
    program that  must be executed from  the timEd home  directory. It will
    remove the 'slack' from the database that timEd's 'Find  manager' keeps
    to store the search profiles.

    If you  use the find  feature a lot,  this utility will  bring down the
    size of the FDB.DAT file that the search manager uses. 


    8.12  Text style nodelist flags with the V7 nodelist


    The V7 nodelist doesn't, by  default, store a lot of  information about
    the  'flags' that a node has in the  nodelist. Flags like V32, VFC, V34
    or NEC are not stored by default. 
     
    However,  most  nodelist compilers  give  the user  the  opportunity to
    store some  user-defined  values  in  the V7  nodelist,  based  on  the
    presence of certain flags in the raw (St. Louis) nodelist. 
     
    Two values  can usually be  stored: a value  for the 'ModemType'  and a
    value for the 'NodeFlags'. 
     
    ModemType. 
    ========== 
     
    The  modemtype value is  (obviously) a value  to indicate what  kind of
    modem a certain  node has. In  the nodelist, several flags  are present
    to  indicate  the type  of modem  the node  uses  ('V32B' for  a V32bis
    modem, 'V34'  for  a V34  modem,  'V42b' if  the  modem support  V42bis
    compression, etc). 

    The 'modemtype' value in  the V7 nodelist is  one byte (8 bits).  There
    are two ways to use this byte: 
     
    1 -   Each bit independently, where each bit signifies a certain  flag.
          When the bit it set  (a value of 1 for that  bit), a certain flag
          in the nodelist is present. When the bit is  not set, the flag is
          not present. Because there  are 8 bits in  a byte, you can  store
          the presence/absence of 8 different flags this way.  
          The good thing is, that several flags can be  present at the same
          time:  three  different  bits  may  be  set  at  the  same  time,
          indicating that three different flags are present. 
     
    2 -   All bits taken together  as one value  (byte). By looking at  the
          entire byte,  you can have 256  different values (0  - 255). When
          the byte has a certain  value, a certain flag in the  nodelist is
          set. 
          The advantage  of this  is, that  you could  represent up to  255
          different flags.  The disadvantage is that  you can only have one
          flag per node. 


                                           timEd v1.30 manual - page 71



     
    Most (if not  all) V7 nodelist  compilers support method  1. It is  the
    'old'  method that has  been used  by Binkley in  the past.  Some newer
    compilers (also) support method 2. 
     
    TimEd  now has the ability to convert  a certain value in the ModemType
    field of a V7  nodelist back into a nodelist flag (like  'V34'). If you
    do a nodelist lookup, and press <tab> for  details, these flags will be
    shown. 
     
    Two keywords are possible, to support both methods: 
     
    V7ModemTypeBit - to support method 1. 
    ------------------------------------- 
     
    Syntax:  V7ModemTypeBit <bit value> <flag> 
    Example: V7ModemTypeBit 64 V34 
     
    The 'bit value' must be a power of  2 (i.e.: 1, 2, 4, 8, 16, 32,  64 or
    128).
    For each of those values, one of the bits will  be set (to indicate one
    of the flags in the nodelist  is present). The above example  indicates
    that  if the  bit representing  the value  64 is  set, the  V34 flag is
    present. 
     
    Another example: V7ModemTypeBit 4 VFC 
     
    This would indicate, that if the bit representing the value 4 would  be
    set, that node has the 'VFC' flag in the nodelist. 
     
    This is the same as the 'BitType TypeDef' statements that the  FastList
    nodelist compiler (made by Alberto Pasquale) uses.  
    It is also the  same as the 'ModemType' values that the FastV7 nodelist
    compiler (made by Marius Ellen) uses. 
     
    V7ModemTypeValue - to support method 2. 
    --------------------------------------- 
     
    Syntax:  V7ModemTypeValue <byte value> <flag> 
    Example: V7ModemTypeValue 13 V34 
     
    This would indicate, that  if the 'ModemType' field  is set to 13,  the
    node has the 'V34' flag in the nodelist. 

    Along the same lines:
     
    Example: V7ModemTypeValue 9 VFC 
     
    This would indicate that if  the modemtype field is set to 9,  the node
    has the VFC flag in the nodelist. 
     
    These values are the same as Fastlist's 'normal' TypeDef statements. 
     



                                           timEd v1.30 manual - page 72


    NodeFlags
    ==========

    The NodeFlags  value  in the  V7  nodelist is  a 16  bit  value. It  is
    present  to indicate  the nodelist  flags  a node  has (and  this could
    include flags to indicate what type of modem is present...).

    The different  bits  in the  NodeFlags field  indicate different  flags
    (just like method  1 for the  ModemType value).  Some  of the bits  are
    pre-defined  (like  a  certain bit  to  indicate  CM  (Continuous mail)
    status, and a bit to indicate a node is a HUB, etc).

    TimEd can now convert  these bit values back  to flags, using a  method
    very similar to method 1 of the ModemType field. 

    The keyword to use is V7NodeFlagBit. 
     
    Syntax:  V7NodeFlagBit <bit value> <flag> 
    Example: V7NodeFlagBit   16  CM 
     
    This  indicates, that  if  the  bit that  represents  the  value 16  is
    present, the CM flag is present for that node. 

    Another example: 

    V7NodeFlagBit   1  HUB

    If  the bit representing the value 1 is present,  a node is a HUB. Both
    of  the  above  examples  are  predefined  values.  But  some  nodelist
    compilers allow a user to define a few bits themselves.

    The  FastV7 compiler  uses the  keyword 'NodeFlag'  to allow  this. The
    value of that keyword are the same as the values timEd uses.

    Because the  ModemType field consists of  16 bits, and the  values have
    to be a power of 2 again, the possible values are:  1, 2, 4, 8, 16, 32,
    64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768.

    Predefined values (in the nodelist, not in timEd!) are:

    V7NodeFlagBit 1     HUB
    V7NodeFlagBit 2     HOST
    V7NodeFlagBit 4     REGION
    V7NodeFlagBit 8     ZONE
    V7NodeFlagBit 16    CM
    V7NodeFlagBit 4096  POINT
    V7NodeFlagBit 32678 REDIR

    To get the  same functionality as previous versions  of timEd, you have
    to add:

    V7NodeFlagBit 16    CM





                                           timEd v1.30 manual - page 73



    9.  Character translation


    Starting with version 1.10, timEd also supports character translation.


    9.1  The problem addressed.

    The FidoNet standards  (FTS-0001) limit the use of 'special' characters
    in  messages sent  through FidoNet.  Officially, only  'standard ASCII'
    characters are allowed to  be sent. The main  reason for this is,  that
    FidoNet   tries   to   connect   many    different   machine   hardware
    architectures. A  message written on  one architecture,  needs to  look
    the same or should at least be readable on another  architecture. After
    all,  FidoNet's primary goal is to be  able to communicate. In order to
    achieve this goal, only  characters that are the  same on most (if  not
    all)  architectures are  allowed to  be used,  and that  happens  to be
    ASCII.

    In many cases, this is more than enough.

    However,  there  are  several  languages  that  make  extensive  use of
    characters that  do not belong  to the 'standard ASCII'  character set.
    Examples are languages spoken in Scandinavian  countries and the German
    language. Not being  able to use these characters is  a big handicap if
    you want to write a message in your own language.


    9.2  The solution.

    There have  been  several  attempts to  solve  this problem.  The  most
    heavily used  proposal to solve this  problem is 'The Charset proposal'
    by Duncan McNutt. This  proposal can be found as FSC-0054 (an  FSC is a
    FidoNet standard proposal) on several systems connected to FidoNet.

    FSC-0054 allows  people  to  use 'special  characters',  as long  as  a
    special  kludge in the message shows exactly what character set is used
    in that  message.  That  kludge  is the  'CHRS'  (charset)  kludge.  It
    consists of 'CHRS:'  followed by the  character set  that was used  and
    the 'level' of that character set (levels will be explained later).
    An example would be "CHRS: IBMPC 2', or "CHRS: SWEDISH 1".

    The idea is,  that other  programs that are  reading that message  will
    detect the kludge  and will  consequently know  what character set  was
    used to  write the message. The  program will then have  to 'translate'
    or 'remap' that  character set to a  character set that is used  on the
    local architecture, so that it can be correctly displayed.

    So in order to read work successfully, a few things are needed:

    -     A kludge  in the message, identifying  the character set that was
          used  to create the  message. If you are  the one generating that
          message, your message  editor must be  able to put such  a kludge
          in the message.


                                           timEd v1.30 manual - page 74




    -     A program  that  can  detect this  kludge,  and do  the  required
          conversions to display it properly on the local architecture.

    -     Character translation  tables, that  can convert characters  from
          one character  set  to  another. In  order  to read  a  'foreign'
          message  correctly,  one  would  need a  translation  table  that
          converts  characters  from the  'foreign'  character  set to  the
          local character set.

    Character  translation  tables  come in  two  flavours:  'level 1'  and
    'level 2'.

    Level 1 concerns  itself with  characters with  ASCII codes lower  than
    128. Level  one character maps  can translate characters with  an ASCII
    code between 0 and  128 to any other  character (with a code  between 0
    and 256). It can  also convert one character between  0 and 128 to  two
    other characters.  Characters with an  ASCII code higher than  127 will
    not be translated.

    Level 2  concerns itself with  characters with ASCII codes  higher than
    127  (so between  127 and  256). Level 2  character maps  can translate
    characters  with ASCII  codes higher  than 127  to any  other character
    (with  a code between  0 and  256). It can  also convert  one character
    higher than 127 to two other characters.
    Characters with an ASCII code lower than 128 will not be translated.

    There are  more level  defined in  FSC-0054, but these  are not  widely
    used.


    9.3  The implementation in timEd

    TimEd fully supports level 1 and level 2 of FSC-0054.

    The implementation is closely modelled after  the sample implementation
    provided by  the author of  FSC-0054. The sample implementation  uses a
    special way to  define and store character sets. Because timEd uses the
    same way to  define and store  character sets,  character sets made  by
    the author of FSC-0054 or others can be used for timEd as well.

    TimEd uses two binary files for the character translation:

          *  readmaps.dat -  this file contains  character translation maps
          that are used when reading a message.  In order to read messages,
          the characters  in  the  message have  to  be translated  to  the
          character set  that is used  on the local machine.  Because timEd
          only runs on 'IBMPC style' hardware, this is always IBMPC.
          Maps  in this  file therefore  need to  translate from  a foreign
          character set to IBMPC.






                                           timEd v1.30 manual - page 75



          *  writmaps.dat -  this file contains  character translation maps
          that  are  used  when  writing  a  message.  In  order  to  write
          messages, the characters in the message have to be translated  to
          the character  set  that is  used  in the  message area  you  are
          writing the  message in. In timEd,  you can define what character
          set  you  want to  use  for  a  certain  area.  TimEd  will  then
          translate the  characters in  your message  to the  character set
          that is defined, before actually writing the message to disk.
          Maps in this file therefore need to translate from IBMPC to  some
          foreign character set.

    A  standard version of these files, with  some of the most heavily used
    character sets, are shipped together with timEd.

    The  author of FSC-0054  has made  a small program  that allows  you to
    make your own character  sets, called MAKEMAPS.EXE. With  MAKEMAPS.EXE,
    you  can modify or generate your own versions of readmaps/writmaps.dat.
    For more  information on how  to do this,  please see FSC-0054  and the
    sample  implementation  (available  as   CHARSET3.ZIP,  available  from
    2:281/527).

    The MAKEMAPS.EXE  program, and the 'source'  files used to generate the
    standard maps are also shipped with timEd, as CHRSTUFF.ZIP.

    - Default behaviour

    Character translation is  always active.  In most  cases, you will  not
    notice  it at  all. In  some  cases, however,  timEd will  react a  bit
    differently than you may expect.

    When  reading messages,  timEd will  always monitor  the message  for a
    CHRS:  kludge.  When  present,  timEd  will  try  to find  a  character
    translation map that can  be used to remap the message to  IBMPC, so it
    can be displayed  correctly. If  it succeeds,  the message should  look
    good, even if special characters are used.
    If  it fails, the special characters in  the message may not look good.
    However, that is  what can  be expected  when 'strange' characters  are
    used in a  message. You may  than try to  find a character  translation
    map to  remap  those  special  characters to  IBMPC,  so  they  can  be
    correctly viewed on your PC.

    When writing messages,  timEd will  by default  use the standard  ASCII
    character  set  for  output.  This  means,  that  if  you  use  special
    characters in your message, timEd will remap those to standard ASCII!
    Remember, the official FidoNet standard disallows use of special
    characters, and  timEd's default behaviour  is based on that.  It means
    that  your message will be translated  to something other than what you
    entered, which may not be what you expect.

    - Changing timEd's behaviour

    TimEd's default  behaviour can be changed  by using several keywords in
    timEd.cfg.



                                           timEd v1.30 manual - page 76



    Apart from  that, functions are  available to modify  timEd's behaviour
    from within timEd.

    Keywords in timEd.cfg:


    ş DefaultOutput <charset to use by default>

    This defines  the default CharSet to use  when writing out messages. If
    you leave it out, the default is ASCII, as mentioned before
    TimEd will not  write 'CHRS: ASCII'  kludges, so if  you leave out  all
    this stuff, no CHRS kludges will appear in your messages.

    If you want  to keep  the 'special'  characters in  your messages,  add
    'DefaultOutput IBMPC' to  your config.  TimEd will  then use the  IBMPC
    chracter set (which is what is used on your local machine). The  result
    is, that timEd will  write out the message  exactly as you entered  it,
    and will  add a 'CHRS: IBMPC'  kludge to tell this fact  to the rest of
    the world.

    Make sure, that you define this *before* any areas are defined in
    timEd.cfg, otherwise  timEd will use the  'ASCII' character set for the
    areas defined  in  timEd.cfg  before this  new  keyword! So  move  this
    keyword up in timEd.cfg 'above' any area definitions.

    ş ConvertOutput <character set to use> <areatag> [ <areatag> .. ]

    The above keyword gives an exception to the 'DefaultOutput'.

    You give  the name  of the charset  to use, and  the areatag(s)  of the
    area(s)  to use  it  for. Limited  wildcard support  is  available, the
    first or the last character can be a '*'.

    Example:

    ConvertOutput LATIN-1 artware *028 artware*

    In the  example above, both  "basic.028" and "demo.028" will  match the
    '*028', and both "artware" and "artware.closed" will match 'artware*'.


    ş DefaultInput <charset>

    This keyword controls character translation when READING a message.

    This gives  the default charset  to use  for a  message, when no  CHRS:
    kludge is present  in a message. In  other words: timEd will  act as if
    'CHRS: <charset>' is present in the message.

    In  some  cases/areas/countries, messages  are written  with  a special
    charset,  but this  is not  signalled  to the  reader  through a  CHRS:
    kludge. As a result, timEd will do no conversion at all on the message
    (implicitly assuming CHRS: IBMPC), even though that may be applicable.



                                           timEd v1.30 manual - page 77



    This keyword  can _force_ timEd  into doing character  translation when
    reading a message, even though there is no CHRS kludge in a message.

    DefaultInput gives  the  global default  for  reading messages  in  any
    area, just like DefaultOutput does for writing messages.

    For this keyword (just like DefaultOutput): Make sure, that  you define
    this *before* any areas are defined in timEd.cfg, otherwise  timEd will
    not use  your 'default' for the areas  defined in timEd.cfg before this
    new keyword!  Move  this  keyword  up in  timEd.cfg  'above'  any  area
    definitions.

    Please note, that  when a 'CHRS:' kludge is present  in a message, this
    will  obviously overrule  the 'DefaultInput'  or 'AssumeCharset' setup.
    The writer  of the message  is supposed to  know best what  charset was
    used..

    ş AssumeCharset

    The format to use is:

    AssumeCharset <charset> <area> [<area> [..] ]

    This keyword is  used to control the  charset assumption per area.  You
    can specify certain areas here, with a syntax equal to the syntax of
    ConvertOutput.


    ş LevelOneOutput <charset> [<charset> [<charset>]]

    This indicates  that a certain character translation map produces level
    1 output.

    What this means  may not be clear when you  haven't read FSC-0054. I'll
    give a short explanation  for those who have,  if you haven't, what  is
    written  below is probably not clear. It  may be better to forget about
    it then :-)

    Level  2 only  concerns itself  with translation  of character  codes >
    127, while level 1 concerns itself only with translation  of characters
    <= 127.

    However,  it  is possible  that  you  want  to  write a  message  using
    'extended  characters  (so  >  127,  most  likely  the  IBMPC  extended
    characters),  but want  to produce  a level  1 message  as output  (for
    example using the SWEDISH character set).

    In  order to  remap  'IBM  extended  characters'  you need  a  level  2
    remapping table, and as  a result you would  get a 'CHRS: <charset>  2'
    kludge, indicating a level 2 message, even though your  remapping table
    may  only output characters <= 127, which  is level 1. But you actually
    want  a 'CHRS:  <charset  1'  kludge,  so  people can  use  a  level  1
    character map to properly remap your message!



                                           timEd v1.30 manual - page 78



    The LevelOneOutput keyword  gives you the opportunity to use  a level 2
    character map with timEd,  but to indicate that the output  is actually
    a level 1 message.

    So if you  add 'LevelOneOutput  SWEDISH' to  timEd.cfg, timEd will  use
    the level  2 SWEDISH character  map, but will  add a 'CHRS:  SWEDISH 1'
    kludge  to the  message.  Make absolutely  sure that  output  is indeed
    level 1 (and  that level 1 maps, to remap  your message back to what it
    should be, actually exist!).

    You  may add  more than one  name on  one line  for this  keyword, like
    this:

    LevelOneOutput Swedish AnotherCharset

    You may also add this keyword more than once in timEd.cfg.


    Finally,  there  is also  a  command  in timEd,  that  can  be used  to
    temporarily  change  timEd's behaviour  while  you  are actually  using
    timEd (without changing timEd.cfg and restarting).

    The command is called:

    READchangecharset

    This function will  show you a popup window with all charsets available
    for reading  messages. Regardless of  the setting of  'DefaultInput' or
    'AssumeCharset', this will  let timEd  use a  specific charset of  your
    choice. (It will not overrule a CHRS: kludge in a message, though).

    After a charset  is selected,  timEd will  re-read the current  message
    and  use the translation you just selected.  It can be used on messages
    that are written  using a specific charset, but do  not contain a CHRS:
    kludge. In  you  didn't  use 'AssumeCharset'  for  that area  (or  that
    charset is  not correct), you  can pick the  correct charset with  this
    function.



















                                           timEd v1.30 manual - page 79



    10.  Keyboard redefinition and macro's


    Starting  with version 1.10, timEd allows you to redefine the keys used
    for  certain functions.  For  nearly  all  situations,  you  have  full
    control over the function of a certain key.
    Apart from that, it is also possible to  attach a series of commands to
    a certain key.  In other words:  just pressing one  key will trigger  a
    number  of commands  to be executed.  This is actually  what is usually
    called a  macro, and can  be used  to reduce  the number of  keystrokes
    needed to perform regular tasks.

    Keys and macro's  are defined in  a file called  TIMKEYS.CFG. The  file
    should be present in the timEd home directory.

    10.1  The format of timkeys.cfg

    The format of the timkeys.cfg file is as follows:

    [<section name>]

    [<os>] <key> <command> [<command>, [<command]]
    [<os>] <key> <command> [<command>, [<command]]
    .
    .

    [<section name>]

    [<os>] <key> <command> [<command>, [<command]]
    [<os>] <key> <command> [<command>, [<command]]
    .
    .


    <section  name>  defines the  scope of  the key  binding or  macro. The
    scope defines where the macro is active.
    The scope (and thus the section name) can be

    ş AreaSelection - key/macro active in the area selection screen.
    ş Editor        - key/macro active in the internal editor.
    ş MessageReader - key/macro active in the message reading screen.
    ş List          - key/macro active in the message list mode.
    ş Global        - key/macro active everywhere in the program.
    ş Menu          - this macro  is not  bound to a  key, but shows  up in
                      the 'user menu' in  timEd. See special section  about
                      this, later in this document.

    This  means that a key can have  a function/macro in the Area Selection
    screen,  and a  different  one in  the  internal  editor. Also,  a  key
    defined in the  section 'AreaSelection'  will do  nothing in the  'List
    mode' (unless that key is defined in that section as well).

    'Global'  is dangerous: it  overrules everything.  If you  would define
    the 'esc' key to produce an 'a' in  the global section, it will produce


                                           timEd v1.30 manual - page 80



    this 'a' EVERYWHERE  in the program and NEVER work  like it is supposed
    to.

    However, for  some keys (most  function keys,  and ALT-0  to ALT-9  for
    example) this doesn't make any difference, because they are  never used
    anyway. Maybe it's useful  to translate   to  'oe' everywhere as  well,
    or something similar, depending on your actual situation.

    <os>
    ----
    This should  be the first  keyword on the  line if it  used, but it  is
    optional.
     
    It can be  either DOS, OS2 or 386. If it is used, the line will only be
    valid  for  the  operating  system  (or  version  of  timEd)   that  is
    mentioned: if  you specify  'DOS' for example,  the line  will only  be
    read  by the  DOS 16  bit version, the  OS/2 and  DOS/386 versions will
    ignore the line. 

    With this keyword, you can have different macros in  different versions
    of timEd. This  is especially  useful if  it concerns running  external
    programs: you  can then make  different versions that call  the correct
    executable (the DOS version or the OS/2 version, for example).


    <key>
    -----

    This  is the  key on  your  keyboard that  you wish  to bind  a certain
    command to.

    Key  can  be any  printable  character  ('a',  'A',  'z', and  so  on),
    F1..F12,  ins,  enter,  del,  home, end,  pageup,  pagedown,  cursorup,
    cursordown, cursorleft, cursorright, space, esc, tab  or greyminus (the
    grey '-' key on your numeric keypad).

    Then there are variations  of these: Shifted  (prepend #, like #F1  for
    shift-F1), with  the CTRL  key (prepend ^,  like ^F1  for CTRL-F1)  and
    with the ALT-key (prepend @, like @F1 for ALT-F1).

    All 'normal' keys  are also available with  ctrl (^a .. ^z) or  ALT (@a
    .. @z). And numeric keys can only be combined with ALT (@0 .. @1).

    This gives the user more than  enough combinations to choose from.  See
    sample timkeys.cfg to see how easy it actually is.


    <command>
    ---------

    This can  be any of  the functions that  timEd can perform,  like 'move
    up', 'move down', 'enter a message', 'find', 'delete message' etc.
    All functions have a name,  usually a name that speaks for  itself like
    'EDITup' to move one line up in the  editor, or 'EDITshell' to shell to


                                           timEd v1.30 manual - page 81



    the OS from  within the editor. Most commands are  already shown in the
    sample timkeys.cfg. A full  list of all commands  can be found in  this
    manual.


    10.3  Some examples

    The line:

    cursorup  EDITup

    tells  timEd   to  execute  the  command   'EDITup'  whenever  the  key
    'cursorup' is pressed (now that makes sense!).

    And:

    @J  EDITshell

    tells timEd to shell  to the OS from  the internal editor whenever  the
    key combination ALT-J is pressed.

    You can  also  insert  'literal strings'  as  a command.  Literal  text
    should be  enclosed  in  quotes, like  this:  "sample text",  or  this:
    'sample text'.

    You can enter quote-characters inside a literal string. If  you enclose
    the  string in double  quotes, you  can enter single  quotes inside the
    string, like this: "literal with a ' quote inside!".
    Similarly, you  can  enter  double  quotes inside  the  string  if  you
    enclose the entire string in single quotes.

    For example:

    F5  "My lipf are fealed"

    Whenever you  press  F5,  timEd will  write  the  string 'My  lipf  are
    fealed'.

    It  is also possible to enter more  than one command for a certain key.
    For example:

    F2 EDITenter "See you later!" EDITenter EDITenter "Gerard." EDITsave

    Whenever F2 is pressed,  timEd will move one  line down in the  editor,
    'See  you later' will be printed, timEd  will move two lines down, then
    print 'Gerard.' and then the message will be saved.

    Now  in  most  places  the  defined  commands  will  suffice.  However,
    sometimes a  certain action  doesn't have a  command. When  you edit  a
    header, for example, there  is no special command  to press 'enter'  to
    accept the input of a field and  move to the next (there is  no command
    HEADEREDITaccept or anything like that).
    In such cases (and only such cases!) you can also give the  name of the
    key (in  this case 'enter') as a command. Entering a new message/header


                                           timEd v1.30 manual - page 82



    could be defined as follows:

    @F1 READenter "All" enter "A new message" enter enter

    This would start  a new message,  write 'All' in  the TO: field,  press
    enter, write 'A  new message' in  the subject  field, press enter,  and
    press enter again to get through the attribute editing screen.

    Please  note, that this only works if  there is no special command. For
    example,  'ins' in  a macro will  do nothing  when inside  the internal
    editor. The fact that you may have connected the command
    'EDITtoggleinsert' to  the 'ins' key  makes no difference. There  is no
    'ins'  command in the  internal editor, so  using 'ins' in  a macro for
    the internal editor does not work.


    10.4  Defining the user menus in TIMKEYS.CFG


    There is a special function  in timEd, that will display a  small popup
    menu,  available when you are  reading a message.  From this menu, that
    can be defined by the user, a function or macro can be executed.

    Because this  menu is nothing  more than a specialized  macro launcher,
    you need  to  define  it in  'timkeys.cfg'.  A special  section  called
    [menu] is available to define the menu.

    The format in this section is:

    <scope> <description> <command> [<command> [<command>]]

    <scope> can be:

    menusquish - item appears in Squish style areas
    menujam    - item appears in JAM style areas
    menuhmb    - item appears in HMB style areas
    menusdm    - item appears in *.MSG style areas
    menuall    - item appears in all areas

    <description>  gives  the  description  of  the  action  that  will  be
    performed when the macro is executed. It is  what appears in the 'maint
    menu' in timEd, like "Pack area", or "Undelete messages". It should  be
    enclosed in single or double quotes.

    You  can also  highlight a  part of  the description  (one letter  most
    likely) by enclosing it  in tildes, like "~P~ack area". The  letter 'p'
    will now be  highlighted, and will  also act as  a 'hotkey' (when  that
    particular key is pressed, the function will be executed).
    Take care to not add the same highlighted key to  the menu twice, or it
    will not work as intended.

    Finally,  <command> [<command>...]  gives the  actual macro  (just like
    'normal' macro definitions) to be executed when the item is selected.



                                           timEd v1.30 manual - page 83



    Samples:

    [menu]

    menusquish  "~P~ack area"  READrunexternal "sqpackp" enter  "[areadir]"
                enter 
    menusquish  "~U~ndelete message" READsqundelete
    menujam     "~J~am   pack"     READrunexternal  "mbutil"   enter  "pack
                [areatag]" enter 
    menuhmb     "~H~mb  pack"    READrunexternal  "hmb"  enter  "[areadir]"
                enter 
    menusdm     "~R~enum SDM"  READsdmrenumber

    (Due to wordwrapping, not all  commands always fit on one line.  In the
    config  file, they should  be on  one line, however.  So on  the second
    line of the example  above, where you see  'enter' as the only  word on
    the  line, this  word should  actually be  appended at  the end  of the
    first line).

    This will produce a  menu looking like this in a Squish  area (only the
    first two items are for Squish areas):

    ÕÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¸
    ³ Pack area              ³
    ³ Undelete messages      ³
    ÔÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¾

    And like  this in a HMB area (only the one item that is defined for HMB
    areas..):

    ÕÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¸
    ³ HMBPack                ³
    ÔÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¾

    You will see  a highlighted scrollbar  on the menu,  that can be  moved
    using the cursor keys. Pressing <enter> will execute the macro  that is
    connected to the highlighted item.


    10.5  Common problems with macros

    Creating macros is not the easiest thing to do. The macro  capabilities
    of  timEd are not much  more than an  automated sequence of keystrokes.
    This means that  you have to  get all keys  exactly right. You  mustn't
    forget even only one.
    If  you  do  things  wrong,  timEd  will  not   complain.  It's  not  a
    programming or macro language, just a keyboard playback.

    The  best approach  is to develop  macros step  by step. Do  not try to
    create a complicated  macro at once.  Break the  operation you want  to
    perform  down in a few  steps. These steps should not  take more than 3
    or 4  keystrokes.  Then implement  the macro  step by  step, each  time
    expanding   the  macro   when  the   previous  step   was  successfully
    implemented.  This takes some time  (you have to  exit and reload timEd


                                           timEd v1.30 manual - page 84



    every time), but in the end it is probably the fastest method anyway.

    One common  pitfall is execution  of external programs. In  many cases,
    timEd stops after execution of an external program, simply  waiting for
    a keystroke,  allowing you to study  the screen output  of the external
    program.  This is no problem: simply add  an extra 'enter' in the macro
    after the external program, to simulate a user pressing <return>.

    Often this  is  forgotten,  and because  timEd  waits for  a  keystroke
    before continuing,  the next command  in the macro is  'eaten', causing
    the macro to fail.

    Consider the following example:

    @Z    READwriterealbody "c:\timed\timed.msg" enter READrunexternal
          "d:\pgp\pgp" enter "c:\timed\timed.msg -o c:\timed\timed.msn"
          enter enter READfiltermemory "c:\timed\timed.msn" enter

    This macro tries to unencrypt a message when ALT-Z is pressed (see  the
    section about PGP for a better example).
    First  it writes  the  current message  to a  file (READwriterealbody).
    Then it runs the external program PGP.  Now the crucial part is on  the
    last line,  where you see  'enter enter'. You  really need  the 'enter'
    two times:
    -     The  first one to end  the input in the field  where you type the
          command line parameters for the external program.
    -     The  second  one to  get  past the  'press  any key  to continue'
          screen that  timEd will give  you after execution of  an external
          program.

    The second  'enter' is  often  forgotten. If  you forget  it, the  next
    command (READfiltermemory)  will be  'eaten' by timEd  as the  keypress
    needed to get  past the 'press any  key' screen and the macro  will not
    work as intended.






















                                           timEd v1.30 manual - page 85



    11.  Message base formats explained

    There  are several  different formats  to store  messages on  a system.
    TimEd supports four of them: Squish, JAM, Hudson and *.MSG.
    What follows is an explanation of  each of these formats. It is not  my
    intention  to give  an  in-depth discussion  of the  inner  workings of
    these   formats.  That   information  may   be  very   interesting  for
    developers, but  this document is  not intended for programmers:  it is
    meant for  users, and as a  consequence only the practical implications
    that are a result  of the inner workings  and design of the formats  is
    discussed.


    11.1  *.MSG


    This  is 'the  original'.  In the  beginning stages,  Fidonet  was very
    small. The  amount of  messages that  had to  be processed was  equally
    small. The format used to store the messages was very simple:

    Every message  area  has  its own  directory.  In this  directory,  the
    messages for  that area are  stored, each  message in a  separate file,
    called <number>.MSG, for example 55.MSG. 

    For  an area that  is called ARTWARE,  the messages could  be stored in
    C:\MSGS\ARTWARE,    and   message    number    10   would    then    be
    C:\MSGS\ARTWARE\10.MSG.

    This means  that  maintaining  the message  base  can be  done  through
    standard  file  system  operations:  deleting  a  message is  equal  to
    deleting a file, copying a message is equal to copying a file, etc.

    The lastread  pointers are stored  in a  file called lastread  (for the
    sysop) and usually  lastread.bbs (for  the other  users, for those  who
    are running a BBS).

    The advantages and disadvantages of this format are closely  related to
    the file system used:

    Advantages:

    *     This format  is very  simple. Implementing  and supporting it  is
          easy. 
    *     It is a very  safe format: every message  is in a separate  file.
          If a file gets corrupt, this is only one message.
          Reconstruction  of  damaged message  bases  can  be done  through
          standard  file   recovery  software   (even  DOS'  undelete   and
          checkdisk!).

    Disadvantages:

    *     In DOS, every file takes up at least the size of one  cluster. On
          most  harddisks  this  is  2  kilobytes. As  a  result,  even the
          smallest message takes at least 2 Kb.


                                           timEd v1.30 manual - page 86



          With several  thousands of messages  available on a system,  this
          'slack space' may add up to quite a large amount.
    *     DOS gets very slow  when there are a  lot of files (>250)  in one
          directory. On larger message areas, this will slow down even  the
          most efficient programs.
    *     Processing  messages means  constantly opening and  closing a lot
          of files.  This also slows things down.


    OS/2's  HPFS   file  system  will   help  to  relieve  the   two  first
    disadvantages, but not enough to make it efficient.


    11.2  Hudson

    Hudson is more or less the exact opposite of *.MSG. 

    Where *.MSG  stores  all  areas in  a  different directory,  and  every
    message  in a different  file, Hudson puts all  messages from all areas
    in only one set of files.

    This 'set' consists of the following files:

    * msginfo.bbs

    This file  is always 406  bytes long, and contains  general information
    about the message  base, like the total amount of messages, the highest
    message number and  the amount  of messages  present in each  different
    area (called 'board' in Hudson speak).

    * msghdr.bbs

    This file contains the message headers (from: and to:  fields, subject,
    date etc).

    * msgtxt.bbs

    This  holds the  actual message  text (the  'bodies' of  the messages),
    including the kludges.

    * msgidx.bbs

    This is an  index that holds, for each message,  the message number and
    the board number. This index can  be easily searched for messages  that
    are present in a certain board.

    * msgtoidx.bbs

    This  file holds  a copy  of the  TO: field,  for each  message that is
    present in  the Hudson  base. In  other words: for  the entire  message
    base.
    In  order to  do a  personal  mailscan for  a particular  user, on  the
    *entire*  message base,  all an application  has to do  is scan through
    this file!


                                           timEd v1.30 manual - page 87



    This  is the  one and  only reason  why a  personal mailscan  on Hudson
    bases  is so  fast. Everyone  has sometimes  logged onto  a QuickBBS or
    Remote Access (pre 2.00) board, and saw how fast it was...

    * lastread.bbs

    This file holds the lastread pointers for all users in all boards.


    Advantages:

    *     Speed. Because  all messages are stored  in one set of  files, an
          application has to open  1 set of files  and can then reach  each
          single message on the  system without having to change directory,
          or open any other file.

          For tossers, the speed can also be very high,  because it is easy
          to buffer information. You're only  doing sequential writes to  a
          single set of files, which makes buffering relatively easy.

    *     It also takes less  space than *.MSG, as  it doesn't take a  file
          for  each  message.  Internally,  the  Hudson   base  works  with
          'records' of  256  bytes,  however, so  there  is  some  internal
          'slack'.

    *     Widespread  and  very  popular.  Lots  of  high  quality  support
          packages are available.


    Disadvantages:

    *     Vulnerability:

          -     All messages are  stored in one set of files.  If these get
                corrupt, your entire message base can be lost.

          -     The headers are  stored separately from the bodies.  If the
                headers and bodies  get 'out of sync', you won't be able to
                do a lot of useful reading.

    *     Limits. Hudson  is limited  to 200  areas, and  16 Mb of  message
          text (total  space taken by  all message bodies). For  a somewhat
          larger system, this is not enough anymore.


    11.3  Squish


    Squish could  be placed somewhere  between Hudson and *.MSG.  It stores
    messages  for every *area* in a set of files. So, messages for the same
    area go into the  same set of files, but messages for other areas go in
    other files.




                                           timEd v1.30 manual - page 88



    A Squish file area basically consists of 3 files:

    * <name>.SQD

    This is the  'datafile'. It contains the messages (both the headers and
    the  bodies). Messages  are stored  in a  'doubly linked  list'  in the
    message area.
    In every message area, there are two 'doubly linked lists':
    a  list containing  the 'active'  messages, and  a list  containing the
    deleted messages. 
    The  linked list  of deleted  messages can be  used when  a new message
    needs to  be added: if the space that the  deleted message once took is
    large enough, its space can be reused.
     
    In  addition,  Squish can  purge messages  'on-the-fly':  when messages
    have to be added to the message area, Squish can delete messages  while
    it  is tossing  in order  to keep  (no more than)  a certain  amount of
    messages in that area.

    * <name>.SQI

    This is an index file that holds,  for each message, the offset in  the
    .SQD file where that message starts, and the  'hash value' of the 'TO:'
    field of the message. 

    The hash  value is a  32 bit number, that  is calculated using  the TO:
    name. Although this number  is not entirely unique, I have not seen two
    real names with the same hash value.

    The hash  value can  be  used to  do a  quick  personal mailscan:  just
    calculate the hash value  for the name of  the user, and compare  these
    values to the hash values found in the index.

    * <name>.SQL

    This file holds the lastread pointers for each user.
    as fast  as Hudson (it  doesn't have to  open a file for  each message,
    but it has to for each area.

    Disadvantages
    -------------

    *     People  that  have  always  used Hudson,  will  find  tossing and
          maintenance to be slower,  especially if 'on-the-fly' purging  is
          used.
          *.MSG people will not suffer from this.

    *     Less 'third party' support than Hudson. 


    For a long time,  Squish was the best thing in my opinion: it was space
    efficient, sufficiently fast  if 'on-the-fly' purging  was turned  off,
    and very safe.



                                           timEd v1.30 manual - page 89




    11.4  JAM

    JAM was  only 'released' a  short while  ago (late  1993). It uses  the
    same concept as  Squish: messages are  stored in one  set of files  per
    area. Messages are  not stored  using linked  lists, however, and  'on-
    the-fly' purging is not part of the standard.

    Every JAM area consists of the following files:

    * <name>.JHR

    This file contains the headers of the messages, and the kludges.

    * <name>.JDT

    This file  contains  the  actual  message text  (the  'bodies'  of  the
    messages).

    * <name>.JDX

    This is an index that is holding,  for each message, the offset in  the
    .JHR  file where  the header  starts.  It also  contains  a CRC  value,
    calculated  over the TO: field of the  message. This can, just like the
    hash  value for  the Squish  areas, be  used for  a fast  personal mail
    scan.

    * <name>.JLR

    This file holds the lastread pointers for all users.

    Advantages:

    *     Safe.  It is  much  safer than  Hudson (because  of the  separate
          storage for different  areas, but  not as  safe as Squish  (whose
          recovery  capabilities are  better, because of  the 'linked list'
          design).

    *     Faster than *.MSG, slower than Hudson.

    *     Very space efficient, better than Hudson and Squish.

    *     Already is, or will be,  supported by many authors of  well known
          (and  high  quality) software  packages  that  are available  for
          Hudson bases.


    Disadvantages:

    *     It is quite new, and  still has some weak points (in  both design
          and (some!) offered implementations).

    *     Hudson users will find it slow in both tossing and maintenance.



                                           timEd v1.30 manual - page 90



    12.  timEd configuration reference 


    This section will  list all keywords that can be  used in the timEd.cfg
    configuration  file. The  listing is  alphabetical, making  it  easy to
    find the keyword you are looking for.

    Included  in the timEd  package is a  sample timEd.cfg, that  lists all
    commands in a more logical order. 

    This reference section is provided to offer  detailed information about
    every configuration keyword.


    General rules for the configuration file:

    The configuration  file for timEd  should be called timEd.cfg  and must
    reside  in the  current directory,  so timEd  can find  it (use  the -C
    command line parameter otherwise).

    It is a plain ASCII file and may contain comments.  A comment is a line
    that starts with a semi-column, like this:

    ; this is a comment.

    Blank lines are ignored, all others should contain a  keyword. Usually,
    in this form:

    <keyword> <value> [value value]

    So  first  the  keyword,  followed  by  the  value  of   that  keyword,
    optionally followed by more values..

     
    Every keyword in timEd.cfg can  now be prepended with 'OS2', '386'  or 
    'DOS'.  Keyword prepended with one of  those keywords will only be used
    by the indicated version of timed. 

    For example, you can have: 
     
      OS2 EXESIGN c:\os2progs\sign.cmd 
      DOS EXESIGN c:\dosprogs\sign.bat 
     
    The OS/2  version  will   use the  first line  (so the  .CMD file)  and
    ignore  the second line.  The DOS  16 bit version  will use  the second
    line and ignore the  first.  Similarly, you  can use '386' for  command
    only intended for the DOS 32 bit version. 
     
    This gives you the  opportunity to use the  DOS, OS/2 and 386  versions
    with the same config file. 

    The following keywords can be used in timEd.cfg:




                                           timEd v1.30 manual - page 91



    ADDRESS

          Use this keyword to let  timEd know what your address is. You can
          enter up to 35 of them, for your main address and AKA's.

          The  first one given will be the  default address. If you want to
          use an AKA  for a certain area,  you must use the -P  switch (see
          EchoArea  keyword). -P  switches found in  a Squish configuration
          file  will be  recognized  and used.  Also AKA's  found in  other
          configuration files  (like Fastecho.cfg)  will be recognized  and
          used.

          However,  you  *must*  always  define  all  addresses  to  use in
          timEd.cfg. By playing with the order of the addresses (and/or  by
          leaving some addresses out),  you can influence the  AKA-matching
          process.


          Example:

          address          2:281/527
          address          2:500/133.999


    AKAFORCE
     
          You can force akamatching by using the AKAFORCE keyword. 

          Format: 

          AKAFORCE <mask> <address to use> 

          example: 
     
          AKAFORCE 50:*/*.* 49:500/1 
     
          This means: always use  49:500/1 as address when mail  is sent to
          any  zone 50  address. This  forcing will  then always  be active
          (regardless   of  your  'AKAMATCHING'  setting),  and  will  take
          precedence over 'automatic' akamatching. 


    AKAmatching

          Format: AKAmatching < Yes | No >

          This option  is interesting if  you have more than  1 address. If
          you set this to  'Yes', timEd will automatically try  to find the
          most appropriate address to use when writing a message.

          Say,  for example,  that you  have two  addresses: 2:281/527  and
          60:100/112.

          If you write  a message to  2:500/133, you  probably want to  use


                                           timEd v1.30 manual - page 92



          your 2:281/527 address.
          If  you write  a message  to 60:100/1,  you probably want  to use
          your 60:100/112 address.

          In this  case, timEd would  try to  find the  address (AKA)  that
          'matches' the destination address best.

          It first looks for  a matching zone, and  if more than one  match
          is found,  it'll try  to find  an address  where both  'zone' and
          'net'  match. If there is  still more than  one match after that,
          it will just take the first match.

          See the section about writing netmail for more info.


    AREALISTSORT

          Use  this  keyword  to  let  timEd  sort  the  arealist,  on  the
          following criteria: 
     
          T - Type of area (order: Netmail, Local, Echomail). 
          N - Nametag ('areatag' of the area, like 'Artware'). 
          D - Description of the area.
          A - Aka used for that area.
          G - Group of the area.
       
          You can combine more than one criterium. 
       

          Example: AreaListSort TGN 

          This will sort on type, then on group, then on Nametag.  


    AREASBBS

          This gives the  path and  filename of  an Areas.bbs format  file.
          Many echomail processors are able to generate such a file.

          TimEd  also recognizes  Squish  and JAM  areas in  this file  (in
          addition to the 'standard' *.MSG and Hudson areas).

          Squish areas must start the definition with a '$', like:

          $c:\msgs\tub        tub         2:281/500

          JAM areas must start the definition with a '!', like:

          !c:\msgs\jamdev     jamdev      2:281/500







                                           timEd v1.30 manual - page 93



    ArcMailAttach

          Format: ArcMailAttach < Yes | No >

          This keyword is needed  to support the 'Direct' message attribute
          (and other, extra attributes  like 'Immediate', 'Kill file  sent'
          etc) for  people that  are running FrontDoor  (and maybe D'Bridge
          too..). 

          Frodo  supports  the  'FLAGS'  kludge  that   makes  these  extra
          attributes available.

          For Binkley-users (where Squish  packs the netmail) one  must set
          both 'Crash' and 'Hold' to get the 'Direct' attribute. The  other
          attributes are simply not available in that environment.

          How  does  timEd  know what  system  you run?  It  looks  in your
          Squish.cfg,  if  it finds  'Arcmailattach', you  are  running FD,
          otherwise Binkley.

          If   timEd   doesn't   read   a   Squish.cfg,   you   can   force
          'Arcmailattach' by specifying:

          ArcMailAttach Yes

          Anyone not using  Squish (but Fastecho, for  example) and running
          Frodo (or similar) should use this keyword.

          Default is *not* ArcMailAttach.


    ASSUMECHARSET 
     
          This  keyword   control  character  translation  when  READING  a
          message. 
     
          AssumeCharset <charset>  <area> gives the  charset to use for  a 
          message, when no CHRS: kludge is  present in a message. In  other
          words: timEd  will act as if 'CHRS: <charset>'  is present in the
          message. 
     
          In  some  cases/areas/countries,  messages  are  written  with  a
          special charset, but this is not signalled to the reader  through
          a CHRS: kludge. 

          As a result, timEd  will do no conversion  at all on the  message
          (implicitly  assuming  CHRS:  IBMPC),  even though  that  may  be
          applicable.
     
          This keyword can _force_  timEd into doing character  translation
          when reading a message, even  though there is no CHRS kludge in a
          message. 




                                           timEd v1.30 manual - page 94



          AssumeCharset  <charset>  <area>  [<area>  ...  ]       can  give
          exceptions  to 'DefaultInput'  for certain  areas. The  syntax is
          equal  to the  syntax of  'ConvertOutput' (with  limited wildcard
          support). 
     

    CCVERBOSE

          This   can  prevent   timEd  from  expanding   CC:'s  into  <name
          (address)> form with. 

          Possible values:

           Yes: still expand CC:'s to 'name (address)' form.
          No :  only  show to  whom  the original  was  addressed, and  the
                number of other recipients. 
     
          Example:

          CCVERBOSE Yes


    CLOCK

          A clock can  be shown in the message reading  and edit screen. In
          the DOS version, you can set this to 'Yes' to see a  clock, while
          'No'  will give  you the  amount of  free  memory instead  of the
          time. In OS/2, the clock is always active.
       
          The DOS version will give up time slices to  DESQview and Windows
          (or call INT 28 if neither of those are found), because  updating
          the clock  means it cannot be blocked on I/O anymore. With "Clock
          No" it _will_  be blocked on I/O  again, so that's the way  to go
          in  case  of  an  unacceptable  performance   hit  /  unsupported
          multitasker. 
       
          In  the OS/2 version, the clock runs in a separate thread that is
          sleeping most  of its life, while  the main thread  is blocked on
          I/O, waiting for a keypress.

          For those  who do  not understand  what I  wrote above: timEd  is
          very multitasker friendly, and  won't 'steal' any processor  time
          away from other tasks that may be running on your system.


    COLOURS

          Lots  of  colours  can  be  specified by  the  user.  The numbers
          specify the colour to be used.


          Note: by default, timEd uses a monochrome setup. So  if you don't
          have a  colour monitor,  you  can initially  leave all  color_...
          statements  out (in fact, you  can do that  with a colour monitor


                                           timEd v1.30 manual - page 95



          as well, it just looks very boring :-).

          The numbers are as follows:

                        Foreground  Background

           BLACK           0            0
           BLUE            1            16
           GREEN           2            32
           CYAN            3            48
           RED             4            64
           MAGENTA         5            80
           BROWN           6            96
           LIGHTGRAY       7            112
           DARKGRAY        8            n.a.
           LIGHTBLUE       9            n.a.
           LIGHTGREEN     10            n.a.
           LIGHTCYAN      11            n.a.
           LIGHTRED       12            n.a.
           LIGHTMAGENTA   13            n.a.
           YELLOW         14            n.a.
           WHITE          15            n.a.
           BLINK          128           n.a.


          Now  take  the  preferred  colours  of  the  foreground  and  the
          background of a certain item, and add them.

          So, blue (foreground) on black (background) would be 1 + 0 = 1   
               
          lightgray on black is 7 + 0 = 7
          white on blue is 15 + 16 = 31 
          etc.

          Tip:  A  much better  way  to define  your colours  for  timEd is
                using  Dick  Pluim's  TIMCOLOR  utility. It  will  let  you
                change timEd colours  in an interactive way, and  can write
                out  configuration segments  (to be  included in  timEd.cfg
                with   the  'Include'   keyword)  with   the  corresponding
                COLOR_.. keywords.


          Here are the colours  you can define, and  the keywords to use  +
          my personal setting of these colours.

          There are three main categories:

          * color_as...

          For the area  selection screen,  where you  can select a  message
          area to  read. These colours  will also be  used for the  message
          header list  (ALT-L) and the file  selection box that will appear
          when  you  use a  'wildcard'  in the  subject when  doing  a file
          attach.


                                           timEd v1.30 manual - page 96




          * color_msg...

          For  the part where you will spend most time: the message reading
          screen.

          * color_pop...

          For popup-screens, like help screens and errors.


          Area selection screen settings
          ------------------------------

          Area selection 'Title' Bar, at the top of the screen:

          color_asbar     112

          Area Selection Frame, the single line around the total screen:

          color_asframe     4

          Area Selection Normal Text, like the names of the areas:

          color_astext      7

          Area  Selection  Highlighted  bar,  the  message   area  that  is
          currently selected:

          color_ashigh     31

          Special  colour, currently  only used  in a  msg header  list for
          personal messages:

          color_asspecial  14

          In a  picklist, an accented character  (hotkey). Try ALT-M in the
          area selection screen for a test. 

          color_asaccent 14

          Same as above, but in a highlighted (current) line:

          color_ashighaccent 30
     

          Message reading screen settings
          -------------------------------

          Message reader Header, like the From: and To: field contents:

          color_msgheader   7




                                           timEd v1.30 manual - page 97



          Message reader date, part of the message header:

          color_msgdate     14

          Message reader 'labels', like the words 'TO:' and 'From:':

          color_msgdata     15

          Message reader reply link information:

          color_msglinks    3

          Message reader message attributes:

          color_msgattribs  3

          Message reader horiz. line, between header and text:

          color_msgline     9

          Message reader quotes, quoted text (starting like GvE> ):

          color_msgquote   14

          Message reader normal text, the body of the message:

          color_msgtext     7

          Message  reader  'Status' bar  at bottom,  with current  msg area
          etc:

          color_msgbar     31

          An  accented character  in  the statusbar  at the  bottom of  the
          screen   (msg  reading   screen,  helplines   when  displaying  a
          picklist):

          color_msgbaraccent 30
     
          Message reader origin, the origin of a message:

          color_msgorigin 15

          Message reader kludges (controlinfo like MSGID and SEEN-BY):

          color_msgkludge  3

          Message  reader,  the  TO:  field  in  the  header  for  personal
          messages. Also  used for 'highlights'  in the  message body  when
          using the F)ind feature.

          color_msgspecial 12




                                           timEd v1.30 manual - page 98



          Popup boxes settings
          --------------------

          Popup boxes frame, the box around a popup text:

          color_popframe 121

          Popup boxes text, the text inside the box:

          color_poptext 112

          The colour  of the title  of popup boxes. Hardly  used   (only if
          you press F1):

           color_poptitle 30
     

          Generic entry colour
          ---------------------

          Colour of all entry fields  (for example when you edit  a header,
          the field where you enter the TO: name):

          color_entry 30

          Internal editor colours
          -----------------------

          Current  line,  normal text  (set to  COLOR_MSGTEXT if  you don't
          want the current line to be 'highlighted'). 
     
          color_editcurnormal 15 
     
          Current line,  quoted text  (set to  COLOR_MSGQUOTE if  you don't
          want the current line to be 'highlighted'). 
     
          color_editcurquote  6 
     
          Current  line, text  in a  block (set  to COLOR_EDITBLOCK  if you
          don't want the current line to be 'highlighted'). 
     
          color_editcurblock  113 
     
          Text that is in the currently defined block: 
     
          color_editblock     112 

          Colour of the 'Hard Return Token':

          color_edithcr       8 






                                           timEd v1.30 manual - page 99



          Find Screen Colours
          -------------------

          The colour of the frame of an active window:

          color_findactive 11

          The colour of the frame of an passive window:

          color_findpassive 1

          The  colour of  normal  text (search  strings, and  'labels' like
          'Action:' 

          color_findtext 7  

          The colour  of data-items (value of a label,  'Read' as the value
          of the 'action' parameter for example):

          color_finddata 3

          The  colour of  the highlighted  ('selected')  entry (highlighted
          bar):
     
          color_findhigh 113

          Accented  ('highlighted') characters,  what keys to  press in the
          helpline at the bottom of the screen:

          color_findaccent 14
     


    Confirm_Edit_Exit <Yes | No>

          This controls whether  timEd asks for confirmation when you press
          <ESC> in the internal  editor (to abort the message).  If you set
          this  to 'Yes', timEd  will first ask  if you're  sure, before it
          dumps all the text you so carefully edited :-)


    Confirm_Exit

          Format: Confirm_Exit <Yes | No>
     
          This controls whether timEd asks for  confirmation before exiting
          to DOS.  If you  set this  to 'Yes',  timEd will  ask if  you are
          really sure, before exiting to DOS.


    Confirm_Delete

          Format: Confirm_Delete <Yes | No>
     


                                           timEd v1.30 manual - page 100



          This  controls  whether  timEd   asks  for  confirmation   before
          deleting a message. If you  set this to 'Yes', timEd will  ask if
          you are really sure, before deleting a message.


    CONVERTOUTPUT

          Syntax: ConvertOutput <charset> <area> [<area> [<area>]] 
     
          This command  gives exceptions  to the DefaultOutput  definition,
          for certain areas only.

          You give the name  of the charset to  use, and the areatag(s)  of
          the   area(s)  to  use  it  for.   Limited  wildcard  support  is
          available, the first or the last character can be a '*'. 
          In the example above, both "basic.028" and "demo.028"  will match
          the  '*028', and  both "artware" and  "artware.closed" will match
          'artware*'. 


    DEFAULTOUTPUT
     
          Syntax: DefaultOutput <charset>

          Example: DefaultOutput IBMPC

          DefaultOutput gives  the global default of  the character  set to
          use for writing  messages in  any area.  See the special  section
          about character translation for more information!


    DEFAULTINPUT

          Syntax: DefaultInput <charset>

          DefaultInput  gives the  global default  for reading  messages in
          any area (just like DefaultOutput does for writing messages). 
     


    DEFAULTINPUT

          Syntax: DefaultInput <charset>

          DefaultInput  gives the  global default  for reading  messages in
          any area (just like DefaultOutput does for writing messages). 
     
          Also for this keyword (just like DefaultOutput): Make sure,  that
          you  define this  *before* any  areas  are defined  in timEd.cfg,
          otherwise  timEd will  not  use  your  'default'  for  the  areas
          defined  in  timEd.cfg before  this  new  keyword! So  move  this
          keyword up in timEd.cfg 'above' any area definitions. 
     
          Please note,  that when a 'CHRS:' kludge is present in a message,


                                           timEd v1.30 manual - page 101



          this   will    obviously   overrule    the   'DefaultInput'    or
          'AssumeCharset' setup. The writer  of the message is supposed  to
          know best what charset was used.. 


    DRIVEREPLACE
     
          Drive 'mapping' for the  import routines  for tossers. Handy  for
          peer-to-peer  networks.  If  the  programs on  the  'server'  for
          example  always use drive C:,  and you try  to use these programs
          from another PC where that drive is (network-)drive F:. 
     
          If  you use 'DriveReplace C F' all references to drive C: will be
          changed to references to drive F:. 
     
          Format: 
     
          DriveReplace <olddrive> <newdrive> 
     
          (So: Replace <olddrive> with <newdrive>). 
     
          Please  note that  this  replace is  only for  the routines  that
          import  the  tosser configuration,  not  in other  places  in the
          program. 
     


    ECHOAREA, NETAREA

          Area  definition,  Squish  alike.   You  can  specify  areas   in
          timEd.cfg as well, in addition to the areas found in Squish.cfg.

          The squish.cfg  file is read *after*  these are read, however, so
          you  can  'overrule'  areas   here  (areas  already  defined   in
          timEd.cfg will be skipped in squish.cfg and/or areas.bbs).

          This is the only  place where you  can give a 'long'  description
          of  an area (can't  do that in  squish.cfg, of  course) and where
          you  can specify  'default message attributes'  for newly created
          messages in that area.

          It looks quite a bit like definitions in squish.cfg. There are  3
          keywords:

          ş EchoArea  - for echomail areas
          ş NetArea   - for netmail areas (define as many as you want)
          ş LocalArea - for local areas
          ş NewsArea  - for Usenet style news areas
          ş Mailarea  - for Internet style mail areas


          The format for all of these:

          <keyword> <description> <areatag> <location> [-Pxxx -Axx  -$ -J -


                                           timEd v1.30 manual - page 102



          H]

          <keyword>         is  NetArea, EchoArea,  LocalArea,  NewsArea or
                            Mailarea.
          <description>     is a  description of  the area,  between double
                            quotes 
          <areatag>         is  the  official areatag  of  the  area (like:
                            TUB). Even  if the area  is a  Local area or  a
                            Netmail  area,  the  area  must  have a  UNIQUE
                            areatag,  as timEd  uses  these to  distinguish
                            areas!
          <location>        is  the directory/basename/board where the area
                            resides.

          And where:

          The default is *.MSG format, but:

          -$ is for squish style areas.

          -J is for JAM style areas.

          -H is for Hudson base areas.

          And:

          -A gives default attributes. 
                p = private, 
                c = crash, 
                k = killsent, 
                d = direct,
                i = immediate,
                r = readonly (seen notes below);

          -Pz:nnn/nnn.p is the  AKA to use for  this area (also active  for
          NetArea). The default is to use the primary address.

          You  can make  an area  'read-only' if  you add  -Ar in  the area
          definition  in  timEd.cfg. The  term  'Read-Only'  is not  really
          correct, but  replying to a  message in that  area or creating  a
          new one  is  not possible.  It is  meant  as a  convenience  (for
          example to prevent you from writing messages in a 'personal  mail
          area')  and  certainly  not  as a  security  measure!  Deleting a
          message, for example,  is possible. So is  mass copying/moving to
          such an area. 

          Examples:

          NetArea  "Netmail Area"  netmail  c:\fd\netmail   -Apk

          My primary netmail  area, with  a nonsense  areatag, is in  *.MSG
          format and  all messages  get the 'private'  and 'kill/sent' bits
          by default. The  'local' bit is  always added to all  messages as
          well.


                                           timEd v1.30 manual - page 103



          NetArea "Wlink net" w_net c:\fd\wnet -Ap -$ -P60:100/112

          A  second  netmail  area,  in  Squish  format. Messages  get  the
          'private' bit by  default and  I use  my AKA  60:100/112 in  this
          netmail area.


          LocalArea "Bad_Msgs"  BAD_MSGS  C:\Squish\Msgs\Bad    -$
          LocalArea "Dupes"     DUPES     C:\Squish\Msgs\Dupes  -$

          Here  I add  my bad_msgs  and dupe  areas. I  like to  see what's
          happening.


          LocalArea "SysOp"  Sysop   d:\local\sysop    -$ -Ap

          I define my SysOp area, default private messages.


          EchoArea  "JAM development"  JAMDEV  d:\echo\jamdev  -J

          An echomail area in JAM format.


          EchoArea  "Contrast"   CONTRAST  d:\echo\CONTRAST   -$

          An echomail area (my local points  area, defined here as well  as
          in  squish.cfg, but I define  it here,  because I want  it at the
          top of my area selection screen..)


          EchoArea "Points" POINTS.133 c:\sqsh\pnt -P2:500/133.999

          Another echomail  area, where  I use my  AKA 2:500/133.999, *.MSG
          format.


          EchoArea "Artware testers"    artware.closed     3    -H

          An echomail area, in  the Hudson base format (that's what  the -H
          is for). The area is board number 3 in the Hudson base. 


    ECHOLOG

          Where  to put  the echotoss.log  file (name  + path). If  this is
          specified,  an echotoss.log  file will  be written  when you exit
          timEd.

          An  echotoss.log  file  is  a  file containing  a  list  with the
          areatags of  areas that contain  newly entered messages. You  can
          pass this file to your tosser/scanner to scan out  and pack these
          new  messages.  (For  Squish,  this  is done  by  using  the '-f'
          command line parameter).


                                           timEd v1.30 manual - page 104




          Example:

          EchoLog C:\timEd\echotoss.log


    EDITOR

          This  tells timEd  what  editor  you want  to  use  to edit  your
          messages.

          There are two possibilities:

          'Internal' - this will let you use timEd's internal editor.

          '<path + filename>' -  if you give the  name of a program,  timEd
          will  execute  that program  instead  of  using timEd's  internal
          editor.  Whenever  it  is  time  to edit  a  message,  timEd will
          execute  this  program. Entering  a  full  path is  not  required
          (because timEd  will  look  for the  editor  in your  PATH),  but
          speeds up things.
          TimEd  will call  the editor with  1 parameter:  the name  of the
          temporary  file that timEd created and  that contains the message
          body to be edited.

          You can also use  a batchfile here. You  could use this to  start
          up  your editor  with extra  options, or  to call  other programs
          before or after the editor (a spell-checker maybe?).
          TimEd calls batchfiles with two parameters: the name of the  file
          to  edit (%1) and the areatag (%2).  You might use the areatag to
          perform  some  magic  in  a  batchfile,  like  calling  different
          editors for different areas.


          Example:

          Editor c:\misc\q.exe
          or
          Editor Internal


    EDITSAVEMENU

          Syntax: EditSaveMenu <Yes|No> 
     
          If you  set this to  'yes', a menu will  pop up after you  save a
          message. 
          This allows you to toggle the 'sign', 'encrypt' and  'spellcheck'
          actions. When  you're done, select 'save message'. This is mainly
          for people using an external editor. People who use the  internal
          editor can use the command EDITeditsavemenu.





                                           timEd v1.30 manual - page 105



    Empty_Tearline

          Format: Empty_Tearline <Yes|No>

          This  controls  whether echomail  messages will  have  a tearline
          mentioning the  timEd version (like:  --- timEd/B10) or an  empty
          tearline. 

          If you set this  to 'Yes' an empty  tearline will be created.  In
          that case,  a  ^APID kludge  will  be  added to  show  the  timEd
          version you are using.


    End_of_Area_Menu

          Format: End_of_Area_Menu <yes | No>

          If this is set to 'Yes, and timEd reaches the last  message in an
          area, pressing <right>  or <enter>  will have  a message pop  up,
          that gives you the choice to: 
     
          -     go to the next area with new mail (<right>,  <enter>, '+').

          -     exit the area and go to the Area Selection  Screen (<esc>).

          -     just stay where you area (any other key). 
     
          Lazy readers  can just keep  on pressing <right> or  <enter>, and
          cycle through all their areas.... :-) 
     
          With  this set to  'No' timEd will just  'beep' at the  end of an
          area, and do nothing else. 


    ENTERMARKS   *** obsolete ***

          If this  is set to 'Yes', the <enter> key will mark a message. If
          this  is set  to 'No', <enter>  will not mark  a message but will
          function as  <cursor right> and move you to  the next message. In
          this case, <space> will mark messages.

          Example:

          EnterMarks No


    EXECRYPT

          Syntax: ExeCrypt <progname> <parms>

          This defines the program  to run when the  user wants to run  the
          program to  encrypt a message. See  the special section about PGP
          and spellcheckers for more information.



                                           timEd v1.30 manual - page 106




    EXECRYPTSIGN
     
          Syntax: EXECRYPTSIGN <progname> <parms>
     
          This functions  like EXECRYPT and  EXESIGN, and will be  executed
          if BOTH the options 'encrypt' and 'sign' are toggled on.

    EXESIGN

          Syntax: ExeSign <progname> <parms> 

          This defines the program  to run when the  user wants to run  the
          program to  clearsign a  message. See the  special section  about
          PGP and spellcheckers for more information.


    EXESPELL

          Syntax: ExeSpell <progname> <parms> 

          This defines the program  to run when the  user wants to run  the
          program  to do  spellchecking  on  a  message.  See  the  special
          section about PGP and spellcheckers for more information.
     

    FASTECHOCFG

          TimEd can read the Fastecho.cfg for you  (current version: 1.45),
          and get all  echomail areas  from that  configuration. Note  that
          Netmail,  bad_msgs  and  dupes  are  not  read  by  default;  add
          'ReadNetAreas  Yes' and/or 'ReadLocalAreas Yes' to your timEd.cfg
          file to let timEd read those areas as well.
          Different AKA's  used in  your Fastecho setup  will be recognized
          and used when creating a message.

          Give full path and name of the file. 

          FastechoCFG c:\fe\fastecho.cfg

          TimEd  also supports  the use  of environment  variables  (in the
          form: $[<environment variable>]) that  this tosser allows you  to
          use. 


    FDNODELIST

          This tells timEd  where it  can find  a FrontDoor nodelist  (used
          by.... FrontDoor! Yes!)

          TimEd  can  use  the  files  called  USERNAME.FDX,  NODELIST.FDX,
          NODELIST.xxx,  FDNODE.FDA, FDNET.PVT  and  FDPOINT.PVT (the  last
          three only if applicable, not required).
          When  looking up  a SysOp-name,  timEd will  try to  locate *all*


                                           timEd v1.30 manual - page 107



          matches for  the (part  of the)  name entered. So,  if you  enter
          'Essen',  it  might  find both  'Gerard  van  Essen' and  'Martin
          Essenburg'.

          With the  frontdoor nodelist, you  can always get the  same SysOp
          name more  than once, and pick one of  their addresses (HUBs etc.
          often  have  more  than  one  address).  Unlike  the   Version  7
          nodelist,  duplicate  SysOp names  are  always  preserved in  the
          index.


          Example:

          FDnodelist    C:\Frodo\Nodelist


    FMAILCFG

          TimEd can  read the Fmail config  files for you (current version:
          0.96), and get all  echomail areas from that configuration.  Note
          that Netmail, bad_msgs  and dupes  are not  read by default;  add
          'ReadNetAreas Yes' and/or  'ReadLocalAreas Yes' to your timEd.cfg
          file to let timEd read those areas as well.

          Different AKA's  used for message areas  in your Fmail setup will
          be recognized and used when creating a message.

          Give full path and name of the file Fmail.cfg

          FmailCFG c:\fmail\fmail.cfg


    FOLLOWHELLO

          See 'HELLO'.


    FREQATTRIBUTES

          This is the default  status of a file request message  created by
          the ctrl-f function. 

          Values: i)mmediate, c)rash, d)irect, h)old, k)ill, p)rivate.  

          Example:

          FreqAttributes ck

          File request messages created  by timEd's 'ctrl-f' function  will
          now automatically have the 'crash' and 'kill/sent' attributes.






                                           timEd v1.30 manual - page 108



    GECHOCFG

          !  Note:  older  versions  of  GEcho (older  then  1.01)  are not
          supported! 

          TimEd can  read the GEcho config  files for you (current version:
          1.12,   1.20/beta),  and   get  all  echomail   areas  from  that
          configuration.  Note  that Netmail,  bad_msgs and  dupes  are not
          read by  default; add  'ReadNetAreas Yes'  and/or 'ReadLocalAreas
          Yes'  to your timEd.cfg  file to  let timEd  read those  areas as
          well.

          Different AKA's  used for message areas  in your GEcho setup will
          be recognized and used when creating a message.

          Give full path and name of the file Setup.ge

          GEchoCFG c:\GEcho\Setup.ge

          TimEd  also  supports the  use of  environment variables  (in the
          form: $[<environment variable>]) that  this tosser allows you  to
          use.


    HELLO, REPHELLO, FOLLOWHELLO

          HELLO       :     This defines the string to  start a new message
                            with. You usually say 'hello'  before you start
                            a message, so  this is called 'hello'  and will
                            be referred to as 'hellostring' throughout  the
                            documentation.

          REPHELLO    :     This defines the string to  start a reply with.
                            This is usually  something like: 'In  a message
                            xxx wrote to yyy'. This will be referred to  as
                            the 'rephello string'.

          FOLLOWHELLO :     This defines the string to  start what to start
                            a   'follow-up'  (created  by  pressing  ALT-O)
                            message with.

          *Always*  put the  'hello', 'followhello'  and 'rephello' strings
          between double quotes.

          There are several  'variables' that  can be  used in this  string
          (and in the 'rephello' and 'followhello' strings as well):

          %to    :    The  full name  of  the person  that  the message  IS
                      addressed  to  (for  a  new  message)   or  that  the
                      original WAS addressed to (for a  reply, the REPHELLO
                      keyword).
          %fto   :    As %to, but only the first name of that person.
          %thisto:    name of person *this message* is addressed to 
          %thisfto:   first name of person *this message* is addressed to 


                                           timEd v1.30 manual - page 109



          %from  :    The full name  of the person  who wrote the  original
                      message  (in the  case  of a  reply, so  the REPHELLO
                      keyword). In the case of a new message this  would be
                      the name of  the person who  wrote (writes) this  new
                      message (but that, of course, is you yourself :-)
          %ffrom :    As %from, but only the first name of that person.
          %thisfrom:  name of person *this message* is from (your name)
          %thisffrom: first  name of  person *this  message* is  from (your
                      first name) 

          %subj  :    Subject of the message

          %orig  :    Address   of   the  sender   of  the   message  (like
                      2:281/527)
          %dest  :    Address  of  the  recipient  of  the   message  (like
                      2:281/527)

          %time  :    Time the message was written (like 01:25)
          %year  :    The year the message was written (like 1993)
          %mon   :    The  month  the message  was written  (like  jan, feb
                      etc)
          %mmon  :    The two-digit month with a leading zero digit
                      (ie. 01-12)
          %day   :    The day of the month msg was written (a number)
          %dow   :    The 'day  of week'  msg was  written (like  mon, tue,
                      wed etc)

          An example to clear up things:

          Let's  say I'm writing a message to Scott Dudley, so that's a new
          message,  and the 'HELLO' keyword would  be of significance here.
          The header would look like this:

          -=-

          From: Gerard van.Essen
          To  : Scott Dudley
          Subj: Your MSGAPI

          -=-

          In this case, %to == 'Scott Dudley' and %fto == 'Scott'.

          If my timEd.cfg has:

          hello           "Hello %to!"

          My message would be started with:

          Hello Scott Dudley!

          Of  course, because  we treat  everyone like  our best  friend in
          Fidonet, I have:


                                           timEd v1.30 manual - page 110




          hello           "Hello %fto!"

          As a result, my message will start with:

          Hello Scott!


          Right,  that's the  'hellostring'. Now, let's  say Scott receives
          my message, and decides to  write something back. This will  be a
          reply, so the 'rephello string' will be used.

          Looking  at  our message  again (the  same  one, as  this  is the
          message Scott is answering..):

          -=-

          From: Gerard van.Essen
          To  : Scott Dudley
          Subj: Your MSGAPI

          -=-

          In this case,  %to == 'Scott Dudley'  and %fto == 'Scott',  %from
          == 'Gerard van.Essen" and %ffrom == 'Gerard'

          Now if Scott uses timEd, *and* he has this in his timed.cfg:

          rephello        "%from wrote in a message to %to:"

          His reply would start with:

          Gerard van.Essen wrote in a message to Scott Dudley:

          And he can start typing..


    HUDSON_OFFSET

          Multi-user  support  for lastread  pointers  in  Hudson bases  as
          well:  use  the  Hudson_Offset  keyword  to   specify  offset  in
          lastread file. First user (and default) is offset 0. 

          If you use the same base  with more than one user, give one  user
          Hudson_Offset 0, someone else Offset 1 etc.

          Be  aware,  though,  that  BBS  systems  also  use space  in  the
          lastread file.  Make sure that  your setting does not  clash with
          the offset of some BBS user!

          Example:

          Hudson_Offset 2



                                           timEd v1.30 manual - page 111



    HUDSONPATH

          This will  tell timEd where  your Hudson base is  located. If you
          don't have a Hudson  base, this keyword  is not needed (in  fact,
          in that case it is even better if you leave it out!).

          In    this    directory,    timEd   will    also    create    the
          ECHOMAIL/NETMAIL.BBS files, that will signal to  the tosser which
          new messages  were entered. With this  file, the scanner can very
          quickly export new messages.

          Example:

          Hudsonpath c:\fd\msgbase


    INCLUDE

          With this keyword, you can include another file in the config. 

          If you like to change between different coloursets, for  example,
          you  can easily  switch  between them  by putting  them into  two
          files (like set1.col and set2.col) and putting 

          'Include c:\timed\set1.col' 
          or
          'Include c:\timed\set2.col'

          in your config.

          This feature  comes  in  very handy  when  you use  Dick  Pluim's
          colour configuration program for timEd!

          Format:

          Include <path+filename>

          Example:

          Include c:\timed\myareas.lst


    INTERNET_EMPTY_LINE

          Syntax: Internet_Empty_line <Yes | No> 
     
          This controls whether timEd will leave an empty line between  the
          'TO:' on the first line  in the message body, and the rest of the
          body (for message addressed to an internet address).
     
          The default  for this is  "yes". In some  (rare) cases the  empty
          line  is unwanted, in that  case this  should be set  to 'No'. If
          you're not sure, make this 'Yes'! 



                                           timEd v1.30 manual - page 112



    INTLFORCE

          Format: INTLFORCE <Yes|No>. 

          With  this  set to  'yes',  *all* netmail  messages  generated by
          timEd  will  have an  INTL  kludge  (instead of  only  inter-zone
          messages). 
          In some environments this seems to be necessary. Do  not use this
          unless you really need it! 


    JAMLOG

          Where to put ECHOMAIL.JAM and NETMAIL.JAM files. If you have  any
          JAM  echomail/netmail  areas,  these  files will  signal  to  the
          tosser which  new  messages were  entered.  With this  file,  the
          scanner can very quickly export new messages.

          With the  current version of RA  (2.01) and Fastecho (1.30), this
          file should be  put in the  directory that also holds  the Hudson
          base.

          If you  leave out this  keyword, but have  JAM areas anyway,  the
          JAM  areas  where new  mail was  entered  will be  added  to your
          echotoss.log  file.  This  is  useful  for tossers  that  do  not
          support the special echomail/netmail.jam files (like Imail).


          Example:

          Jamlog c:\fastecho\msgbase\


    JAMGETLAST

     
          Syntax: JamGetLast <Yes|No> 
     
          Determines whether  timEd will get the  LAST read or HIGHEST read
          message  from JAM lastread files.  Useful for  Proboard users (PB
          doesn't  update  the  lastread  pointer, only  the  highest  read
          pointer, so set it to NO). 


    JAM_ZONEGATE_BIT

          This controls whether  or not  timEd uses  the 'MSG_GATE' bit  in
          JAM netmail areas (for a zonegated message).

          If your tosser supports it  (at the time of writing, it  is known
          that GEcho 1.11 will support it), set this to yes.
          What happens  is that timEd  will just  set this  bit in the  JAM
          message (and do nothing else with it), if you  tell timEd to make
          an inter-zone message zonegated.  The tosser will recognize  this


                                           timEd v1.30 manual - page 113



          bit,  and do  the re-addressing  of the  message to  the zonegate
          etc.

          If you set this  to 'No', timEd will  use another method to  make
          the  message zonegated.  Chances are,  your tosser  will  work OK
          with this (at this  time, Fastecho 1.40 is  an example of such  a
          tosser), but  this is  definitely not guaranteed,  as this method
          is  quite  strange   (due  to  the  JAM   structure  and  timEd's
          implementation of it).


    JUMPY_EDIT

          This keyword  controls timEd's  behaviour when you  have to  edit
          one field  (i.e.: not  the internal  editor!). For example,  when
          you want  to  write a  message  to file,  you  have to  give  the
          filename. You can do that  in an entry field, where you  can edit
          the  filename  to  write   to.  This  keyword  controls   timEd's
          behaviour in such fields.

          When editing  a field with a default already filled in, timEd can
          now  clear the string when  the first  key you press  is a normal
          character (and not  a movement  key, for  example). This is  what
          Qedit does, as do many setup programs (FDsetup, Gsetup etc). 
     
          I consider  this to be  'jumpy' behaviour  (where the h*ll  is my
          default string?), so it is controlled by a this keyword: 
     
          Jumpy_Edit <Yes|No>. 
     
          If you set this to 'Yes', the field will be cleared  if you press
          a non-edit key as the first key.

          Please  note, that if you  set this  to 'No', you  can always use
          CTRL-Y to clear the entire field in one stroke!


    Kill_Original.

          Format: Kill_Original < Yes | No | Ask >

          This controls  whether you want timEd  to delete a message, after
          you  wrote a reply to it. (This is only functional in the netmail
          area). You can use this to keep your netmail area clean.


    LASTREAD

          TimEd supports multiple lastread  pointers. This is necessary  if
          you  are  not the  only  one using  timEd  on 1  machine  (as the
          lastread pointers  would have to be  shared by 2 (or  more) users
          then).




                                           timEd v1.30 manual - page 114



          If  you are the  only one using  the message base,  or if you are
          the SysOp (and are  consequently occupying the first position  in
          the lastread file) you do not need this keyword.

          This is usually  the case, so most people don't need this keyword
          at all.

          With this  keyword, you  can give the  name of the  lastread file
          for *.MSG areas. The default is "lastread".

          Example:

          LastRead lastrea1


    LEVELONEOUTPUT

          Syntax: LevelOneOutput <charset> [<charset> [<charset>]] 
     
          This indicates that a certain character translation  map (as used
          for the 'charset support', FSC-0054) produces level 1 output. 
     
          The LevelOneOutput  keyword gives  you the opportunity  to use  a
          level 2  character  map  with timEd,  but  to indicate  that  the
          output is actually a level 1 message. 
     
          So if you add 'LevelOneOutput  SWEDISH' to timEd.cfg, timEd  will
          use the  level 2  SWEDISH character map,  but will  add a  'CHRS:
          SWEDISH  1' kludge  to   the message.  Make absolutely  sure that
          output is indeed level  1 (and that level  1 maps, to remap  your
          message back to what it should be, actually exist!). 
     
          You  may add more  than one  name on one  line for  this keyword,
          like this: 
     
          LevelOneOutput Swedish AnotherCharset 
     
          You may also add this keyword more than once in timEd.cfg. 


    LOCALAREA

          See 'ECHOAREA'.


    LOWLEVELKB

          This keyword can  switch on  the 'low  level' keyboard  routines.
          With  these  routines,  timEd   will  recognize  the  ASCII   224
          character.   In  addition,   timEd  will   ignore   any  keyboard
          redefinitions caused by ANSI-driver keyboard programming. 
          The  disadvantage  is,  that  is  may cause  some  TSR's  to stop
          working  (or  even  lock  up  the  machine!).  Some  people  also
          reported  random lockups  using these  routines, and  other weird


                                           timEd v1.30 manual - page 115



          problems (timEd waiting for a keypress during a mass-move in  the
          List mode, for example).

          On the author's machines,  the routines never gave  any problems,
          though. If you have strange problems, try to switch this off. 


          Values can be  'Yes' (use  Low Level  routines, the default),  or
          'No' (don't use).


    MACRO

          Macros  can save  you typing  names and  addresses of  people you
          regularly send mail to.

          It works like  this: in a  netmail message, you  enter a  (short)
          name,  that  was   also  listed  in  timed.cfg  using  a  'macro'
          statement. TimEd will recognize this statement  and expand it for
          you, saving  you a  lot  of typing.  This may  include the  'to:'
          field, the address the message is sent to, and the subject.

          Examples:

          macro am,areamgr,2:281/520,my_pass

                When you enter 'am' in the 'to:' field, timEd  will replace
                it with 'areamgr', and fill in  the address (2:281/520) and
                subject (my_pass)  lines for you.  So, a  total of 3  items
                were listed after the macro name.

          macro et,Erik Troost,2:281/527.2

                This  will expand to 'Erik  Troost' with the address filled
                in. That's 2 items after the macro name.

          macro rvdn,ROn van der Nagel

                This  will only  expand  the macro  (rvdn) to  ROn  van der
                Nagel. Only 1 item listed behind the macro name.


          Note  that spaces  are  allowed in  a macro  statement. They  are
          never stripped, so don't put them were you don't want them!

          Also note that timEd doesn't default to anything  when a macro is
          used, as far  as addresses  are concerned.  So you should  always
          give  full  4D  addresses  in  macros  (so *not*  "macro  et,Erik
          Troost,281/527.2",  because  that   will  lead  to  the   address
          0:281/527.2!).

    MAILAREA

          See EchoArea.


                                           timEd v1.30 manual - page 116




    Move_Notes

          Format: Move_Notes <Yes|No>. 

          This controls whether timEd will put "Moved / Copied (from:  xxx)
          by xxxxx using timEd"  at the top of a message that  was Moved or
          Copied using ALT-M. 
     
          Please  note  that  FORWARDED  messages will  _always_  have  the
          message. 
     
          Messages Copied or  Moved using  the L)ist  mode will never  have
          the message at the top. 


    NAME

          Type your name  (and optionally  aliases, just  put in more  NAME
          keywords) here.  The NAME  will  be used  in the  FROM: field  of
          every message you write.

          The  aliases  will be  used as  extra names  to  look for  in the
          personal mail scan (ALT-P from the area selection menu, {+}).

          While  in a message area, you can  also pick one of your names to
          write  messages with.  Press CTRL-N to  change the  username from
          within  timEd. The  default is  to use  the first  NAME  found in
          timEd.cfg.

          *Always* put the name between double quotes.

          Example:
          name       "Gerard van.Essen"
          name       "Gerard van Essen"


    NETAREA

          See 'ECHOAREA'.


    NETMAIL_SEMAPHORE

          Format: Netmail_Semaphore <path+filename> 
     
          This can be used to  configure a file to be created  (or touched)
          when  netmail  is  generated.   For  frontdoor  this  should   be
          fdrescan.now in the frontdoor directory. 

          You  can use  this  file  to give  a  signal to  another  program
          (usually  your  mailer)  that  your netmail  area  changed.  That
          program can then rescan the netmail area.
     


                                           timEd v1.30 manual - page 117



          Example:

          Netmail_Semaphore c:\fd\fdrescan.now 


    Netmail_Tearline

          Format: Netmail_Tearline <Yes|no>. 

          This controls  whether netmail messages  will have a tearline  or
          not.  Tearlines are  not required  in netmail  messages, although
          some programs (usually  areafix alike  programs) use  it to  find
          the end of the message body. 


    NEWSAREA

          See Echoarea.


    NODELIST

          This tells timEd where it can find a Version  7 nodelist (used by
          BinkleyTerm and Portal of Power, for example).

          The nodelist  is very  useful  when entering  netmail: timEd  can
          look for addresses and SysOp names  in the nodelist, to find  the
          corresponding  data of  that  node. (So,  when  entering a  name,
          timEd will try  to find  the address,  when entering an  address,
          timEd will try to find the SysOp's name..).

          The Version 7 nodelist can be produced by several programs,  like
          Xlaxnode, FastV7, Qnode and Fastlist.
          TimEd needs the files called SYSOP.NDX, NODEX.NDX and NODEX.DAT.

          When  looking up  a SysOp-name,  timEd will  try to  locate *all*
          matches for the  (part of  the) name  entered. So,  if you  enter
          'Essen',  it  might  find both  'Gerard  van  Essen' and  'Martin
          Essenburg'.

          If  you use Qnode, and put  'Keep Allusers' in qnode.cfg, you can
          even get  the same SysOp  more than once, and  pick one  of their
          addresses (HUBs  etc. often  have more than  one address). Recent
          versions of 'Fastlist' and FastV7 have the same capability.

          Example:

          nodelist    C:\Binkley\Nodelist








                                           timEd v1.30 manual - page 118



    NOSPACE_PASSWORD

          Syntax: NoSpace_Password <Yes|No>

          This  controls  whether  timEd  will  add  a  space  between  the
          filename and  the password in the  subject line for file requests
          (not applicable for JAM style areas).

          Squishmail  (the echomail  processor) wants no  space between the
          filename   and   the   password,   while    most   (all?)   other
          implementations _do_.

          The  subject  line  of  a  file  request  message  for  the  file
          'tim101.zip' with the password 'secret' will look like this:

          Subj: tim101.zip!secret

          with 'NoSpace_Password Yes', and like this:

          Subj: tim101.zip !secret

          with 'NoSpace_Password No' (this is the default).

          If  you are  not  using the  Squishmail  echomail processor,  and
          unsure what to  use, simply  leave the  keyword out. The  default
          ('No') will be applicable in most cases.

          If   you   use    the   Squishmail   echomail   processor,    use
          'NoSpace_Password Yes'.


    ORIGIN

          This  tells timEd  what  the default  origin is.  This line  will
          appear at the bottom of every echomail message you write.

          You can override this  default on a  per area basis (by  pressing
          ALT-H in timEd, while you are in a message area).
          *Always* put the origin between double quotes.

          origin    "   Contrast BBS, 070-3234903 [V22..32bis]   "


    Personal_Skip_Received. 

          Format: Personal_Skip_Received <Yes | No>

          This is for the personal mailscan (ALT-P). 
          When this  is  set  to 'Yes',  personal  messages that  have  the
          'received' status will  be skipped by the  personal mailscan  (so
          you only see unread messages). 

          When this is  set to 'No',  the personal mailscan will  also show
          messages with the received status. 


                                           timEd v1.30 manual - page 119



     
          Please note that the personal mailscan always  starts scanning at
          the lastread pointer, regardless of this setting. 

          {+}  The  personal  mailscan  is only  functional  in  registered
          versions.


    PRINTER

          Here you can  tell timEd what port  your printer is  attached to.
          When using  ALT-P from the message  reading or list screen, timEd
          will  send the  message to what  is listed here.  The default (if
          you don't put this in timEd.cfg) is LPT1.

          Note for  Novell Lite users: NWLite  seems to be  unable to catch
          timEd's printer output.  However, if you specify  'stdprn' as the
          printerport, NWLite *will* catch it.

          Example: Printer LPT2


    READLOCALAREAS

          This keyword can let timEd read areas marked as local  areas from
          your tosser configuration files. 
          If you set this  to 'Yes', timEd will  read those areas, if  this
          is set to 'No', local areas will be ignored  and will not show up
          in the arealist.


    READNETAREAS

          This keyword can  let timEd  read areas  marked as netmail  areas
          from your tosser configuration files. 
          If you set this  to 'Yes', timEd will  read those areas, if  this
          is set to  'No', netmail areas will be ignored  and will not show
          up in the arealist.


    REPHELLO

          See 'HELLO'.


    Show_Edit_HCR

          This defines  whether timEd will  show the 'hard returns'  in the
          internal  editor. If  this is  set to  'Yes',  timEd will  show a
          special symbol  at  the  end  of every  line  that  has  a  'hard
          return'.
          This is  only the  startup value,  when you  are in the  internal
          editor, you can toggle this setting with ALT-H!



                                           timEd v1.30 manual - page 120



          Example:

          Show_Edit_HCR Yes


    SHOWKLUDGES

          This  tells timEd if  you want to see  the control information in
          the messages by default (or not..).
          For  this purpose,  'kludges' includes real  kludges (like MSGID,
          REPLY, PID, PATH etc.) but also SEEN-BY lines.
          This is the setting at startup, you  can toggle this setting from
          within timEd by pressing ALT-K or ALT-V when reading a message.

          Example:

          Showkludges Yes


    SIGNOFF

          This tells  timEd  what should  be  placed at  the  end of  every
          message. Most  people always use  the same 'signoff', so  why not
          let timEd do it for you..
          *Always* put the 'signoff' message between double quotes.


          Signoff         "Groetjes, .......   === Art ==="


          In  addition, you  can also  use \n  in a  string, to  indicate a
          newline. So:

          signoff  "Greetings,\n                Gerard"

          expands to something like:

          -=-

          Greetings,
                        Gerard
          -=-
          Note, however, that strings longer than +/- 70  characters cannot
          be edited from within timEd (with ALT-H).


    SQOUP2SQCFG
     
          This option  defined the location and  name of the SOUP2SQ config
          file. Soup2SQ  is a program written by Steven  van Loef, that can
          convert SOUP packets (Usenet/Internet style mailbag,  like QWK or
          Blue Wave) to Squish style message areas and v.v. 

          Syntax: Soup2SQCFG <path+name of config file>


                                           timEd v1.30 manual - page 121




    SPELLCHECK_DEFAULT

          Syntax: SpellCheck_Default <Yes|No> 
     
          When this is  set to 'yes', timEd will by default check the 'Run 
          Spellchecker' box when editing the header of a new message. 


    SQUISHCFG

          TimEd can read  the Squish.cfg  (current version: 1.10)  for you,
          and get  all EchoArea lines  from that  configuration. Note  that
          that Netmail, bad_msgs  and dupes  are not  read by default;  add
          'ReadNetAreas Yes' and/or  'ReadLocalAreas Yes' to your timEd.cfg
          file to let timEd read those areas as well.

          -P switches found in Squish.cfg will be recognized and used  when
          creating a message.

          Give  full path and name of the  file. If it contains an AreasBBS
          statement, the areas.bbs file will be read as well.

          Squishcfg c:\squish\squish.cfg


    Squish_Offset

          This  is  the  equivalent of  'LastRead',  but  for Squish  style
          areas.

          You  must give a  number, that  is the  position of  the lastread
          pointer in the *.SQL  file (for Squish areas). For the first user
          this is 0 (which is the default). If you are the second user  you
          should set this to 1,  if you're the third user you should set it
          to 2, etc.

          Again: most people do *not* need this.

          Example:

          Squish_Offset 1

          This would let timEd  use the second lastread pointer in the .SQL
          files  (Squish_Offset  0   would  be  the  first,  which  is  the
          default).


    Startup_Lines

          This controls  the videomode, the  number of rows on  the screen.
          This mode will be  set on startup of  timEd. The values that  are
          allowed depend on the timEd version and mode: 
       


                                           timEd v1.30 manual - page 122



          DOS: 25, 28, 50. 
       
          OS/2 fullscreen:  try it and you'll  know (depends on videocard),
          in addition to the above, 30 and 40 or 45 may work. 
       
          OS/2 window: anything from 25-60 AFAIK (different fonts). 


    STARTUP_MODE

          This  determines the  default mode  ('view') timEd  will have for
          showing your  areas (Area Selection Screen).  The mode can always
          be changed from the Area Selection Screen by pressing ALT-M,  but
          this keyword sets the default at startup.

          Use either  'All' (show all  areas), 'New' (show only  areas with
          new  mail) or 'Tagged'  (show only  tagged areas)  or 'NewTagged'
          (show only tagged areas that hold new mail).

          Example:

          Startup_Mode NewTagged


    STARTUP_SCAN

          This  determines whether  the message areas  will be  scanned for
          new  mail at startup (value: Yes or No) or even for personal mail
          (value: Personal {+}).

          So, use either 'Yes', 'No' or 'Personal'.

          Example:

          Startup_Scan Yes


    SWAP_ON_EDIT, SWAP_ON_SHELL

          These  two statements  determine timEd's behaviour  when it calls
          other programs.

          There are two options:


          Yes : Swap  timEd  out of  main  memory  when calling  the  other
                program.  This will only leave about  250 bytes of timEd in
                main memory, thus making available a lot of memory  for the
                other program to run in.

          No  : Don't swap timEd out, load the other program in  the memory
                remaining, with timEd still in memory.




                                           timEd v1.30 manual - page 123



          The  second  option  takes  up  more memory,  but  is  faster (no
          swapping has to  take place). TimEd will  be swapped to XMS,  EMS
          or to Disk if no  XMS/EMS is available. Swapping to disk is quite
          slow, of course..

          Swap_on_Edit:     Determines whether  timEd is  swapped out  when
                            the editor is called to edit a message. This is
                            done often,  of course (especially if you write
                            a lot of mail :-), so if you have enough memory
                            to hold  both timEd  and the  editor in  memory
                            (and this  is usually  the case),  I would  set
                            this to 'No'.



          Swap_on_Shell:    Determines  whether timEd  is swapped  out when
                            shelling to DOS, and when executing an external
                            program  by using  the  ALT-U feature  (message
                            base maintenance). Usually  speed is not really
                            important here, while lots  of available memory
                            can be very useful, so it might be  a nice idea
                            to set this to 'Yes'.


    USENETMACRO

          There is  also another type of  macro's: USENETMACRO.  This works
          very  similar to  a 'normal'  macro, but  you can  also  supply a
          'usenet  style' name,  that will  be placed  in the  body of  the
          message (TO: art@beard.next.nl for example). 

          The format is as follows:

          USENETMACRO macro,Usenet_address,toname,[toaddress],[subject]

          The last two items are optional.

          Note  that spaces  are  allowed in  a macro  statement. They  are
          never stripped, so don't put them were you don't want them!

          Usenet_address should be an address like art@beard.nest.nl.
          Toname  should be  the name  to be  filled in  in the  TO: field.
          Usually,
          this will be 'postmaster' or 'uucp'. Toaddress is the address  to
          send  the message  to,  usually the  address of  your Usenet  <->
          Fidonet gate.

          An example:

          My  Usenet <->  Fidonet gate  is 60:60/0,  and I  want to  send a
          message  to art@beard.nest.nl  (why  would I  send  a message  to
          myself? :-). 
          A macro could be:



                                           timEd v1.30 manual - page 124



          Usenetmacro au,art@beard.next.nl,postmaster,60:60/0

          When  entering a message,  I can  now just type  'au' in  the TO:
          field, and timEd will  automatically fill in 'postmaster'  in the
          TO: field, 60:60/0 in the to-address  field, and leave me at  the
          subject field.

          When I  start to edit  the body, 'TO: art@beard.nest.nl'  will be
          placed at the top of the message.


    UUCPADDRESS
     
          Syntax: UucpAddress <address> 

          This defines the address of your  Internet gate. This is used  by
          timEd to  readdress messages that are entered, and  have a '!' or
          '@' in  the address  and therefore  seem to be  destined for  the
          internet.

          Example:  UucpAddress 2:281/527.999


    UUCPNAME

          Syntax: UucpName <name>

          This  is   the  name  used  for   the  gate  (usually  'UUCP'  or
          'Postmaster'), which will be combined with UucpAddress. 


    V7MODEMTYPEBIT

          Syntax:  V7ModemTypeBit <bit value> <flag> 

          This  keyword  control translation  of  values  of the  ModemType
          field  in a  Version 7  nodelist to  alfanumeric nodelist  flags,
          that can be shown by timEd.

          Example: V7ModemTypeBit 64 V34 
     
          The  'bit value' must be a power of  2 (i.e.: 1, 2, 4, 8, 16, 32,
          64 or 128). 

          The above  example indicates  that if  the  bit representing  the
          value 64 is set, the 'V34' flag is present. 

          See the  special section about  the V7 nodelist support  for more
          information.







                                           timEd v1.30 manual - page 125



    V7MODEMTYPEVALUE
     
          Syntax:  V7ModemTypeValue <byte value> <flag> 

          This  keyword  control translation  of  values  of the  ModemType
          field  in a  Version 7  nodelist to  alfanumeric nodelist  flags,
          that can be shown by timEd.

          Example: V7ModemTypeValue 13 V34 
     
          This would indicate, that  if the 'ModemType' field is set to 13,
          the node has the 'V34' flag in the nodelist. 

          See the  special section about  the V7 nodelist support  for more
          information.


    V7NODEFLAGBIT

          Syntax:  V7NodeFlagBit <bit value> <flag> 

          This  keyword  control translation  of  values  of the  ModemFlag
          field  in a  Version 7  nodelist to  alfanumeric  nodelist flags,
          that can be shown by timEd.

          Example: V7NodeFlagBit   16  CM 

          This indicates,  that if the bit that represents  the value 16 is
          present, the CM flag is present for that node. 

          See the  special section about  the V7 nodelist support  for more
          information.


    WRITENAME

          Here you  can give the default  filename the ALT-W (write message
          to  file) function  will  write to.  When actually  writing to  a
          file,  you can of course edit this  to be anything you want (this
          is  just the default). You can also put PRN (or similar) in here,
          to write to a printer.

          Example:

          WriteName c:\timed\timout.txt

          You can  enter this statement more  than once in timEd.cfg. TimEd
          will remember all of  them. When prompted to enter  a filename to
          write the message to,  you can press <TAB>  to get a list of  all
          names that  were defined here,  scroll through the list  with the
          cursor keys and pick the appropriate one.

          The 'variables'  that can  be  used for  external programs  (like
          [areatag], [msgno]  etc) can also be  used when entering the name


                                           timEd v1.30 manual - page 126



          of a  file  to write  a  message to.  This  allows you  to  write
          messages to files called  'artware.msg', or 'artware.100' and  so
          on. 


    WTRGATECFG

          TimEd can  read  the Watergate  area file  for you,  and get  all
          echomail  areas  from  that  configuration.  Note  that  Netmail,
          bad_msgs and  dupes are  not read  by default; add  'ReadNetAreas
          Yes'  and/or 'ReadLocalAreas  Yes' to your  timEd.cfg file to let
          timEd read those areas as well.

          Different AKA's used  for message areas in  your WaterGate  setup
          will be recognized and used when creating a message.

          Give full path and name of the main config file.


    XMAILCFG

          TimEd  can read  the xMail  area file  for you  (current version:
          1.00),  and get all echomail areas  from that configuration. Note
          that Netmail, bad_msgs  and dupes  are not  read by default;  add
          'ReadNetAreas  Yes' and/or 'ReadLocalAreas Yes' to your timEd.cfg
          file to let timEd read those areas as well.

          Different AKA's  used for message areas  in your xMail setup will
          be recognized and used when creating a message.

          Give full path and name of the file AREAS.XM

          xMailCFG c:\xmail\areas.xm


    ZoneGate

          Format: ZoneGate <Yes | No | Ask>

          It works  as one would  expect: when  this is  set to 'No'  timEd
          won't do any zonegating, if  it is set to 'Yes' it  will zonegate
          all inter-zone messages,  and if it  is set to 'Ask',  timEd will
          ask whether it should zonegate or not..

          If you  use Binkley with Squish,  you can also let  Squish handle
          it (that's what I do).

          Whether or not you need zone-gating depends on the software  used
          by  the node that  actually sends the  messages from  one zone to
          another. Check with your Boss, HUB, Host or who-ever knows.






                                           timEd v1.30 manual - page 127



    13.  Miscellaneous notes.


    13.1  Multitasking considerations.

    Screen handling.
    ----------------

    DOS version:  TimEd uses direct  screen writes (either to  the physical
    screen,  or to the DESQview  virtual screen). There  is no special code
    to prevent 'snow' on older CGA displays.

    OS/2 version: timEd uses the VIO subsystem for screen writes.


    Performance.
    ------------

    DOS: 

    TimEd will give  up timeslices  to DESQview, Windows  and the OS/2  DOS
    box (although  it would be  much better  to use  the OS/2 version),  if
    applicable. This  means timEd will have  no noticeable impact on system
    performance when it is idle (which is most of the time).


    OS/2:

    What? This is an  OS/2 app! Of course  it doesn't suck time  from other
    tasks!!


    File locking/sharing.
    ---------------------

    DOS:

    File locking is only active if timEd successfully  locked a file in the
    timEd directory (either the  current dir or the one specified by the -c
    command-line switch).

    OS/2:

    File locking/sharing is always active.


    13.2  Some things to remember.


    ş With  the  OS/2  version, spawning  E.EXE  or EPM.EXE  directly  from
    timEd/2 doesn't  work. Using a batchfile  (with "E.EXE %1" as  the only
    contents) works OK...




                                           timEd v1.30 manual - page 128



    13.3  Technical notes.

    TimEd  is written  Watcom C/C++  v10.0a (for  all versions),  and makes
    extensive use  of Scott Dudley's  MSGAPI (thanks Scott!). It  also uses
    small parts of the JAM  message base API (made by Mats  Wallin, Joaquim
    Homrighausen, Andrew Milner and Mats Birch).

    It was developed on  a 10 Mhz 286  (most of the time, during  the early
    stages of development), and  for a while on a 386-40 running OS/2 (also
    running  my  BBS) but  even  OS/2  couldn't  protect  the BBS  from  my
    programming skills  (...), causing lockups and  even reboots, so I went
    back to the 286..
    After  that, development  has taken  place on  a 386-40  again (running
    OS/2) and recently on a Pentium  100 with 32 MB running either  OS/2 or
    WIN95  (depending on my mood). The PC also runs Linux occasionally, but
    I don't do any programming under Linux.


    13.4  TimEd source code

    Not available.



































                                           timEd v1.30 manual - page 129



    14.  A list of all available commands

    Commands available from the Area Selection Screen:

    AStag              -    Tag currently highlighted area 
    ASsetview          -    Choose 'view' on areas (all, tagged etc)
    ASup               -    Move highlighted bar one area up
    ASdown             -    Move highlighted bar one area down
    AShome             -    Move highlighted bar to first area
    ASend              -    Move highlighted bar to last area
    ASpageup           -    Move highlighted bar one page up
    ASpagedown         -    Move highlighted bar one page down
    ASshell            -    Shell to the operating system
    ASscanthorough     -    Reccan all areas, even if scanned before
    ASscan             -    Scan all areas that were not scanned before
    ASscanpersonal     -    Do a personal mailscan {+}
    AStagsetwrite      -    Write current  selection of  areas (tagset)  to
                            disk
    AStagsetread       -    Read a previously saved selection of areas from
                            disk
    ASexit             -    Exit timEd
    ASlist             -    Enter currently highlighted area in List mode
    ASenter            -    Enter currently highlighted area
    ASquit             -    Quit current  screen (Area  Selection during  a
                            forward or move for example)
    AShelp             -    Show helpscreen

    Commands available from the message reading screen:

    READup               -  Scroll text one line up
    READdown             -  Scroll text one line down
    READbegtext          -  Scroll to start of text
    READendtext          -  Scroll to bottom of text
    READpageup           -  Scroll message one page up
    READpagedown         -  Scroll message on page down
    READnext             -  Go to next message
    READprevious         -  Go to previous message
    READfirstmsg         -  Go to first message in area
    READlastmsg          -  Go to last message in area
    READfind             -  Go to the search manager screen
    READlist             -  Go to list mode
    READbroadlist        -  Go to list mode, broad list of headers
    READedithello        -  Edit 'hello strings'.
    READexit             -  Exit timEd
    READdelete           -  Delete current message
    READwrite            -  Write current message to a file
    READprint            -  Print current message
    READmove             -  Show move/forward/copy menu
    READmarkchain        -  Mark all messages in current reply chain
    READreply            -  Reply to current message
    READfollowup         -  Do a reply to the recipient of current message
    READturboreply       -  Do a fast reply (without header editing)
    READshell            -  Shell to operating system
    READgoback           -  Go back to area selection screen


                                           timEd v1.30 manual - page 130



    READfreqfiles        -  Generate a file  request out of files  found in
                            current message
    READenter            -  Enter a new message
    READreplyother       -  Write reply to current message, in another area
    READchange           -  Change current message
    READchangeheader     -  Change header of current message
    READchangeattributes -  Change attributes of current message
    READunreceive        -  Set received bit for current message off
    READbouncereply      -  Write a 'bouncereply' with full kludges
    READmark             -  Mark current message
    READinfo             -  Show information about current message and area
    READchangeaddress    -  Change current  default address to use  for new
                            messages
    READchangename       -  Change current default username to  use for new
                            messages
    READtogglekludges    -  Toggle display of kludges.
    READmaintenance      -  Show user defined maintenance menu
    READnextareanewmail  -  Go to next area that has new mail
    READprevareanewmail  -  Go to previous area that has new mail
    READnextmarked       -  Go to next marked message
    READprevmarked       -  Go to previous marked message
    READnextmsgorpage    -  Show next page of message, or show next message
                            if the current message has no next page
    READgotoreply        -  Go to reply to current message
    READgotooriginal     -  Go to original message, that current message is
                            a reply to.
    READgotonextreply    -  Go to next reply (JAM areas only)
    READsetbookmark      -  Set a bookmark on current message
    READreturnbookmark   -  Go back to an earlier generated bookmark
    READlookuporiginaddress Nodelist lookup of origination address
    READlookuptoname     -  Do  a  nodelist  lookup  on  the 'to'  name  of
                            current message
    READlookupfromname   -  Do a nodelist lookup on  'from' name of current
                            message
    READhelp             -  Show help screen
    READchangecharset    -  Change default  charset  to  use  for  messages
                            without a CHRS: kludge
    READrunexternal      -  Run an external program from within timEd
    READsearchcurmsg     -  Highlight keywords in current messages
    READwritebody        -  Write the body (so no header) out to file 
    READwriterealbody    -  Write the  real body (without  tearline/origin)
                            to file
    READwriteheader      -  Write only the header to a file
    READsqundelete       -  Undelete messages in a Squish area
    READsdmrenumber      -  Renumber a *.MSG area
    READchangecharset    -  Choose a character  set to  use when reading  a
                            message
    READfiledelete       -  Delete a file, from message reading screen. 
    READfiltermsg        -  Zap the entire message body  and replace with a
                            file
    READfilterrealbody   -  Zap the real  body of a message  (so this saves
                            the tearline  / origin)  and replace  with text
                            from a file



                                           timEd v1.30 manual - page 131



    READfiltermemory     -  This functions like 'READfilterrealbody' but it
                            will only replace the message body in memory


    Commands available from the internal editor:
     
    EDITbegline        -    Goto beginning of current line
    EDITendline        -    Goto end of current line
    EDITbegtext        -    Goto beginning of text
    EDITendtext        -    Goto end of text
    EDITbegpage        -    Goto beginning of currently visible page
    EDITendpage        -    Goto end of currently visible page
    EDITup             -    Move one line up
    EDITdown           -    Move one line down
    EDITright          -    Move one character to the right
    EDITleft           -    Move one character to the left
    EDITenter          -    Goto new line, one line down
    EDITdel            -    Delete character under the cursor
    EDITback           -    Backspace, delete character left of cursor
    EDITtab            -    TAB, move 3 positions to the right
    EDITbacktab        -    BackTAB, move 3 positions to the left
    EDITpageup         -    Move one page up
    EDITpagedown       -    Move one page down
    EDITtoggleinsert   -    Toggle insert mode
    EDITabort          -    Quit editing session
    EDITsave           -    Save current text
    EDITshell          -    Shell to operating system
    EDITimportfile     -    Import a file from disk
    EDITdeltoeol       -    Delete everything to end of current line
    EDITmarkblock      -    Set border of a block
    EDITunmarkblock    -    Unmark a previously defined block
    EDITdelblock       -    Delete a marked block of text
    EDITcopyblock      -    Copy a marked block of text
    EDITmoveblock      -    Move a marked block of text
    EDITzapquotes      -    Delete all quoted lines till end of text
    EDITdupline        -    Duplicate current line to line below
    EDITeditheader     -    Edit header of currently edited message
    EDITdelwordright   -    Delete word right to cursor
    EDITdelwordleft    -    Delete word left to cursor
    EDITunerase        -    Undelete lines from undelete buffer
    EDITjumpwordright  -    Jump one word right
    EDITjumpwordleft   -    Jump one word left
    EDITdelline        -    Delete current line
    EDIThelp           -    Show helpscreen
    EDITtogglehcr      -    Toggle display of 'hard returns' in editor
    EDITfiledelete     -    Delete a file, from internal editor 
    EDITrunexternal    -    Run  an  external  program  from  the  internal
                            editor
    EDITsavemenu       -    Save  the text that is edited to a message, but
                            go through the 'EditSaveMenu' first
    EDITwriteraw       -    Write all text to a file in 'raw' format
    EDITwriterawblock  -    Write the currently  marked block to a  file in
                            raw format



                                           timEd v1.30 manual - page 132



    EDITwritefmt       -    Write  all text  (formatted, wrapped  at column
                            78)
    EDITwritefmtblock  -    Write a block (formatted)


    Commands available from the List mode:
     

    LISTup             -    Move highlighted bar one message up
    LISTdown           -    Move highlighted bar one message down
    LISTpageup         -    Move highlighted bar one page up
    LISTpagedown       -    Move highlighted bar one page down
    LISThome           -    Move highlighted bar to top of list
    LISTend            -    Move highlighted bar to bottom of list
    LISTcopy           -    Copy tagged messages to another area
    LISTmove           -    Move tagged messages to another area
    LISTdelete         -    Delete tagged messages
    LISTprint          -    Print tagged messages
    LISTwrite          -    Write tagged messages to file
    LISTtagrange       -    Tag a range of messages
    LISTuntagrange     -    Untag a range of messages
    LISTtagall         -    Tag all messages
    LISTuntagall       -    Untag all messages
    LISTexit           -    Exit timEd from list mode
    LISTswitch         -    Switch between 'normal' and 'broad' list
    LISThelp           -    Show help screen
    LISTabort          -    Quit list mode
    LISTdetails        -    Show details of currently highlighted message
    LISTshell          -    Shell to operating system
    LISTREADmsg        -    Read currently highlighted message
    LISTtag            -    Tag currently highlighted message
     
























                                           timEd v1.30 manual - page 133



    15.  Frequently asked questions


    Q1.

    I wrote a nicely formatted message with my external editor.
    However,  after timEd  read the  message in,  the message  looked quite
    different and the nice format was gone.

    A.

    In order  to  stay  within the  Fidonet  specifications, timEd  has  to
    'intelligently'  strip   'hard  returns'  from  your  messages,  before
    writing them  to the message  base. Usually, this works  quite well and
    you won't notice it.

    Sometimes it goes wrong, and for these cases  you can instruct timEd to
    temporarily  NOT  strip  these   'hard  returns'.  Look  in   timEd.prn
    ('Entering messages with timEd') for more details.


                                    -=-

    Q2.

    In timEd.cfg  I  can  define  'hellostrings' and  an  Origin.  But  for
    different areas, I want to use different origins. Is that possible?

    A.

    Yes, that's possible!  When you press ALT-H while you  are in a message
    area,  you can define custom  'hellostrings' etc. for  use in that area
    only! Using  this, you  can have  different 'hellostrings' and  origins
    for every area! See timEd.prn for more info.
    Please note that permanently SAVING these strings is only  available in
    registered versions.

                                    -=-

    Q3.

    In timEd.cfg,  I changed the  'Hellostring'. However, in ONE  area, the
    old 'hellostring' is still being used! How come?

    A.

    You probably used ALT-H to edit the 'Hellostring' for that  area. After
    using ALT-H,  you can  save {+} this  information (in that  area). That
    custom hellostring will then be used for messages in that area.

    If you  change the hellostring in  timEd.cfg, that will not  affect the
    custom 'hellostring' for that area.

    See timEd.prn for more info about the ALT-H function.


                                           timEd v1.30 manual - page 134



    Q4.

    Will you implement support for 'Taglines' and 'Cookies' in timEd?

    A.

    No,  I  don't   like  to  support   automatically  generated   echomail
    pollution.

                                    -=-

    Q5.

    I do a nodelist lookup  on a SysOp that has several  addresses (AKA's).
    However, timEd only shows  me one of those  addresses, and I *know*  he
    has many of them.

    A.

    You are most likely  using a Version 7  nodelist, and the compiler  you
    used to  generate it either doesn't  support 'duplicate sysop names' in
    the nodelist indexes, or it was configured to strip duplicate names.

    Currently, I know  that Qnode and Fastlist  (go for Fastlist!) can  put
    duplicate sysop names in the index. Xlax does not have this ability.

    This  is  not  a  bug  in timEd,  but  a  shortcoming  in  the nodelist
    compiler, or in your configuration of that tosser.




























                                           timEd v1.30 manual - page 135



    16.  Thanks to..


    TimEd is  the result  of enthusiastic efforts  by many, many  people. I
    know it sounds boring, but there are too many people to thank.

    The whole  thing was started by  Scott Dudley, who released  the MSGAPI
    code I  wanted to play with, and the  Squish message base format that I
    wanted to write a reader for..

    Jelle Boot was the first  one to actually use timEd apart  from myself.
    He encouraged  me to go  on with the  program. Even though  he couldn't
    change  any colours!  But he  had a  nice program  (a TSR  that changed
    screen colours 'on-the-fly') to do just that :-)

    Since that time,  many people joined in. The current beta team consists
    of more than 30 people. 

    I owe them.

    Apart from  that there are very  helpful registration, distribution and
    support sites. 

    I owe _them_, too.

    This section, however,  would not be  complete without mentioning  Evin
    Mulron,  whose enthusiasm often inspired me to  put in an extra hour of
    programming. Thanks! 
    He  is also the  one who convinced  me that asking money  for a program
    isn't  such a  bad thing  to do.  Everyone owes  him for  that, because
    without that income all development would have been stopped  early 1994
    when  studying gobbled  up  lots of  money,  that I  wouldn't have  had
    without income from my shareware.

    I won't try  to put the  names of all  people that helped  me in  here.
    There are too many,  and I would forget  several of them. Everyone  who
    helped me out, *knows* I am thankful to them. But, just to be sure:


    T H A N K S !


    "I couldn't have done it without you guys!"













                                           timEd v1.30 manual - page 136



    17.  Contacting the author.


    timEd is currently maintained by Andrew Clarke, 3:633/267.

    The original author, Gerard van Essen, can no longer be contacted via
    FidoNet.

    For general support, try the ARTWARE echo on FidoNet.

    Bug reports can be posted there, or on GitHub at:

    https://github.com/zoomosis/artware/issues



























                                           timEd v1.30 manual - page 137

